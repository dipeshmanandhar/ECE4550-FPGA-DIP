
FPGA-DIP-Software.elf:     file format elf32-littlenios2
FPGA-DIP-Software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00007430 memsz 0x00007430 flags r-x
    LOAD off    0x00008450 vaddr 0x00007450 paddr 0x000091c8 align 2**12
         filesz 0x00001d78 memsz 0x00001d78 flags rw-
    LOAD off    0x0000af40 vaddr 0x0000af40 paddr 0x0000af40 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007074  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000194  000072bc  000072bc  000082bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d78  00007450  000091c8  00008450  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  0000af40  0000af40  0000af40  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0000b09c  0000b09c  0000a1c8  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0000a1c8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000a1c8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000aa8  00000000  00000000  0000a1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001834c  00000000  00000000  0000ac98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000656b  00000000  00000000  00022fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000730c  00000000  00000000  0002954f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001cc8  00000000  00000000  0003085c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003207  00000000  00000000  00032524  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  0003572b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0003a178  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  0003a198  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003d906  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0003d909  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003d90e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003d90f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003d910  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003d914  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003d918  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0003d91c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0003d925  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0003d92e  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0003d937  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000053  00000000  00000000  0003d946  2**0
                  CONTENTS, READONLY
 30 .jdi          0000eb16  00000000  00000000  0003d999  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001d2080  00000000  00000000  0004c4af  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
000072bc l    d  .rodata	00000000 .rodata
00007450 l    d  .rwdata	00000000 .rwdata
0000af40 l    d  .bss	00000000 .bss
0000b09c l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FPGA-DIP-Software_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00000424 l     F .text	00000008 __fp_unlock
00000438 l     F .text	0000019c __sinit.part.1
000005d4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00007450 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00003080 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000318c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000031b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000032a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003384 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003470 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003644 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000091b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003890 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000039c4 l     F .text	00000034 alt_dev_reg
00007e24 l     O .rwdata	00001060 JTAG_UART
00008e84 l     O .rwdata	00000030 AV_Config
00008eb4 l     O .rwdata	00000030 Audio_Subsystem_Audio
00008ee4 l     O .rwdata	0000002c Char_LCD_16x2
00008f10 l     O .rwdata	0000002c IrDA
00008f3c l     O .rwdata	00000038 PS2_Port
00008f74 l     O .rwdata	00000038 PS2_Port_Dual
00008fac l     O .rwdata	0000002c Serial_Port
00008fd8 l     O .rwdata	00000034 USB
0000900c l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
00009068 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
000090c4 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
00009120 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
00009164 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000045cc l     F .text	00000210 altera_avalon_jtag_uart_irq
000047dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004e14 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00006310 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00006574 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00006834 l     F .text	0000003c alt_get_errno
00006870 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000af70 g     O .bss	00000004 alt_instruction_exception_handler
00002e78 g     F .text	00000054 _isatty_r
00003580 g     F .text	0000007c alt_main
000002b8 g     F .text	000000c0 _puts_r
0000af9c g     O .bss	00000100 alt_irq
000059d0 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00002ba0 g     F .text	00000060 _lseek_r
000091c8 g       *ABS*	00000000 __flash_rwdata_start
00004f78 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000b09c g       *ABS*	00000000 __alt_heap_start
00002154 g     F .text	0000005c __sseek
00000774 g     F .text	00000010 __sinit
000057e8 g     F .text	00000034 read_CE_bit
000005dc g     F .text	00000068 __sfmoreglue
00003620 g     F .text	00000024 __malloc_unlock
00005b70 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00006064 g     F .text	00000090 alt_up_rs232_read_fd
0000af60 g     O .bss	00000004 altera_avalon_timer_ts_freq
00001840 g     F .text	0000015c memmove
0000075c g     F .text	00000018 _cleanup
00006c2c g     F .text	00000024 altera_nios2_gen2_irq_init
00004f04 g     F .text	00000074 get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002e1c g     F .text	0000005c _fstat_r
0000af4c g     O .bss	00000004 errno
000020d0 g     F .text	00000008 __seofread
0000af54 g     O .bss	00000004 alt_argv
00011190 g       *ABS*	00000000 _gp
00007ca4 g     O .rwdata	00000180 alt_fd_list
000064b0 g     F .text	00000090 alt_find_dev
000016f8 g     F .text	00000148 memcpy
00005120 g     F .text	00000050 alt_up_character_lcd_write_fd
0000042c g     F .text	0000000c _cleanup_r
00006638 g     F .text	0000007c alt_io_redirect
000072bc g       *ABS*	00000000 __DTOR_END__
000056b8 g     F .text	00000090 alt_up_irda_write_fd
00005ff0 g     F .text	00000074 alt_up_rs232_read_data
00000378 g     F .text	00000014 puts
00006e8c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000054b4 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000049d4 g     F .text	0000021c altera_avalon_jtag_uart_read
00002fc4 g     F .text	00000064 .hidden __udivsi3
000032e0 g     F .text	000000a4 isatty
00005454 g     F .text	00000060 alt_up_irda_disable_read_interrupt
00006dfc g     F .text	00000090 alt_icache_flush
0000af48 g     O .bss	00000004 __malloc_top_pad
000007c4 g     F .text	000004bc __sfvwrite_r
00002028 g     F .text	00000054 _sbrk_r
00002dbc g     F .text	00000060 _read_r
000091b0 g     O .rwdata	00000004 alt_max_fd
00005f6c g     F .text	00000044 alt_up_rs232_check_parity
000023c0 g     F .text	000000f0 _fclose_r
0000581c g     F .text	00000030 read_num_bytes_available
0000273c g     F .text	00000030 fflush
0000af44 g     O .bss	00000004 __malloc_max_sbrked_mem
000066b4 g     F .text	00000180 alt_irq_register
00005784 g     F .text	00000034 read_RI_bit
000034ac g     F .text	000000d4 lseek
00009190 g     O .rwdata	00000004 _global_impure_ptr
00001ac4 g     F .text	00000564 _realloc_r
0000b09c g       *ABS*	00000000 __bss_end
00006b24 g     F .text	00000108 alt_tick
00005880 g     F .text	0000002c read_data_byte
00000794 g     F .text	00000018 __fp_lock_all
00006a88 g     F .text	0000009c alt_alarm_stop
000057b8 g     F .text	00000030 read_RE_bit
0000af64 g     O .bss	00000004 alt_irq_active
000054f4 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
00007c7c g     O .rwdata	00000028 alt_dev_null
000053c0 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00005a30 g     F .text	00000074 alt_up_ps2_write_data_byte
000062f0 g     F .text	00000020 alt_dcache_flush_all
000091c8 g       *ABS*	00000000 __ram_rwdata_end
000091a8 g     O .rwdata	00000008 alt_dev_list
000038cc g     F .text	000000f8 write
00007450 g       *ABS*	00000000 __ram_rodata_end
000031f4 g     F .text	000000b0 fstat
000060f4 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00003028 g     F .text	00000058 .hidden __umodsi3
0000b09c g       *ABS*	00000000 end
00005d60 g     F .text	00000098 alt_up_ps2_write_fd
00005530 g     F .text	00000044 alt_up_irda_check_parity
00004518 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
000072bc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00004e90 g     F .text	00000074 alt_avalon_timer_sc_init
00004bf0 g     F .text	00000224 altera_avalon_jtag_uart_write
00000784 g     F .text	00000004 __sfp_lock_acquire
00001614 g     F .text	000000e4 memchr
0000502c g     F .text	0000007c alt_up_character_lcd_write
00002890 g     F .text	00000310 _free_r
00007108 g     F .text	00000180 __call_exitprocs
00009198 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0000af68 g     O .bss	00000004 _alt_tick_rate
0000af6c g     O .bss	00000004 _alt_nticks
00003680 g     F .text	000000fc read
00003a30 g     F .text	00000984 alt_sys_init
00005270 g     F .text	0000008c alt_up_character_lcd_shift_display
00006ff0 g     F .text	00000118 __register_exitproc
00005c7c g     F .text	00000058 alt_up_ps2_clear_fifo
00005f30 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000052fc g     F .text	0000008c alt_up_character_lcd_erase_pos
0000487c g     F .text	00000068 altera_avalon_jtag_uart_close
00007450 g       *ABS*	00000000 __ram_rwdata_start
000072bc g       *ABS*	00000000 __ram_rodata_start
0000af74 g     O .bss	00000028 __malloc_current_mallinfo
000043b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00006d58 g     F .text	000000a4 alt_get_fd
0000236c g     F .text	00000054 _close_r
00006f74 g     F .text	0000007c memcmp
00004474 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000b09c g       *ABS*	00000000 __alt_stack_base
000044c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000053f8 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00002218 g     F .text	00000154 __swsetup_r
00000644 g     F .text	00000118 __sfp
00007874 g     O .rwdata	00000408 __malloc_av_
00000790 g     F .text	00000004 __sinit_lock_release
0000207c g     F .text	00000054 __sread
00005e90 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00006c50 g     F .text	00000108 alt_find_file
0000634c g     F .text	000000a4 alt_dev_llist_insert
000035fc g     F .text	00000024 __malloc_lock
000037e0 g     F .text	000000b0 sbrk
000026e0 g     F .text	0000005c _fflush_r
0000af40 g       *ABS*	00000000 __bss_start
0000199c g     F .text	00000128 memset
00000284 g     F .text	00000034 main
0000af58 g     O .bss	00000004 alt_envp
0000af40 g     O .bss	00000004 __malloc_max_total_mem
00004414 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000051e4 g     F .text	0000008c alt_up_character_lcd_shift_cursor
000021b0 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
000024b0 g     F .text	00000014 fclose
00005c0c g     F .text	00000070 alt_up_ps2_read_data_byte
00000e08 g     F .text	0000080c _malloc_r
000091b4 g     O .rwdata	00000004 alt_errno
00000c80 g     F .text	000000c4 _fwalk
00005574 g     F .text	00000040 alt_up_irda_write_data
00005df8 g     F .text	0000003c alt_up_ps2_open_dev
00002ecc g     F .text	00000084 .hidden __divsi3
00004ff0 g     F .text	0000003c alt_up_character_lcd_open_dev
0000276c g     F .text	00000124 _malloc_trim_r
00005974 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
000072bc g       *ABS*	00000000 __CTOR_END__
00004fb8 g     F .text	00000038 alt_up_character_lcd_init
000072bc g       *ABS*	00000000 __flash_rodata_start
000072bc g       *ABS*	00000000 __DTOR_LIST__
00006188 g     F .text	0000003c alt_up_rs232_open_dev
000039f8 g     F .text	00000038 alt_irq_init
0000377c g     F .text	00000064 alt_release_fd
0000584c g     F .text	00000034 read_data_valid
00005388 g     F .text	00000038 alt_up_character_lcd_cursor_off
00005b0c g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00006f28 g     F .text	00000014 atexit
000021b8 g     F .text	00000060 _write_r
00009194 g     O .rwdata	00000004 _impure_ptr
0000af50 g     O .bss	00000004 alt_argc
000024c4 g     F .text	0000021c __sflush_r
0000af5c g     O .bss	00000004 altera_avalon_timer_ts_base
00006450 g     F .text	00000060 _do_dtors
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000020 g       .exceptions	00000000 alt_irq_entry
000007ac g     F .text	00000018 __fp_unlock_all
000091a0 g     O .rwdata	00000008 alt_fs_list
00005e34 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00005fb0 g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
000091c8 g       *ABS*	00000000 _edata
0000b09c g       *ABS*	00000000 _end
00000248 g       *ABS*	00000000 __ram_exceptions_end
000048e4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000020d8 g     F .text	0000007c __swrite
0000919c g     O .rwdata	00000004 __malloc_trim_threshold
00006f3c g     F .text	00000038 exit
000055b4 g     F .text	00000074 alt_up_irda_read_data
00000d44 g     F .text	000000c4 _fwalk_reent
000058ac g     F .text	000000c8 alt_up_ps2_init
00002f50 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000788 g     F .text	00000004 __sfp_lock_release
000050a8 g     F .text	00000078 alt_up_character_lcd_string
00005748 g     F .text	0000003c alt_up_irda_open_dev
00007288 g     F .text	00000034 _exit
000061c4 g     F .text	0000012c alt_alarm_start
00002c00 g     F .text	000001bc __smakebuf_r
00005aa4 g     F .text	00000068 alt_up_ps2_wait_for_ack
0000038c g     F .text	00000098 strlen
00006934 g     F .text	00000154 open
00006540 g     F .text	00000034 alt_icache_flush_all
00005170 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
000091bc g     O .rwdata	00000004 alt_priority_mask
00005cd4 g     F .text	0000008c alt_up_ps2_read_fd
00005628 g     F .text	00000090 alt_up_irda_read_fd
000091c0 g     O .rwdata	00000008 alt_alarm_list
000063f0 g     F .text	00000060 _do_ctors
00005ef0 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
000030bc g     F .text	000000d0 close
000033ec g     F .text	00000084 alt_load
0000078c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800074 	movhi	r2,1
 140:	10abe704 	addi	r2,r2,-20580
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10abe704 	addi	r2,r2,-20580
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a77817 	ldw	r2,-25120(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a77817 	ldw	r2,-25120(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     254:	d6846414 	ori	gp,gp,4496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     25c:	10abd014 	ori	r2,r2,44864

    movhi r3, %hi(__bss_end)
     260:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     264:	18ec2714 	ori	r3,r3,45212

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	00033ec0 	call	33ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	00035800 	call	3580 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <main>:
 */

#include <stdio.h>

int main()
{
     284:	defffe04 	addi	sp,sp,-8
     288:	dfc00115 	stw	ra,4(sp)
     28c:	df000015 	stw	fp,0(sp)
     290:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
     294:	01000034 	movhi	r4,0
     298:	211caf04 	addi	r4,r4,29372
     29c:	00003780 	call	378 <puts>

  return 0;
     2a0:	0005883a 	mov	r2,zero
}
     2a4:	e037883a 	mov	sp,fp
     2a8:	dfc00117 	ldw	ra,4(sp)
     2ac:	df000017 	ldw	fp,0(sp)
     2b0:	dec00204 	addi	sp,sp,8
     2b4:	f800283a 	ret

000002b8 <_puts_r>:
     2b8:	defff604 	addi	sp,sp,-40
     2bc:	dc000715 	stw	r16,28(sp)
     2c0:	2021883a 	mov	r16,r4
     2c4:	2809883a 	mov	r4,r5
     2c8:	dc400815 	stw	r17,32(sp)
     2cc:	dfc00915 	stw	ra,36(sp)
     2d0:	2823883a 	mov	r17,r5
     2d4:	000038c0 	call	38c <strlen>
     2d8:	10c00044 	addi	r3,r2,1
     2dc:	d8800115 	stw	r2,4(sp)
     2e0:	00800034 	movhi	r2,0
     2e4:	109cb404 	addi	r2,r2,29392
     2e8:	d8800215 	stw	r2,8(sp)
     2ec:	00800044 	movi	r2,1
     2f0:	d8800315 	stw	r2,12(sp)
     2f4:	00800084 	movi	r2,2
     2f8:	dc400015 	stw	r17,0(sp)
     2fc:	d8c00615 	stw	r3,24(sp)
     300:	dec00415 	stw	sp,16(sp)
     304:	d8800515 	stw	r2,20(sp)
     308:	80000226 	beq	r16,zero,314 <_puts_r+0x5c>
     30c:	80800e17 	ldw	r2,56(r16)
     310:	10001426 	beq	r2,zero,364 <_puts_r+0xac>
     314:	81400217 	ldw	r5,8(r16)
     318:	2880030b 	ldhu	r2,12(r5)
     31c:	10c8000c 	andi	r3,r2,8192
     320:	1800061e 	bne	r3,zero,33c <_puts_r+0x84>
     324:	29001917 	ldw	r4,100(r5)
     328:	00f7ffc4 	movi	r3,-8193
     32c:	10880014 	ori	r2,r2,8192
     330:	20c6703a 	and	r3,r4,r3
     334:	2880030d 	sth	r2,12(r5)
     338:	28c01915 	stw	r3,100(r5)
     33c:	d9800404 	addi	r6,sp,16
     340:	8009883a 	mov	r4,r16
     344:	00007c40 	call	7c4 <__sfvwrite_r>
     348:	1000091e 	bne	r2,zero,370 <_puts_r+0xb8>
     34c:	00800284 	movi	r2,10
     350:	dfc00917 	ldw	ra,36(sp)
     354:	dc400817 	ldw	r17,32(sp)
     358:	dc000717 	ldw	r16,28(sp)
     35c:	dec00a04 	addi	sp,sp,40
     360:	f800283a 	ret
     364:	8009883a 	mov	r4,r16
     368:	00007740 	call	774 <__sinit>
     36c:	003fe906 	br	314 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000314>
     370:	00bfffc4 	movi	r2,-1
     374:	003ff606 	br	350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000350>

00000378 <puts>:
     378:	00800074 	movhi	r2,1
     37c:	10a46504 	addi	r2,r2,-28268
     380:	200b883a 	mov	r5,r4
     384:	11000017 	ldw	r4,0(r2)
     388:	00002b81 	jmpi	2b8 <_puts_r>

0000038c <strlen>:
     38c:	208000cc 	andi	r2,r4,3
     390:	10002026 	beq	r2,zero,414 <strlen+0x88>
     394:	20800007 	ldb	r2,0(r4)
     398:	10002026 	beq	r2,zero,41c <strlen+0x90>
     39c:	2005883a 	mov	r2,r4
     3a0:	00000206 	br	3ac <strlen+0x20>
     3a4:	10c00007 	ldb	r3,0(r2)
     3a8:	18001826 	beq	r3,zero,40c <strlen+0x80>
     3ac:	10800044 	addi	r2,r2,1
     3b0:	10c000cc 	andi	r3,r2,3
     3b4:	183ffb1e 	bne	r3,zero,3a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70003a4>
     3b8:	10c00017 	ldw	r3,0(r2)
     3bc:	01ffbff4 	movhi	r7,65279
     3c0:	39ffbfc4 	addi	r7,r7,-257
     3c4:	00ca303a 	nor	r5,zero,r3
     3c8:	01a02074 	movhi	r6,32897
     3cc:	19c7883a 	add	r3,r3,r7
     3d0:	31a02004 	addi	r6,r6,-32640
     3d4:	1946703a 	and	r3,r3,r5
     3d8:	1986703a 	and	r3,r3,r6
     3dc:	1800091e 	bne	r3,zero,404 <strlen+0x78>
     3e0:	10800104 	addi	r2,r2,4
     3e4:	10c00017 	ldw	r3,0(r2)
     3e8:	19cb883a 	add	r5,r3,r7
     3ec:	00c6303a 	nor	r3,zero,r3
     3f0:	28c6703a 	and	r3,r5,r3
     3f4:	1986703a 	and	r3,r3,r6
     3f8:	183ff926 	beq	r3,zero,3e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70003e0>
     3fc:	00000106 	br	404 <strlen+0x78>
     400:	10800044 	addi	r2,r2,1
     404:	10c00007 	ldb	r3,0(r2)
     408:	183ffd1e 	bne	r3,zero,400 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000400>
     40c:	1105c83a 	sub	r2,r2,r4
     410:	f800283a 	ret
     414:	2005883a 	mov	r2,r4
     418:	003fe706 	br	3b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70003b8>
     41c:	0005883a 	mov	r2,zero
     420:	f800283a 	ret

00000424 <__fp_unlock>:
     424:	0005883a 	mov	r2,zero
     428:	f800283a 	ret

0000042c <_cleanup_r>:
     42c:	01400034 	movhi	r5,0
     430:	2948f004 	addi	r5,r5,9152
     434:	0000d441 	jmpi	d44 <_fwalk_reent>

00000438 <__sinit.part.1>:
     438:	defff704 	addi	sp,sp,-36
     43c:	00c00034 	movhi	r3,0
     440:	dfc00815 	stw	ra,32(sp)
     444:	ddc00715 	stw	r23,28(sp)
     448:	dd800615 	stw	r22,24(sp)
     44c:	dd400515 	stw	r21,20(sp)
     450:	dd000415 	stw	r20,16(sp)
     454:	dcc00315 	stw	r19,12(sp)
     458:	dc800215 	stw	r18,8(sp)
     45c:	dc400115 	stw	r17,4(sp)
     460:	dc000015 	stw	r16,0(sp)
     464:	18c10b04 	addi	r3,r3,1068
     468:	24000117 	ldw	r16,4(r4)
     46c:	20c00f15 	stw	r3,60(r4)
     470:	2080bb04 	addi	r2,r4,748
     474:	00c000c4 	movi	r3,3
     478:	20c0b915 	stw	r3,740(r4)
     47c:	2080ba15 	stw	r2,744(r4)
     480:	2000b815 	stw	zero,736(r4)
     484:	05c00204 	movi	r23,8
     488:	00800104 	movi	r2,4
     48c:	2025883a 	mov	r18,r4
     490:	b80d883a 	mov	r6,r23
     494:	81001704 	addi	r4,r16,92
     498:	000b883a 	mov	r5,zero
     49c:	80000015 	stw	zero,0(r16)
     4a0:	80000115 	stw	zero,4(r16)
     4a4:	80000215 	stw	zero,8(r16)
     4a8:	8080030d 	sth	r2,12(r16)
     4ac:	80001915 	stw	zero,100(r16)
     4b0:	8000038d 	sth	zero,14(r16)
     4b4:	80000415 	stw	zero,16(r16)
     4b8:	80000515 	stw	zero,20(r16)
     4bc:	80000615 	stw	zero,24(r16)
     4c0:	000199c0 	call	199c <memset>
     4c4:	05800034 	movhi	r22,0
     4c8:	94400217 	ldw	r17,8(r18)
     4cc:	05400034 	movhi	r21,0
     4d0:	05000034 	movhi	r20,0
     4d4:	04c00034 	movhi	r19,0
     4d8:	b5881f04 	addi	r22,r22,8316
     4dc:	ad483604 	addi	r21,r21,8408
     4e0:	a5085504 	addi	r20,r20,8532
     4e4:	9cc86c04 	addi	r19,r19,8624
     4e8:	85800815 	stw	r22,32(r16)
     4ec:	85400915 	stw	r21,36(r16)
     4f0:	85000a15 	stw	r20,40(r16)
     4f4:	84c00b15 	stw	r19,44(r16)
     4f8:	84000715 	stw	r16,28(r16)
     4fc:	00800284 	movi	r2,10
     500:	8880030d 	sth	r2,12(r17)
     504:	00800044 	movi	r2,1
     508:	b80d883a 	mov	r6,r23
     50c:	89001704 	addi	r4,r17,92
     510:	000b883a 	mov	r5,zero
     514:	88000015 	stw	zero,0(r17)
     518:	88000115 	stw	zero,4(r17)
     51c:	88000215 	stw	zero,8(r17)
     520:	88001915 	stw	zero,100(r17)
     524:	8880038d 	sth	r2,14(r17)
     528:	88000415 	stw	zero,16(r17)
     52c:	88000515 	stw	zero,20(r17)
     530:	88000615 	stw	zero,24(r17)
     534:	000199c0 	call	199c <memset>
     538:	94000317 	ldw	r16,12(r18)
     53c:	00800484 	movi	r2,18
     540:	8c400715 	stw	r17,28(r17)
     544:	8d800815 	stw	r22,32(r17)
     548:	8d400915 	stw	r21,36(r17)
     54c:	8d000a15 	stw	r20,40(r17)
     550:	8cc00b15 	stw	r19,44(r17)
     554:	8080030d 	sth	r2,12(r16)
     558:	00800084 	movi	r2,2
     55c:	80000015 	stw	zero,0(r16)
     560:	80000115 	stw	zero,4(r16)
     564:	80000215 	stw	zero,8(r16)
     568:	80001915 	stw	zero,100(r16)
     56c:	8080038d 	sth	r2,14(r16)
     570:	80000415 	stw	zero,16(r16)
     574:	80000515 	stw	zero,20(r16)
     578:	80000615 	stw	zero,24(r16)
     57c:	b80d883a 	mov	r6,r23
     580:	000b883a 	mov	r5,zero
     584:	81001704 	addi	r4,r16,92
     588:	000199c0 	call	199c <memset>
     58c:	00800044 	movi	r2,1
     590:	84000715 	stw	r16,28(r16)
     594:	85800815 	stw	r22,32(r16)
     598:	85400915 	stw	r21,36(r16)
     59c:	85000a15 	stw	r20,40(r16)
     5a0:	84c00b15 	stw	r19,44(r16)
     5a4:	90800e15 	stw	r2,56(r18)
     5a8:	dfc00817 	ldw	ra,32(sp)
     5ac:	ddc00717 	ldw	r23,28(sp)
     5b0:	dd800617 	ldw	r22,24(sp)
     5b4:	dd400517 	ldw	r21,20(sp)
     5b8:	dd000417 	ldw	r20,16(sp)
     5bc:	dcc00317 	ldw	r19,12(sp)
     5c0:	dc800217 	ldw	r18,8(sp)
     5c4:	dc400117 	ldw	r17,4(sp)
     5c8:	dc000017 	ldw	r16,0(sp)
     5cc:	dec00904 	addi	sp,sp,36
     5d0:	f800283a 	ret

000005d4 <__fp_lock>:
     5d4:	0005883a 	mov	r2,zero
     5d8:	f800283a 	ret

000005dc <__sfmoreglue>:
     5dc:	defffc04 	addi	sp,sp,-16
     5e0:	dc400115 	stw	r17,4(sp)
     5e4:	2c7fffc4 	addi	r17,r5,-1
     5e8:	8c401a24 	muli	r17,r17,104
     5ec:	dc800215 	stw	r18,8(sp)
     5f0:	2825883a 	mov	r18,r5
     5f4:	89401d04 	addi	r5,r17,116
     5f8:	dc000015 	stw	r16,0(sp)
     5fc:	dfc00315 	stw	ra,12(sp)
     600:	0000e080 	call	e08 <_malloc_r>
     604:	1021883a 	mov	r16,r2
     608:	10000726 	beq	r2,zero,628 <__sfmoreglue+0x4c>
     60c:	11000304 	addi	r4,r2,12
     610:	10000015 	stw	zero,0(r2)
     614:	14800115 	stw	r18,4(r2)
     618:	11000215 	stw	r4,8(r2)
     61c:	89801a04 	addi	r6,r17,104
     620:	000b883a 	mov	r5,zero
     624:	000199c0 	call	199c <memset>
     628:	8005883a 	mov	r2,r16
     62c:	dfc00317 	ldw	ra,12(sp)
     630:	dc800217 	ldw	r18,8(sp)
     634:	dc400117 	ldw	r17,4(sp)
     638:	dc000017 	ldw	r16,0(sp)
     63c:	dec00404 	addi	sp,sp,16
     640:	f800283a 	ret

00000644 <__sfp>:
     644:	defffb04 	addi	sp,sp,-20
     648:	dc000015 	stw	r16,0(sp)
     64c:	04000074 	movhi	r16,1
     650:	84246404 	addi	r16,r16,-28272
     654:	dcc00315 	stw	r19,12(sp)
     658:	2027883a 	mov	r19,r4
     65c:	81000017 	ldw	r4,0(r16)
     660:	dfc00415 	stw	ra,16(sp)
     664:	dc800215 	stw	r18,8(sp)
     668:	20800e17 	ldw	r2,56(r4)
     66c:	dc400115 	stw	r17,4(sp)
     670:	1000021e 	bne	r2,zero,67c <__sfp+0x38>
     674:	00004380 	call	438 <__sinit.part.1>
     678:	81000017 	ldw	r4,0(r16)
     67c:	2480b804 	addi	r18,r4,736
     680:	047fffc4 	movi	r17,-1
     684:	91000117 	ldw	r4,4(r18)
     688:	94000217 	ldw	r16,8(r18)
     68c:	213fffc4 	addi	r4,r4,-1
     690:	20000a16 	blt	r4,zero,6bc <__sfp+0x78>
     694:	8080030f 	ldh	r2,12(r16)
     698:	10000c26 	beq	r2,zero,6cc <__sfp+0x88>
     69c:	80c01d04 	addi	r3,r16,116
     6a0:	00000206 	br	6ac <__sfp+0x68>
     6a4:	18bfe60f 	ldh	r2,-104(r3)
     6a8:	10000826 	beq	r2,zero,6cc <__sfp+0x88>
     6ac:	213fffc4 	addi	r4,r4,-1
     6b0:	1c3ffd04 	addi	r16,r3,-12
     6b4:	18c01a04 	addi	r3,r3,104
     6b8:	247ffa1e 	bne	r4,r17,6a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70006a4>
     6bc:	90800017 	ldw	r2,0(r18)
     6c0:	10001d26 	beq	r2,zero,738 <__sfp+0xf4>
     6c4:	1025883a 	mov	r18,r2
     6c8:	003fee06 	br	684 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000684>
     6cc:	00bfffc4 	movi	r2,-1
     6d0:	8080038d 	sth	r2,14(r16)
     6d4:	00800044 	movi	r2,1
     6d8:	8080030d 	sth	r2,12(r16)
     6dc:	80001915 	stw	zero,100(r16)
     6e0:	80000015 	stw	zero,0(r16)
     6e4:	80000215 	stw	zero,8(r16)
     6e8:	80000115 	stw	zero,4(r16)
     6ec:	80000415 	stw	zero,16(r16)
     6f0:	80000515 	stw	zero,20(r16)
     6f4:	80000615 	stw	zero,24(r16)
     6f8:	01800204 	movi	r6,8
     6fc:	000b883a 	mov	r5,zero
     700:	81001704 	addi	r4,r16,92
     704:	000199c0 	call	199c <memset>
     708:	8005883a 	mov	r2,r16
     70c:	80000c15 	stw	zero,48(r16)
     710:	80000d15 	stw	zero,52(r16)
     714:	80001115 	stw	zero,68(r16)
     718:	80001215 	stw	zero,72(r16)
     71c:	dfc00417 	ldw	ra,16(sp)
     720:	dcc00317 	ldw	r19,12(sp)
     724:	dc800217 	ldw	r18,8(sp)
     728:	dc400117 	ldw	r17,4(sp)
     72c:	dc000017 	ldw	r16,0(sp)
     730:	dec00504 	addi	sp,sp,20
     734:	f800283a 	ret
     738:	01400104 	movi	r5,4
     73c:	9809883a 	mov	r4,r19
     740:	00005dc0 	call	5dc <__sfmoreglue>
     744:	90800015 	stw	r2,0(r18)
     748:	103fde1e 	bne	r2,zero,6c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70006c4>
     74c:	00800304 	movi	r2,12
     750:	98800015 	stw	r2,0(r19)
     754:	0005883a 	mov	r2,zero
     758:	003ff006 	br	71c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700071c>

0000075c <_cleanup>:
     75c:	00800074 	movhi	r2,1
     760:	10a46404 	addi	r2,r2,-28272
     764:	11000017 	ldw	r4,0(r2)
     768:	01400034 	movhi	r5,0
     76c:	2948f004 	addi	r5,r5,9152
     770:	0000d441 	jmpi	d44 <_fwalk_reent>

00000774 <__sinit>:
     774:	20800e17 	ldw	r2,56(r4)
     778:	10000126 	beq	r2,zero,780 <__sinit+0xc>
     77c:	f800283a 	ret
     780:	00004381 	jmpi	438 <__sinit.part.1>

00000784 <__sfp_lock_acquire>:
     784:	f800283a 	ret

00000788 <__sfp_lock_release>:
     788:	f800283a 	ret

0000078c <__sinit_lock_acquire>:
     78c:	f800283a 	ret

00000790 <__sinit_lock_release>:
     790:	f800283a 	ret

00000794 <__fp_lock_all>:
     794:	00800074 	movhi	r2,1
     798:	10a46504 	addi	r2,r2,-28268
     79c:	11000017 	ldw	r4,0(r2)
     7a0:	01400034 	movhi	r5,0
     7a4:	29417504 	addi	r5,r5,1492
     7a8:	0000c801 	jmpi	c80 <_fwalk>

000007ac <__fp_unlock_all>:
     7ac:	00800074 	movhi	r2,1
     7b0:	10a46504 	addi	r2,r2,-28268
     7b4:	11000017 	ldw	r4,0(r2)
     7b8:	01400034 	movhi	r5,0
     7bc:	29410904 	addi	r5,r5,1060
     7c0:	0000c801 	jmpi	c80 <_fwalk>

000007c4 <__sfvwrite_r>:
     7c4:	30800217 	ldw	r2,8(r6)
     7c8:	10006726 	beq	r2,zero,968 <__sfvwrite_r+0x1a4>
     7cc:	28c0030b 	ldhu	r3,12(r5)
     7d0:	defff404 	addi	sp,sp,-48
     7d4:	dd400715 	stw	r21,28(sp)
     7d8:	dd000615 	stw	r20,24(sp)
     7dc:	dc000215 	stw	r16,8(sp)
     7e0:	dfc00b15 	stw	ra,44(sp)
     7e4:	df000a15 	stw	fp,40(sp)
     7e8:	ddc00915 	stw	r23,36(sp)
     7ec:	dd800815 	stw	r22,32(sp)
     7f0:	dcc00515 	stw	r19,20(sp)
     7f4:	dc800415 	stw	r18,16(sp)
     7f8:	dc400315 	stw	r17,12(sp)
     7fc:	1880020c 	andi	r2,r3,8
     800:	2821883a 	mov	r16,r5
     804:	202b883a 	mov	r21,r4
     808:	3029883a 	mov	r20,r6
     80c:	10002726 	beq	r2,zero,8ac <__sfvwrite_r+0xe8>
     810:	28800417 	ldw	r2,16(r5)
     814:	10002526 	beq	r2,zero,8ac <__sfvwrite_r+0xe8>
     818:	1880008c 	andi	r2,r3,2
     81c:	a4400017 	ldw	r17,0(r20)
     820:	10002a26 	beq	r2,zero,8cc <__sfvwrite_r+0x108>
     824:	05a00034 	movhi	r22,32768
     828:	0027883a 	mov	r19,zero
     82c:	0025883a 	mov	r18,zero
     830:	b5bf0004 	addi	r22,r22,-1024
     834:	980d883a 	mov	r6,r19
     838:	a809883a 	mov	r4,r21
     83c:	90004626 	beq	r18,zero,958 <__sfvwrite_r+0x194>
     840:	900f883a 	mov	r7,r18
     844:	b480022e 	bgeu	r22,r18,850 <__sfvwrite_r+0x8c>
     848:	01e00034 	movhi	r7,32768
     84c:	39ff0004 	addi	r7,r7,-1024
     850:	80800917 	ldw	r2,36(r16)
     854:	81400717 	ldw	r5,28(r16)
     858:	103ee83a 	callr	r2
     85c:	0080570e 	bge	zero,r2,9bc <__sfvwrite_r+0x1f8>
     860:	a0c00217 	ldw	r3,8(r20)
     864:	98a7883a 	add	r19,r19,r2
     868:	90a5c83a 	sub	r18,r18,r2
     86c:	1885c83a 	sub	r2,r3,r2
     870:	a0800215 	stw	r2,8(r20)
     874:	103fef1e 	bne	r2,zero,834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000834>
     878:	0005883a 	mov	r2,zero
     87c:	dfc00b17 	ldw	ra,44(sp)
     880:	df000a17 	ldw	fp,40(sp)
     884:	ddc00917 	ldw	r23,36(sp)
     888:	dd800817 	ldw	r22,32(sp)
     88c:	dd400717 	ldw	r21,28(sp)
     890:	dd000617 	ldw	r20,24(sp)
     894:	dcc00517 	ldw	r19,20(sp)
     898:	dc800417 	ldw	r18,16(sp)
     89c:	dc400317 	ldw	r17,12(sp)
     8a0:	dc000217 	ldw	r16,8(sp)
     8a4:	dec00c04 	addi	sp,sp,48
     8a8:	f800283a 	ret
     8ac:	800b883a 	mov	r5,r16
     8b0:	a809883a 	mov	r4,r21
     8b4:	00022180 	call	2218 <__swsetup_r>
     8b8:	1000eb1e 	bne	r2,zero,c68 <__sfvwrite_r+0x4a4>
     8bc:	80c0030b 	ldhu	r3,12(r16)
     8c0:	a4400017 	ldw	r17,0(r20)
     8c4:	1880008c 	andi	r2,r3,2
     8c8:	103fd61e 	bne	r2,zero,824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000824>
     8cc:	1880004c 	andi	r2,r3,1
     8d0:	10003f1e 	bne	r2,zero,9d0 <__sfvwrite_r+0x20c>
     8d4:	0039883a 	mov	fp,zero
     8d8:	0025883a 	mov	r18,zero
     8dc:	90001a26 	beq	r18,zero,948 <__sfvwrite_r+0x184>
     8e0:	1880800c 	andi	r2,r3,512
     8e4:	84c00217 	ldw	r19,8(r16)
     8e8:	10002126 	beq	r2,zero,970 <__sfvwrite_r+0x1ac>
     8ec:	982f883a 	mov	r23,r19
     8f0:	94c09336 	bltu	r18,r19,b40 <__sfvwrite_r+0x37c>
     8f4:	1881200c 	andi	r2,r3,1152
     8f8:	10009e1e 	bne	r2,zero,b74 <__sfvwrite_r+0x3b0>
     8fc:	81000017 	ldw	r4,0(r16)
     900:	b80d883a 	mov	r6,r23
     904:	e00b883a 	mov	r5,fp
     908:	00018400 	call	1840 <memmove>
     90c:	80c00217 	ldw	r3,8(r16)
     910:	81000017 	ldw	r4,0(r16)
     914:	9005883a 	mov	r2,r18
     918:	1ce7c83a 	sub	r19,r3,r19
     91c:	25cf883a 	add	r7,r4,r23
     920:	84c00215 	stw	r19,8(r16)
     924:	81c00015 	stw	r7,0(r16)
     928:	a0c00217 	ldw	r3,8(r20)
     92c:	e0b9883a 	add	fp,fp,r2
     930:	90a5c83a 	sub	r18,r18,r2
     934:	18a7c83a 	sub	r19,r3,r2
     938:	a4c00215 	stw	r19,8(r20)
     93c:	983fce26 	beq	r19,zero,878 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000878>
     940:	80c0030b 	ldhu	r3,12(r16)
     944:	903fe61e 	bne	r18,zero,8e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70008e0>
     948:	8f000017 	ldw	fp,0(r17)
     94c:	8c800117 	ldw	r18,4(r17)
     950:	8c400204 	addi	r17,r17,8
     954:	003fe106 	br	8dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70008dc>
     958:	8cc00017 	ldw	r19,0(r17)
     95c:	8c800117 	ldw	r18,4(r17)
     960:	8c400204 	addi	r17,r17,8
     964:	003fb306 	br	834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000834>
     968:	0005883a 	mov	r2,zero
     96c:	f800283a 	ret
     970:	81000017 	ldw	r4,0(r16)
     974:	80800417 	ldw	r2,16(r16)
     978:	11005736 	bltu	r2,r4,ad8 <__sfvwrite_r+0x314>
     97c:	85c00517 	ldw	r23,20(r16)
     980:	95c05536 	bltu	r18,r23,ad8 <__sfvwrite_r+0x314>
     984:	00a00034 	movhi	r2,32768
     988:	10bfffc4 	addi	r2,r2,-1
     98c:	9009883a 	mov	r4,r18
     990:	1480012e 	bgeu	r2,r18,998 <__sfvwrite_r+0x1d4>
     994:	1009883a 	mov	r4,r2
     998:	b80b883a 	mov	r5,r23
     99c:	0002ecc0 	call	2ecc <__divsi3>
     9a0:	15cf383a 	mul	r7,r2,r23
     9a4:	81400717 	ldw	r5,28(r16)
     9a8:	80800917 	ldw	r2,36(r16)
     9ac:	e00d883a 	mov	r6,fp
     9b0:	a809883a 	mov	r4,r21
     9b4:	103ee83a 	callr	r2
     9b8:	00bfdb16 	blt	zero,r2,928 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000928>
     9bc:	8080030b 	ldhu	r2,12(r16)
     9c0:	10801014 	ori	r2,r2,64
     9c4:	8080030d 	sth	r2,12(r16)
     9c8:	00bfffc4 	movi	r2,-1
     9cc:	003fab06 	br	87c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700087c>
     9d0:	0027883a 	mov	r19,zero
     9d4:	0011883a 	mov	r8,zero
     9d8:	0039883a 	mov	fp,zero
     9dc:	0025883a 	mov	r18,zero
     9e0:	90001f26 	beq	r18,zero,a60 <__sfvwrite_r+0x29c>
     9e4:	40005a26 	beq	r8,zero,b50 <__sfvwrite_r+0x38c>
     9e8:	982d883a 	mov	r22,r19
     9ec:	94c0012e 	bgeu	r18,r19,9f4 <__sfvwrite_r+0x230>
     9f0:	902d883a 	mov	r22,r18
     9f4:	81000017 	ldw	r4,0(r16)
     9f8:	80800417 	ldw	r2,16(r16)
     9fc:	b02f883a 	mov	r23,r22
     a00:	81c00517 	ldw	r7,20(r16)
     a04:	1100032e 	bgeu	r2,r4,a14 <__sfvwrite_r+0x250>
     a08:	80c00217 	ldw	r3,8(r16)
     a0c:	38c7883a 	add	r3,r7,r3
     a10:	1d801816 	blt	r3,r22,a74 <__sfvwrite_r+0x2b0>
     a14:	b1c03e16 	blt	r22,r7,b10 <__sfvwrite_r+0x34c>
     a18:	80800917 	ldw	r2,36(r16)
     a1c:	81400717 	ldw	r5,28(r16)
     a20:	e00d883a 	mov	r6,fp
     a24:	da000115 	stw	r8,4(sp)
     a28:	a809883a 	mov	r4,r21
     a2c:	103ee83a 	callr	r2
     a30:	102f883a 	mov	r23,r2
     a34:	da000117 	ldw	r8,4(sp)
     a38:	00bfe00e 	bge	zero,r2,9bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009bc>
     a3c:	9de7c83a 	sub	r19,r19,r23
     a40:	98001f26 	beq	r19,zero,ac0 <__sfvwrite_r+0x2fc>
     a44:	a0800217 	ldw	r2,8(r20)
     a48:	e5f9883a 	add	fp,fp,r23
     a4c:	95e5c83a 	sub	r18,r18,r23
     a50:	15efc83a 	sub	r23,r2,r23
     a54:	a5c00215 	stw	r23,8(r20)
     a58:	b83f8726 	beq	r23,zero,878 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000878>
     a5c:	903fe11e 	bne	r18,zero,9e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009e4>
     a60:	8f000017 	ldw	fp,0(r17)
     a64:	8c800117 	ldw	r18,4(r17)
     a68:	0011883a 	mov	r8,zero
     a6c:	8c400204 	addi	r17,r17,8
     a70:	003fdb06 	br	9e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009e0>
     a74:	180d883a 	mov	r6,r3
     a78:	e00b883a 	mov	r5,fp
     a7c:	da000115 	stw	r8,4(sp)
     a80:	d8c00015 	stw	r3,0(sp)
     a84:	00018400 	call	1840 <memmove>
     a88:	d8c00017 	ldw	r3,0(sp)
     a8c:	80800017 	ldw	r2,0(r16)
     a90:	800b883a 	mov	r5,r16
     a94:	a809883a 	mov	r4,r21
     a98:	10c5883a 	add	r2,r2,r3
     a9c:	80800015 	stw	r2,0(r16)
     aa0:	d8c00015 	stw	r3,0(sp)
     aa4:	00026e00 	call	26e0 <_fflush_r>
     aa8:	d8c00017 	ldw	r3,0(sp)
     aac:	da000117 	ldw	r8,4(sp)
     ab0:	103fc21e 	bne	r2,zero,9bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009bc>
     ab4:	182f883a 	mov	r23,r3
     ab8:	9de7c83a 	sub	r19,r19,r23
     abc:	983fe11e 	bne	r19,zero,a44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a44>
     ac0:	800b883a 	mov	r5,r16
     ac4:	a809883a 	mov	r4,r21
     ac8:	00026e00 	call	26e0 <_fflush_r>
     acc:	103fbb1e 	bne	r2,zero,9bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009bc>
     ad0:	0011883a 	mov	r8,zero
     ad4:	003fdb06 	br	a44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a44>
     ad8:	94c0012e 	bgeu	r18,r19,ae0 <__sfvwrite_r+0x31c>
     adc:	9027883a 	mov	r19,r18
     ae0:	980d883a 	mov	r6,r19
     ae4:	e00b883a 	mov	r5,fp
     ae8:	00018400 	call	1840 <memmove>
     aec:	80800217 	ldw	r2,8(r16)
     af0:	80c00017 	ldw	r3,0(r16)
     af4:	14c5c83a 	sub	r2,r2,r19
     af8:	1cc7883a 	add	r3,r3,r19
     afc:	80800215 	stw	r2,8(r16)
     b00:	80c00015 	stw	r3,0(r16)
     b04:	10004326 	beq	r2,zero,c14 <__sfvwrite_r+0x450>
     b08:	9805883a 	mov	r2,r19
     b0c:	003f8606 	br	928 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000928>
     b10:	b00d883a 	mov	r6,r22
     b14:	e00b883a 	mov	r5,fp
     b18:	da000115 	stw	r8,4(sp)
     b1c:	00018400 	call	1840 <memmove>
     b20:	80800217 	ldw	r2,8(r16)
     b24:	80c00017 	ldw	r3,0(r16)
     b28:	da000117 	ldw	r8,4(sp)
     b2c:	1585c83a 	sub	r2,r2,r22
     b30:	1dad883a 	add	r22,r3,r22
     b34:	80800215 	stw	r2,8(r16)
     b38:	85800015 	stw	r22,0(r16)
     b3c:	003fbf06 	br	a3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a3c>
     b40:	81000017 	ldw	r4,0(r16)
     b44:	9027883a 	mov	r19,r18
     b48:	902f883a 	mov	r23,r18
     b4c:	003f6c06 	br	900 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000900>
     b50:	900d883a 	mov	r6,r18
     b54:	01400284 	movi	r5,10
     b58:	e009883a 	mov	r4,fp
     b5c:	00016140 	call	1614 <memchr>
     b60:	10003e26 	beq	r2,zero,c5c <__sfvwrite_r+0x498>
     b64:	10800044 	addi	r2,r2,1
     b68:	1727c83a 	sub	r19,r2,fp
     b6c:	02000044 	movi	r8,1
     b70:	003f9d06 	br	9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009e8>
     b74:	80800517 	ldw	r2,20(r16)
     b78:	81400417 	ldw	r5,16(r16)
     b7c:	81c00017 	ldw	r7,0(r16)
     b80:	10a7883a 	add	r19,r2,r2
     b84:	9885883a 	add	r2,r19,r2
     b88:	1026d7fa 	srli	r19,r2,31
     b8c:	396dc83a 	sub	r22,r7,r5
     b90:	b1000044 	addi	r4,r22,1
     b94:	9885883a 	add	r2,r19,r2
     b98:	1027d07a 	srai	r19,r2,1
     b9c:	2485883a 	add	r2,r4,r18
     ba0:	980d883a 	mov	r6,r19
     ba4:	9880022e 	bgeu	r19,r2,bb0 <__sfvwrite_r+0x3ec>
     ba8:	1027883a 	mov	r19,r2
     bac:	100d883a 	mov	r6,r2
     bb0:	18c1000c 	andi	r3,r3,1024
     bb4:	18001c26 	beq	r3,zero,c28 <__sfvwrite_r+0x464>
     bb8:	300b883a 	mov	r5,r6
     bbc:	a809883a 	mov	r4,r21
     bc0:	0000e080 	call	e08 <_malloc_r>
     bc4:	102f883a 	mov	r23,r2
     bc8:	10002926 	beq	r2,zero,c70 <__sfvwrite_r+0x4ac>
     bcc:	81400417 	ldw	r5,16(r16)
     bd0:	b00d883a 	mov	r6,r22
     bd4:	1009883a 	mov	r4,r2
     bd8:	00016f80 	call	16f8 <memcpy>
     bdc:	8080030b 	ldhu	r2,12(r16)
     be0:	00fedfc4 	movi	r3,-1153
     be4:	10c4703a 	and	r2,r2,r3
     be8:	10802014 	ori	r2,r2,128
     bec:	8080030d 	sth	r2,12(r16)
     bf0:	bd89883a 	add	r4,r23,r22
     bf4:	9d8fc83a 	sub	r7,r19,r22
     bf8:	85c00415 	stw	r23,16(r16)
     bfc:	84c00515 	stw	r19,20(r16)
     c00:	81000015 	stw	r4,0(r16)
     c04:	9027883a 	mov	r19,r18
     c08:	81c00215 	stw	r7,8(r16)
     c0c:	902f883a 	mov	r23,r18
     c10:	003f3b06 	br	900 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000900>
     c14:	800b883a 	mov	r5,r16
     c18:	a809883a 	mov	r4,r21
     c1c:	00026e00 	call	26e0 <_fflush_r>
     c20:	103fb926 	beq	r2,zero,b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b08>
     c24:	003f6506 	br	9bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009bc>
     c28:	a809883a 	mov	r4,r21
     c2c:	0001ac40 	call	1ac4 <_realloc_r>
     c30:	102f883a 	mov	r23,r2
     c34:	103fee1e 	bne	r2,zero,bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bf0>
     c38:	81400417 	ldw	r5,16(r16)
     c3c:	a809883a 	mov	r4,r21
     c40:	00028900 	call	2890 <_free_r>
     c44:	8080030b 	ldhu	r2,12(r16)
     c48:	00ffdfc4 	movi	r3,-129
     c4c:	1884703a 	and	r2,r3,r2
     c50:	00c00304 	movi	r3,12
     c54:	a8c00015 	stw	r3,0(r21)
     c58:	003f5906 	br	9c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009c0>
     c5c:	94c00044 	addi	r19,r18,1
     c60:	02000044 	movi	r8,1
     c64:	003f6006 	br	9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009e8>
     c68:	00bfffc4 	movi	r2,-1
     c6c:	003f0306 	br	87c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700087c>
     c70:	00800304 	movi	r2,12
     c74:	a8800015 	stw	r2,0(r21)
     c78:	8080030b 	ldhu	r2,12(r16)
     c7c:	003f5006 	br	9c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009c0>

00000c80 <_fwalk>:
     c80:	defff704 	addi	sp,sp,-36
     c84:	dd000415 	stw	r20,16(sp)
     c88:	dfc00815 	stw	ra,32(sp)
     c8c:	ddc00715 	stw	r23,28(sp)
     c90:	dd800615 	stw	r22,24(sp)
     c94:	dd400515 	stw	r21,20(sp)
     c98:	dcc00315 	stw	r19,12(sp)
     c9c:	dc800215 	stw	r18,8(sp)
     ca0:	dc400115 	stw	r17,4(sp)
     ca4:	dc000015 	stw	r16,0(sp)
     ca8:	2500b804 	addi	r20,r4,736
     cac:	a0002326 	beq	r20,zero,d3c <_fwalk+0xbc>
     cb0:	282b883a 	mov	r21,r5
     cb4:	002f883a 	mov	r23,zero
     cb8:	05800044 	movi	r22,1
     cbc:	04ffffc4 	movi	r19,-1
     cc0:	a4400117 	ldw	r17,4(r20)
     cc4:	a4800217 	ldw	r18,8(r20)
     cc8:	8c7fffc4 	addi	r17,r17,-1
     ccc:	88000d16 	blt	r17,zero,d04 <_fwalk+0x84>
     cd0:	94000304 	addi	r16,r18,12
     cd4:	94800384 	addi	r18,r18,14
     cd8:	8080000b 	ldhu	r2,0(r16)
     cdc:	8c7fffc4 	addi	r17,r17,-1
     ce0:	813ffd04 	addi	r4,r16,-12
     ce4:	b080042e 	bgeu	r22,r2,cf8 <_fwalk+0x78>
     ce8:	9080000f 	ldh	r2,0(r18)
     cec:	14c00226 	beq	r2,r19,cf8 <_fwalk+0x78>
     cf0:	a83ee83a 	callr	r21
     cf4:	b8aeb03a 	or	r23,r23,r2
     cf8:	84001a04 	addi	r16,r16,104
     cfc:	94801a04 	addi	r18,r18,104
     d00:	8cfff51e 	bne	r17,r19,cd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000cd8>
     d04:	a5000017 	ldw	r20,0(r20)
     d08:	a03fed1e 	bne	r20,zero,cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000cc0>
     d0c:	b805883a 	mov	r2,r23
     d10:	dfc00817 	ldw	ra,32(sp)
     d14:	ddc00717 	ldw	r23,28(sp)
     d18:	dd800617 	ldw	r22,24(sp)
     d1c:	dd400517 	ldw	r21,20(sp)
     d20:	dd000417 	ldw	r20,16(sp)
     d24:	dcc00317 	ldw	r19,12(sp)
     d28:	dc800217 	ldw	r18,8(sp)
     d2c:	dc400117 	ldw	r17,4(sp)
     d30:	dc000017 	ldw	r16,0(sp)
     d34:	dec00904 	addi	sp,sp,36
     d38:	f800283a 	ret
     d3c:	002f883a 	mov	r23,zero
     d40:	003ff206 	br	d0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d0c>

00000d44 <_fwalk_reent>:
     d44:	defff704 	addi	sp,sp,-36
     d48:	dd000415 	stw	r20,16(sp)
     d4c:	dfc00815 	stw	ra,32(sp)
     d50:	ddc00715 	stw	r23,28(sp)
     d54:	dd800615 	stw	r22,24(sp)
     d58:	dd400515 	stw	r21,20(sp)
     d5c:	dcc00315 	stw	r19,12(sp)
     d60:	dc800215 	stw	r18,8(sp)
     d64:	dc400115 	stw	r17,4(sp)
     d68:	dc000015 	stw	r16,0(sp)
     d6c:	2500b804 	addi	r20,r4,736
     d70:	a0002326 	beq	r20,zero,e00 <_fwalk_reent+0xbc>
     d74:	282b883a 	mov	r21,r5
     d78:	2027883a 	mov	r19,r4
     d7c:	002f883a 	mov	r23,zero
     d80:	05800044 	movi	r22,1
     d84:	04bfffc4 	movi	r18,-1
     d88:	a4400117 	ldw	r17,4(r20)
     d8c:	a4000217 	ldw	r16,8(r20)
     d90:	8c7fffc4 	addi	r17,r17,-1
     d94:	88000c16 	blt	r17,zero,dc8 <_fwalk_reent+0x84>
     d98:	84000304 	addi	r16,r16,12
     d9c:	8080000b 	ldhu	r2,0(r16)
     da0:	8c7fffc4 	addi	r17,r17,-1
     da4:	817ffd04 	addi	r5,r16,-12
     da8:	b080052e 	bgeu	r22,r2,dc0 <_fwalk_reent+0x7c>
     dac:	8080008f 	ldh	r2,2(r16)
     db0:	9809883a 	mov	r4,r19
     db4:	14800226 	beq	r2,r18,dc0 <_fwalk_reent+0x7c>
     db8:	a83ee83a 	callr	r21
     dbc:	b8aeb03a 	or	r23,r23,r2
     dc0:	84001a04 	addi	r16,r16,104
     dc4:	8cbff51e 	bne	r17,r18,d9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d9c>
     dc8:	a5000017 	ldw	r20,0(r20)
     dcc:	a03fee1e 	bne	r20,zero,d88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d88>
     dd0:	b805883a 	mov	r2,r23
     dd4:	dfc00817 	ldw	ra,32(sp)
     dd8:	ddc00717 	ldw	r23,28(sp)
     ddc:	dd800617 	ldw	r22,24(sp)
     de0:	dd400517 	ldw	r21,20(sp)
     de4:	dd000417 	ldw	r20,16(sp)
     de8:	dcc00317 	ldw	r19,12(sp)
     dec:	dc800217 	ldw	r18,8(sp)
     df0:	dc400117 	ldw	r17,4(sp)
     df4:	dc000017 	ldw	r16,0(sp)
     df8:	dec00904 	addi	sp,sp,36
     dfc:	f800283a 	ret
     e00:	002f883a 	mov	r23,zero
     e04:	003ff206 	br	dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000dd0>

00000e08 <_malloc_r>:
     e08:	defff504 	addi	sp,sp,-44
     e0c:	dc800315 	stw	r18,12(sp)
     e10:	dfc00a15 	stw	ra,40(sp)
     e14:	df000915 	stw	fp,36(sp)
     e18:	ddc00815 	stw	r23,32(sp)
     e1c:	dd800715 	stw	r22,28(sp)
     e20:	dd400615 	stw	r21,24(sp)
     e24:	dd000515 	stw	r20,20(sp)
     e28:	dcc00415 	stw	r19,16(sp)
     e2c:	dc400215 	stw	r17,8(sp)
     e30:	dc000115 	stw	r16,4(sp)
     e34:	288002c4 	addi	r2,r5,11
     e38:	00c00584 	movi	r3,22
     e3c:	2025883a 	mov	r18,r4
     e40:	18807f2e 	bgeu	r3,r2,1040 <_malloc_r+0x238>
     e44:	047ffe04 	movi	r17,-8
     e48:	1462703a 	and	r17,r2,r17
     e4c:	8800a316 	blt	r17,zero,10dc <_malloc_r+0x2d4>
     e50:	8940a236 	bltu	r17,r5,10dc <_malloc_r+0x2d4>
     e54:	00035fc0 	call	35fc <__malloc_lock>
     e58:	00807dc4 	movi	r2,503
     e5c:	1441e92e 	bgeu	r2,r17,1604 <_malloc_r+0x7fc>
     e60:	8804d27a 	srli	r2,r17,9
     e64:	1000a126 	beq	r2,zero,10ec <_malloc_r+0x2e4>
     e68:	00c00104 	movi	r3,4
     e6c:	18811e36 	bltu	r3,r2,12e8 <_malloc_r+0x4e0>
     e70:	8804d1ba 	srli	r2,r17,6
     e74:	12000e44 	addi	r8,r2,57
     e78:	11c00e04 	addi	r7,r2,56
     e7c:	4209883a 	add	r4,r8,r8
     e80:	04c00034 	movhi	r19,0
     e84:	2109883a 	add	r4,r4,r4
     e88:	9cde1d04 	addi	r19,r19,30836
     e8c:	2109883a 	add	r4,r4,r4
     e90:	9909883a 	add	r4,r19,r4
     e94:	24000117 	ldw	r16,4(r4)
     e98:	213ffe04 	addi	r4,r4,-8
     e9c:	24009726 	beq	r4,r16,10fc <_malloc_r+0x2f4>
     ea0:	80800117 	ldw	r2,4(r16)
     ea4:	01bfff04 	movi	r6,-4
     ea8:	014003c4 	movi	r5,15
     eac:	1184703a 	and	r2,r2,r6
     eb0:	1447c83a 	sub	r3,r2,r17
     eb4:	28c00716 	blt	r5,r3,ed4 <_malloc_r+0xcc>
     eb8:	1800920e 	bge	r3,zero,1104 <_malloc_r+0x2fc>
     ebc:	84000317 	ldw	r16,12(r16)
     ec0:	24008e26 	beq	r4,r16,10fc <_malloc_r+0x2f4>
     ec4:	80800117 	ldw	r2,4(r16)
     ec8:	1184703a 	and	r2,r2,r6
     ecc:	1447c83a 	sub	r3,r2,r17
     ed0:	28fff90e 	bge	r5,r3,eb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000eb8>
     ed4:	3809883a 	mov	r4,r7
     ed8:	01800034 	movhi	r6,0
     edc:	9c000417 	ldw	r16,16(r19)
     ee0:	319e1d04 	addi	r6,r6,30836
     ee4:	32000204 	addi	r8,r6,8
     ee8:	82013426 	beq	r16,r8,13bc <_malloc_r+0x5b4>
     eec:	80c00117 	ldw	r3,4(r16)
     ef0:	00bfff04 	movi	r2,-4
     ef4:	188e703a 	and	r7,r3,r2
     ef8:	3c45c83a 	sub	r2,r7,r17
     efc:	00c003c4 	movi	r3,15
     f00:	18811f16 	blt	r3,r2,1380 <_malloc_r+0x578>
     f04:	32000515 	stw	r8,20(r6)
     f08:	32000415 	stw	r8,16(r6)
     f0c:	10007f0e 	bge	r2,zero,110c <_malloc_r+0x304>
     f10:	00807fc4 	movi	r2,511
     f14:	11c0fd36 	bltu	r2,r7,130c <_malloc_r+0x504>
     f18:	3806d0fa 	srli	r3,r7,3
     f1c:	01c00044 	movi	r7,1
     f20:	30800117 	ldw	r2,4(r6)
     f24:	19400044 	addi	r5,r3,1
     f28:	294b883a 	add	r5,r5,r5
     f2c:	1807d0ba 	srai	r3,r3,2
     f30:	294b883a 	add	r5,r5,r5
     f34:	294b883a 	add	r5,r5,r5
     f38:	298b883a 	add	r5,r5,r6
     f3c:	38c6983a 	sll	r3,r7,r3
     f40:	29c00017 	ldw	r7,0(r5)
     f44:	2a7ffe04 	addi	r9,r5,-8
     f48:	1886b03a 	or	r3,r3,r2
     f4c:	82400315 	stw	r9,12(r16)
     f50:	81c00215 	stw	r7,8(r16)
     f54:	30c00115 	stw	r3,4(r6)
     f58:	2c000015 	stw	r16,0(r5)
     f5c:	3c000315 	stw	r16,12(r7)
     f60:	2005d0ba 	srai	r2,r4,2
     f64:	01400044 	movi	r5,1
     f68:	288a983a 	sll	r5,r5,r2
     f6c:	19406f36 	bltu	r3,r5,112c <_malloc_r+0x324>
     f70:	28c4703a 	and	r2,r5,r3
     f74:	10000a1e 	bne	r2,zero,fa0 <_malloc_r+0x198>
     f78:	00bfff04 	movi	r2,-4
     f7c:	294b883a 	add	r5,r5,r5
     f80:	2088703a 	and	r4,r4,r2
     f84:	28c4703a 	and	r2,r5,r3
     f88:	21000104 	addi	r4,r4,4
     f8c:	1000041e 	bne	r2,zero,fa0 <_malloc_r+0x198>
     f90:	294b883a 	add	r5,r5,r5
     f94:	28c4703a 	and	r2,r5,r3
     f98:	21000104 	addi	r4,r4,4
     f9c:	103ffc26 	beq	r2,zero,f90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f90>
     fa0:	02bfff04 	movi	r10,-4
     fa4:	024003c4 	movi	r9,15
     fa8:	21800044 	addi	r6,r4,1
     fac:	318d883a 	add	r6,r6,r6
     fb0:	318d883a 	add	r6,r6,r6
     fb4:	318d883a 	add	r6,r6,r6
     fb8:	998d883a 	add	r6,r19,r6
     fbc:	333ffe04 	addi	r12,r6,-8
     fc0:	2017883a 	mov	r11,r4
     fc4:	31800104 	addi	r6,r6,4
     fc8:	34000017 	ldw	r16,0(r6)
     fcc:	31fffd04 	addi	r7,r6,-12
     fd0:	81c0041e 	bne	r16,r7,fe4 <_malloc_r+0x1dc>
     fd4:	0000fb06 	br	13c4 <_malloc_r+0x5bc>
     fd8:	1801030e 	bge	r3,zero,13e8 <_malloc_r+0x5e0>
     fdc:	84000317 	ldw	r16,12(r16)
     fe0:	81c0f826 	beq	r16,r7,13c4 <_malloc_r+0x5bc>
     fe4:	80800117 	ldw	r2,4(r16)
     fe8:	1284703a 	and	r2,r2,r10
     fec:	1447c83a 	sub	r3,r2,r17
     ff0:	48fff90e 	bge	r9,r3,fd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fd8>
     ff4:	80800317 	ldw	r2,12(r16)
     ff8:	81000217 	ldw	r4,8(r16)
     ffc:	89400054 	ori	r5,r17,1
    1000:	81400115 	stw	r5,4(r16)
    1004:	20800315 	stw	r2,12(r4)
    1008:	11000215 	stw	r4,8(r2)
    100c:	8463883a 	add	r17,r16,r17
    1010:	9c400515 	stw	r17,20(r19)
    1014:	9c400415 	stw	r17,16(r19)
    1018:	18800054 	ori	r2,r3,1
    101c:	88800115 	stw	r2,4(r17)
    1020:	8a000315 	stw	r8,12(r17)
    1024:	8a000215 	stw	r8,8(r17)
    1028:	88e3883a 	add	r17,r17,r3
    102c:	88c00015 	stw	r3,0(r17)
    1030:	9009883a 	mov	r4,r18
    1034:	00036200 	call	3620 <__malloc_unlock>
    1038:	80800204 	addi	r2,r16,8
    103c:	00001b06 	br	10ac <_malloc_r+0x2a4>
    1040:	04400404 	movi	r17,16
    1044:	89402536 	bltu	r17,r5,10dc <_malloc_r+0x2d4>
    1048:	00035fc0 	call	35fc <__malloc_lock>
    104c:	00800184 	movi	r2,6
    1050:	01000084 	movi	r4,2
    1054:	04c00034 	movhi	r19,0
    1058:	1085883a 	add	r2,r2,r2
    105c:	9cde1d04 	addi	r19,r19,30836
    1060:	1085883a 	add	r2,r2,r2
    1064:	9885883a 	add	r2,r19,r2
    1068:	14000117 	ldw	r16,4(r2)
    106c:	10fffe04 	addi	r3,r2,-8
    1070:	80c0d926 	beq	r16,r3,13d8 <_malloc_r+0x5d0>
    1074:	80c00117 	ldw	r3,4(r16)
    1078:	81000317 	ldw	r4,12(r16)
    107c:	00bfff04 	movi	r2,-4
    1080:	1884703a 	and	r2,r3,r2
    1084:	81400217 	ldw	r5,8(r16)
    1088:	8085883a 	add	r2,r16,r2
    108c:	10c00117 	ldw	r3,4(r2)
    1090:	29000315 	stw	r4,12(r5)
    1094:	21400215 	stw	r5,8(r4)
    1098:	18c00054 	ori	r3,r3,1
    109c:	10c00115 	stw	r3,4(r2)
    10a0:	9009883a 	mov	r4,r18
    10a4:	00036200 	call	3620 <__malloc_unlock>
    10a8:	80800204 	addi	r2,r16,8
    10ac:	dfc00a17 	ldw	ra,40(sp)
    10b0:	df000917 	ldw	fp,36(sp)
    10b4:	ddc00817 	ldw	r23,32(sp)
    10b8:	dd800717 	ldw	r22,28(sp)
    10bc:	dd400617 	ldw	r21,24(sp)
    10c0:	dd000517 	ldw	r20,20(sp)
    10c4:	dcc00417 	ldw	r19,16(sp)
    10c8:	dc800317 	ldw	r18,12(sp)
    10cc:	dc400217 	ldw	r17,8(sp)
    10d0:	dc000117 	ldw	r16,4(sp)
    10d4:	dec00b04 	addi	sp,sp,44
    10d8:	f800283a 	ret
    10dc:	00800304 	movi	r2,12
    10e0:	90800015 	stw	r2,0(r18)
    10e4:	0005883a 	mov	r2,zero
    10e8:	003ff006 	br	10ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010ac>
    10ec:	01002004 	movi	r4,128
    10f0:	02001004 	movi	r8,64
    10f4:	01c00fc4 	movi	r7,63
    10f8:	003f6106 	br	e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e80>
    10fc:	4009883a 	mov	r4,r8
    1100:	003f7506 	br	ed8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ed8>
    1104:	81000317 	ldw	r4,12(r16)
    1108:	003fde06 	br	1084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001084>
    110c:	81c5883a 	add	r2,r16,r7
    1110:	11400117 	ldw	r5,4(r2)
    1114:	9009883a 	mov	r4,r18
    1118:	29400054 	ori	r5,r5,1
    111c:	11400115 	stw	r5,4(r2)
    1120:	00036200 	call	3620 <__malloc_unlock>
    1124:	80800204 	addi	r2,r16,8
    1128:	003fe006 	br	10ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010ac>
    112c:	9c000217 	ldw	r16,8(r19)
    1130:	00bfff04 	movi	r2,-4
    1134:	85800117 	ldw	r22,4(r16)
    1138:	b0ac703a 	and	r22,r22,r2
    113c:	b4400336 	bltu	r22,r17,114c <_malloc_r+0x344>
    1140:	b445c83a 	sub	r2,r22,r17
    1144:	00c003c4 	movi	r3,15
    1148:	18805d16 	blt	r3,r2,12c0 <_malloc_r+0x4b8>
    114c:	05c00074 	movhi	r23,1
    1150:	00800074 	movhi	r2,1
    1154:	10abd204 	addi	r2,r2,-20664
    1158:	bde46604 	addi	r23,r23,-28264
    115c:	15400017 	ldw	r21,0(r2)
    1160:	b8c00017 	ldw	r3,0(r23)
    1164:	00bfffc4 	movi	r2,-1
    1168:	858d883a 	add	r6,r16,r22
    116c:	8d6b883a 	add	r21,r17,r21
    1170:	1880ea26 	beq	r3,r2,151c <_malloc_r+0x714>
    1174:	ad4403c4 	addi	r21,r21,4111
    1178:	00bc0004 	movi	r2,-4096
    117c:	a8aa703a 	and	r21,r21,r2
    1180:	a80b883a 	mov	r5,r21
    1184:	9009883a 	mov	r4,r18
    1188:	d9800015 	stw	r6,0(sp)
    118c:	00020280 	call	2028 <_sbrk_r>
    1190:	1029883a 	mov	r20,r2
    1194:	00bfffc4 	movi	r2,-1
    1198:	d9800017 	ldw	r6,0(sp)
    119c:	a080e826 	beq	r20,r2,1540 <_malloc_r+0x738>
    11a0:	a180a636 	bltu	r20,r6,143c <_malloc_r+0x634>
    11a4:	07000074 	movhi	fp,1
    11a8:	e72bdd04 	addi	fp,fp,-20620
    11ac:	e0800017 	ldw	r2,0(fp)
    11b0:	a887883a 	add	r3,r21,r2
    11b4:	e0c00015 	stw	r3,0(fp)
    11b8:	3500e626 	beq	r6,r20,1554 <_malloc_r+0x74c>
    11bc:	b9000017 	ldw	r4,0(r23)
    11c0:	00bfffc4 	movi	r2,-1
    11c4:	2080ee26 	beq	r4,r2,1580 <_malloc_r+0x778>
    11c8:	a185c83a 	sub	r2,r20,r6
    11cc:	10c5883a 	add	r2,r2,r3
    11d0:	e0800015 	stw	r2,0(fp)
    11d4:	a0c001cc 	andi	r3,r20,7
    11d8:	1800bc26 	beq	r3,zero,14cc <_malloc_r+0x6c4>
    11dc:	a0e9c83a 	sub	r20,r20,r3
    11e0:	00840204 	movi	r2,4104
    11e4:	a5000204 	addi	r20,r20,8
    11e8:	10c7c83a 	sub	r3,r2,r3
    11ec:	a545883a 	add	r2,r20,r21
    11f0:	1083ffcc 	andi	r2,r2,4095
    11f4:	18abc83a 	sub	r21,r3,r2
    11f8:	a80b883a 	mov	r5,r21
    11fc:	9009883a 	mov	r4,r18
    1200:	00020280 	call	2028 <_sbrk_r>
    1204:	00ffffc4 	movi	r3,-1
    1208:	10c0e126 	beq	r2,r3,1590 <_malloc_r+0x788>
    120c:	1505c83a 	sub	r2,r2,r20
    1210:	1545883a 	add	r2,r2,r21
    1214:	10800054 	ori	r2,r2,1
    1218:	e0c00017 	ldw	r3,0(fp)
    121c:	9d000215 	stw	r20,8(r19)
    1220:	a0800115 	stw	r2,4(r20)
    1224:	a8c7883a 	add	r3,r21,r3
    1228:	e0c00015 	stw	r3,0(fp)
    122c:	84c00e26 	beq	r16,r19,1268 <_malloc_r+0x460>
    1230:	018003c4 	movi	r6,15
    1234:	3580a72e 	bgeu	r6,r22,14d4 <_malloc_r+0x6cc>
    1238:	81400117 	ldw	r5,4(r16)
    123c:	013ffe04 	movi	r4,-8
    1240:	b0bffd04 	addi	r2,r22,-12
    1244:	1104703a 	and	r2,r2,r4
    1248:	2900004c 	andi	r4,r5,1
    124c:	2088b03a 	or	r4,r4,r2
    1250:	81000115 	stw	r4,4(r16)
    1254:	01400144 	movi	r5,5
    1258:	8089883a 	add	r4,r16,r2
    125c:	21400115 	stw	r5,4(r4)
    1260:	21400215 	stw	r5,8(r4)
    1264:	3080cd36 	bltu	r6,r2,159c <_malloc_r+0x794>
    1268:	00800074 	movhi	r2,1
    126c:	10abd104 	addi	r2,r2,-20668
    1270:	11000017 	ldw	r4,0(r2)
    1274:	20c0012e 	bgeu	r4,r3,127c <_malloc_r+0x474>
    1278:	10c00015 	stw	r3,0(r2)
    127c:	00800074 	movhi	r2,1
    1280:	10abd004 	addi	r2,r2,-20672
    1284:	11000017 	ldw	r4,0(r2)
    1288:	9c000217 	ldw	r16,8(r19)
    128c:	20c0012e 	bgeu	r4,r3,1294 <_malloc_r+0x48c>
    1290:	10c00015 	stw	r3,0(r2)
    1294:	80c00117 	ldw	r3,4(r16)
    1298:	00bfff04 	movi	r2,-4
    129c:	1886703a 	and	r3,r3,r2
    12a0:	1c45c83a 	sub	r2,r3,r17
    12a4:	1c400236 	bltu	r3,r17,12b0 <_malloc_r+0x4a8>
    12a8:	00c003c4 	movi	r3,15
    12ac:	18800416 	blt	r3,r2,12c0 <_malloc_r+0x4b8>
    12b0:	9009883a 	mov	r4,r18
    12b4:	00036200 	call	3620 <__malloc_unlock>
    12b8:	0005883a 	mov	r2,zero
    12bc:	003f7b06 	br	10ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010ac>
    12c0:	88c00054 	ori	r3,r17,1
    12c4:	80c00115 	stw	r3,4(r16)
    12c8:	8463883a 	add	r17,r16,r17
    12cc:	10800054 	ori	r2,r2,1
    12d0:	9c400215 	stw	r17,8(r19)
    12d4:	88800115 	stw	r2,4(r17)
    12d8:	9009883a 	mov	r4,r18
    12dc:	00036200 	call	3620 <__malloc_unlock>
    12e0:	80800204 	addi	r2,r16,8
    12e4:	003f7106 	br	10ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010ac>
    12e8:	00c00504 	movi	r3,20
    12ec:	18804a2e 	bgeu	r3,r2,1418 <_malloc_r+0x610>
    12f0:	00c01504 	movi	r3,84
    12f4:	18806e36 	bltu	r3,r2,14b0 <_malloc_r+0x6a8>
    12f8:	8804d33a 	srli	r2,r17,12
    12fc:	12001bc4 	addi	r8,r2,111
    1300:	11c01b84 	addi	r7,r2,110
    1304:	4209883a 	add	r4,r8,r8
    1308:	003edd06 	br	e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e80>
    130c:	3804d27a 	srli	r2,r7,9
    1310:	00c00104 	movi	r3,4
    1314:	1880442e 	bgeu	r3,r2,1428 <_malloc_r+0x620>
    1318:	00c00504 	movi	r3,20
    131c:	18808136 	bltu	r3,r2,1524 <_malloc_r+0x71c>
    1320:	11401704 	addi	r5,r2,92
    1324:	10c016c4 	addi	r3,r2,91
    1328:	294b883a 	add	r5,r5,r5
    132c:	294b883a 	add	r5,r5,r5
    1330:	294b883a 	add	r5,r5,r5
    1334:	994b883a 	add	r5,r19,r5
    1338:	28800017 	ldw	r2,0(r5)
    133c:	01800034 	movhi	r6,0
    1340:	297ffe04 	addi	r5,r5,-8
    1344:	319e1d04 	addi	r6,r6,30836
    1348:	28806526 	beq	r5,r2,14e0 <_malloc_r+0x6d8>
    134c:	01bfff04 	movi	r6,-4
    1350:	10c00117 	ldw	r3,4(r2)
    1354:	1986703a 	and	r3,r3,r6
    1358:	38c0022e 	bgeu	r7,r3,1364 <_malloc_r+0x55c>
    135c:	10800217 	ldw	r2,8(r2)
    1360:	28bffb1e 	bne	r5,r2,1350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001350>
    1364:	11400317 	ldw	r5,12(r2)
    1368:	98c00117 	ldw	r3,4(r19)
    136c:	81400315 	stw	r5,12(r16)
    1370:	80800215 	stw	r2,8(r16)
    1374:	2c000215 	stw	r16,8(r5)
    1378:	14000315 	stw	r16,12(r2)
    137c:	003ef806 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    1380:	88c00054 	ori	r3,r17,1
    1384:	80c00115 	stw	r3,4(r16)
    1388:	8463883a 	add	r17,r16,r17
    138c:	34400515 	stw	r17,20(r6)
    1390:	34400415 	stw	r17,16(r6)
    1394:	10c00054 	ori	r3,r2,1
    1398:	8a000315 	stw	r8,12(r17)
    139c:	8a000215 	stw	r8,8(r17)
    13a0:	88c00115 	stw	r3,4(r17)
    13a4:	88a3883a 	add	r17,r17,r2
    13a8:	88800015 	stw	r2,0(r17)
    13ac:	9009883a 	mov	r4,r18
    13b0:	00036200 	call	3620 <__malloc_unlock>
    13b4:	80800204 	addi	r2,r16,8
    13b8:	003f3c06 	br	10ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010ac>
    13bc:	30c00117 	ldw	r3,4(r6)
    13c0:	003ee706 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    13c4:	5ac00044 	addi	r11,r11,1
    13c8:	588000cc 	andi	r2,r11,3
    13cc:	31800204 	addi	r6,r6,8
    13d0:	103efd1e 	bne	r2,zero,fc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fc8>
    13d4:	00002406 	br	1468 <_malloc_r+0x660>
    13d8:	14000317 	ldw	r16,12(r2)
    13dc:	143f251e 	bne	r2,r16,1074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001074>
    13e0:	21000084 	addi	r4,r4,2
    13e4:	003ebc06 	br	ed8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ed8>
    13e8:	8085883a 	add	r2,r16,r2
    13ec:	10c00117 	ldw	r3,4(r2)
    13f0:	81000317 	ldw	r4,12(r16)
    13f4:	81400217 	ldw	r5,8(r16)
    13f8:	18c00054 	ori	r3,r3,1
    13fc:	10c00115 	stw	r3,4(r2)
    1400:	29000315 	stw	r4,12(r5)
    1404:	21400215 	stw	r5,8(r4)
    1408:	9009883a 	mov	r4,r18
    140c:	00036200 	call	3620 <__malloc_unlock>
    1410:	80800204 	addi	r2,r16,8
    1414:	003f2506 	br	10ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010ac>
    1418:	12001704 	addi	r8,r2,92
    141c:	11c016c4 	addi	r7,r2,91
    1420:	4209883a 	add	r4,r8,r8
    1424:	003e9606 	br	e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e80>
    1428:	3804d1ba 	srli	r2,r7,6
    142c:	11400e44 	addi	r5,r2,57
    1430:	10c00e04 	addi	r3,r2,56
    1434:	294b883a 	add	r5,r5,r5
    1438:	003fbc06 	br	132c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700132c>
    143c:	84ff5926 	beq	r16,r19,11a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011a4>
    1440:	00800034 	movhi	r2,0
    1444:	109e1d04 	addi	r2,r2,30836
    1448:	14000217 	ldw	r16,8(r2)
    144c:	00bfff04 	movi	r2,-4
    1450:	80c00117 	ldw	r3,4(r16)
    1454:	1886703a 	and	r3,r3,r2
    1458:	003f9106 	br	12a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012a0>
    145c:	60800217 	ldw	r2,8(r12)
    1460:	213fffc4 	addi	r4,r4,-1
    1464:	1300651e 	bne	r2,r12,15fc <_malloc_r+0x7f4>
    1468:	208000cc 	andi	r2,r4,3
    146c:	633ffe04 	addi	r12,r12,-8
    1470:	103ffa1e 	bne	r2,zero,145c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700145c>
    1474:	98800117 	ldw	r2,4(r19)
    1478:	0146303a 	nor	r3,zero,r5
    147c:	1884703a 	and	r2,r3,r2
    1480:	98800115 	stw	r2,4(r19)
    1484:	294b883a 	add	r5,r5,r5
    1488:	117f2836 	bltu	r2,r5,112c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700112c>
    148c:	283f2726 	beq	r5,zero,112c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700112c>
    1490:	2886703a 	and	r3,r5,r2
    1494:	5809883a 	mov	r4,r11
    1498:	183ec31e 	bne	r3,zero,fa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fa8>
    149c:	294b883a 	add	r5,r5,r5
    14a0:	2886703a 	and	r3,r5,r2
    14a4:	21000104 	addi	r4,r4,4
    14a8:	183ffc26 	beq	r3,zero,149c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700149c>
    14ac:	003ebe06 	br	fa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fa8>
    14b0:	00c05504 	movi	r3,340
    14b4:	18801236 	bltu	r3,r2,1500 <_malloc_r+0x6f8>
    14b8:	8804d3fa 	srli	r2,r17,15
    14bc:	12001e04 	addi	r8,r2,120
    14c0:	11c01dc4 	addi	r7,r2,119
    14c4:	4209883a 	add	r4,r8,r8
    14c8:	003e6d06 	br	e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e80>
    14cc:	00c40004 	movi	r3,4096
    14d0:	003f4606 	br	11ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011ec>
    14d4:	00800044 	movi	r2,1
    14d8:	a0800115 	stw	r2,4(r20)
    14dc:	003f7406 	br	12b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012b0>
    14e0:	1805d0ba 	srai	r2,r3,2
    14e4:	01c00044 	movi	r7,1
    14e8:	30c00117 	ldw	r3,4(r6)
    14ec:	388e983a 	sll	r7,r7,r2
    14f0:	2805883a 	mov	r2,r5
    14f4:	38c6b03a 	or	r3,r7,r3
    14f8:	30c00115 	stw	r3,4(r6)
    14fc:	003f9b06 	br	136c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700136c>
    1500:	00c15504 	movi	r3,1364
    1504:	18801a36 	bltu	r3,r2,1570 <_malloc_r+0x768>
    1508:	8804d4ba 	srli	r2,r17,18
    150c:	12001f44 	addi	r8,r2,125
    1510:	11c01f04 	addi	r7,r2,124
    1514:	4209883a 	add	r4,r8,r8
    1518:	003e5906 	br	e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e80>
    151c:	ad400404 	addi	r21,r21,16
    1520:	003f1706 	br	1180 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001180>
    1524:	00c01504 	movi	r3,84
    1528:	18802336 	bltu	r3,r2,15b8 <_malloc_r+0x7b0>
    152c:	3804d33a 	srli	r2,r7,12
    1530:	11401bc4 	addi	r5,r2,111
    1534:	10c01b84 	addi	r3,r2,110
    1538:	294b883a 	add	r5,r5,r5
    153c:	003f7b06 	br	132c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700132c>
    1540:	9c000217 	ldw	r16,8(r19)
    1544:	00bfff04 	movi	r2,-4
    1548:	80c00117 	ldw	r3,4(r16)
    154c:	1886703a 	and	r3,r3,r2
    1550:	003f5306 	br	12a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012a0>
    1554:	3083ffcc 	andi	r2,r6,4095
    1558:	103f181e 	bne	r2,zero,11bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011bc>
    155c:	99000217 	ldw	r4,8(r19)
    1560:	b545883a 	add	r2,r22,r21
    1564:	10800054 	ori	r2,r2,1
    1568:	20800115 	stw	r2,4(r4)
    156c:	003f3e06 	br	1268 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001268>
    1570:	01003f84 	movi	r4,254
    1574:	02001fc4 	movi	r8,127
    1578:	01c01f84 	movi	r7,126
    157c:	003e4006 	br	e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e80>
    1580:	00800074 	movhi	r2,1
    1584:	10a46604 	addi	r2,r2,-28264
    1588:	15000015 	stw	r20,0(r2)
    158c:	003f1106 	br	11d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011d4>
    1590:	00800044 	movi	r2,1
    1594:	002b883a 	mov	r21,zero
    1598:	003f1f06 	br	1218 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001218>
    159c:	81400204 	addi	r5,r16,8
    15a0:	9009883a 	mov	r4,r18
    15a4:	00028900 	call	2890 <_free_r>
    15a8:	00800074 	movhi	r2,1
    15ac:	10abdd04 	addi	r2,r2,-20620
    15b0:	10c00017 	ldw	r3,0(r2)
    15b4:	003f2c06 	br	1268 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001268>
    15b8:	00c05504 	movi	r3,340
    15bc:	18800536 	bltu	r3,r2,15d4 <_malloc_r+0x7cc>
    15c0:	3804d3fa 	srli	r2,r7,15
    15c4:	11401e04 	addi	r5,r2,120
    15c8:	10c01dc4 	addi	r3,r2,119
    15cc:	294b883a 	add	r5,r5,r5
    15d0:	003f5606 	br	132c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700132c>
    15d4:	00c15504 	movi	r3,1364
    15d8:	18800536 	bltu	r3,r2,15f0 <_malloc_r+0x7e8>
    15dc:	3804d4ba 	srli	r2,r7,18
    15e0:	11401f44 	addi	r5,r2,125
    15e4:	10c01f04 	addi	r3,r2,124
    15e8:	294b883a 	add	r5,r5,r5
    15ec:	003f4f06 	br	132c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700132c>
    15f0:	01403f84 	movi	r5,254
    15f4:	00c01f84 	movi	r3,126
    15f8:	003f4c06 	br	132c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700132c>
    15fc:	98800117 	ldw	r2,4(r19)
    1600:	003fa006 	br	1484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001484>
    1604:	8808d0fa 	srli	r4,r17,3
    1608:	20800044 	addi	r2,r4,1
    160c:	1085883a 	add	r2,r2,r2
    1610:	003e9006 	br	1054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001054>

00001614 <memchr>:
    1614:	208000cc 	andi	r2,r4,3
    1618:	280f883a 	mov	r7,r5
    161c:	10003426 	beq	r2,zero,16f0 <memchr+0xdc>
    1620:	30bfffc4 	addi	r2,r6,-1
    1624:	30001a26 	beq	r6,zero,1690 <memchr+0x7c>
    1628:	20c00003 	ldbu	r3,0(r4)
    162c:	29803fcc 	andi	r6,r5,255
    1630:	30c0051e 	bne	r6,r3,1648 <memchr+0x34>
    1634:	00001806 	br	1698 <memchr+0x84>
    1638:	10001526 	beq	r2,zero,1690 <memchr+0x7c>
    163c:	20c00003 	ldbu	r3,0(r4)
    1640:	10bfffc4 	addi	r2,r2,-1
    1644:	30c01426 	beq	r6,r3,1698 <memchr+0x84>
    1648:	21000044 	addi	r4,r4,1
    164c:	20c000cc 	andi	r3,r4,3
    1650:	183ff91e 	bne	r3,zero,1638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001638>
    1654:	020000c4 	movi	r8,3
    1658:	40801136 	bltu	r8,r2,16a0 <memchr+0x8c>
    165c:	10000c26 	beq	r2,zero,1690 <memchr+0x7c>
    1660:	20c00003 	ldbu	r3,0(r4)
    1664:	29403fcc 	andi	r5,r5,255
    1668:	28c00b26 	beq	r5,r3,1698 <memchr+0x84>
    166c:	20c00044 	addi	r3,r4,1
    1670:	39803fcc 	andi	r6,r7,255
    1674:	2089883a 	add	r4,r4,r2
    1678:	00000306 	br	1688 <memchr+0x74>
    167c:	18c00044 	addi	r3,r3,1
    1680:	197fffc3 	ldbu	r5,-1(r3)
    1684:	31400526 	beq	r6,r5,169c <memchr+0x88>
    1688:	1805883a 	mov	r2,r3
    168c:	20fffb1e 	bne	r4,r3,167c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700167c>
    1690:	0005883a 	mov	r2,zero
    1694:	f800283a 	ret
    1698:	2005883a 	mov	r2,r4
    169c:	f800283a 	ret
    16a0:	28c03fcc 	andi	r3,r5,255
    16a4:	1812923a 	slli	r9,r3,8
    16a8:	02ffbff4 	movhi	r11,65279
    16ac:	02a02074 	movhi	r10,32897
    16b0:	48d2b03a 	or	r9,r9,r3
    16b4:	4806943a 	slli	r3,r9,16
    16b8:	5affbfc4 	addi	r11,r11,-257
    16bc:	52a02004 	addi	r10,r10,-32640
    16c0:	48d2b03a 	or	r9,r9,r3
    16c4:	20c00017 	ldw	r3,0(r4)
    16c8:	48c6f03a 	xor	r3,r9,r3
    16cc:	1acd883a 	add	r6,r3,r11
    16d0:	00c6303a 	nor	r3,zero,r3
    16d4:	30c6703a 	and	r3,r6,r3
    16d8:	1a86703a 	and	r3,r3,r10
    16dc:	183fe01e 	bne	r3,zero,1660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001660>
    16e0:	10bfff04 	addi	r2,r2,-4
    16e4:	21000104 	addi	r4,r4,4
    16e8:	40bff636 	bltu	r8,r2,16c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016c4>
    16ec:	003fdb06 	br	165c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700165c>
    16f0:	3005883a 	mov	r2,r6
    16f4:	003fd706 	br	1654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001654>

000016f8 <memcpy>:
    16f8:	defffd04 	addi	sp,sp,-12
    16fc:	dfc00215 	stw	ra,8(sp)
    1700:	dc400115 	stw	r17,4(sp)
    1704:	dc000015 	stw	r16,0(sp)
    1708:	00c003c4 	movi	r3,15
    170c:	2005883a 	mov	r2,r4
    1710:	1980452e 	bgeu	r3,r6,1828 <memcpy+0x130>
    1714:	2906b03a 	or	r3,r5,r4
    1718:	18c000cc 	andi	r3,r3,3
    171c:	1800441e 	bne	r3,zero,1830 <memcpy+0x138>
    1720:	347ffc04 	addi	r17,r6,-16
    1724:	8822d13a 	srli	r17,r17,4
    1728:	28c00104 	addi	r3,r5,4
    172c:	23400104 	addi	r13,r4,4
    1730:	8820913a 	slli	r16,r17,4
    1734:	2b000204 	addi	r12,r5,8
    1738:	22c00204 	addi	r11,r4,8
    173c:	84000504 	addi	r16,r16,20
    1740:	2a800304 	addi	r10,r5,12
    1744:	22400304 	addi	r9,r4,12
    1748:	2c21883a 	add	r16,r5,r16
    174c:	2811883a 	mov	r8,r5
    1750:	200f883a 	mov	r7,r4
    1754:	41000017 	ldw	r4,0(r8)
    1758:	1fc00017 	ldw	ra,0(r3)
    175c:	63c00017 	ldw	r15,0(r12)
    1760:	39000015 	stw	r4,0(r7)
    1764:	53800017 	ldw	r14,0(r10)
    1768:	6fc00015 	stw	ra,0(r13)
    176c:	5bc00015 	stw	r15,0(r11)
    1770:	4b800015 	stw	r14,0(r9)
    1774:	18c00404 	addi	r3,r3,16
    1778:	39c00404 	addi	r7,r7,16
    177c:	42000404 	addi	r8,r8,16
    1780:	6b400404 	addi	r13,r13,16
    1784:	63000404 	addi	r12,r12,16
    1788:	5ac00404 	addi	r11,r11,16
    178c:	52800404 	addi	r10,r10,16
    1790:	4a400404 	addi	r9,r9,16
    1794:	1c3fef1e 	bne	r3,r16,1754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001754>
    1798:	89c00044 	addi	r7,r17,1
    179c:	380e913a 	slli	r7,r7,4
    17a0:	310003cc 	andi	r4,r6,15
    17a4:	02c000c4 	movi	r11,3
    17a8:	11c7883a 	add	r3,r2,r7
    17ac:	29cb883a 	add	r5,r5,r7
    17b0:	5900212e 	bgeu	r11,r4,1838 <memcpy+0x140>
    17b4:	1813883a 	mov	r9,r3
    17b8:	2811883a 	mov	r8,r5
    17bc:	200f883a 	mov	r7,r4
    17c0:	42800017 	ldw	r10,0(r8)
    17c4:	4a400104 	addi	r9,r9,4
    17c8:	39ffff04 	addi	r7,r7,-4
    17cc:	4abfff15 	stw	r10,-4(r9)
    17d0:	42000104 	addi	r8,r8,4
    17d4:	59fffa36 	bltu	r11,r7,17c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017c0>
    17d8:	213fff04 	addi	r4,r4,-4
    17dc:	2008d0ba 	srli	r4,r4,2
    17e0:	318000cc 	andi	r6,r6,3
    17e4:	21000044 	addi	r4,r4,1
    17e8:	2109883a 	add	r4,r4,r4
    17ec:	2109883a 	add	r4,r4,r4
    17f0:	1907883a 	add	r3,r3,r4
    17f4:	290b883a 	add	r5,r5,r4
    17f8:	30000626 	beq	r6,zero,1814 <memcpy+0x11c>
    17fc:	198d883a 	add	r6,r3,r6
    1800:	29c00003 	ldbu	r7,0(r5)
    1804:	18c00044 	addi	r3,r3,1
    1808:	29400044 	addi	r5,r5,1
    180c:	19ffffc5 	stb	r7,-1(r3)
    1810:	19bffb1e 	bne	r3,r6,1800 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001800>
    1814:	dfc00217 	ldw	ra,8(sp)
    1818:	dc400117 	ldw	r17,4(sp)
    181c:	dc000017 	ldw	r16,0(sp)
    1820:	dec00304 	addi	sp,sp,12
    1824:	f800283a 	ret
    1828:	2007883a 	mov	r3,r4
    182c:	003ff206 	br	17f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017f8>
    1830:	2007883a 	mov	r3,r4
    1834:	003ff106 	br	17fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017fc>
    1838:	200d883a 	mov	r6,r4
    183c:	003fee06 	br	17f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017f8>

00001840 <memmove>:
    1840:	2005883a 	mov	r2,r4
    1844:	29000b2e 	bgeu	r5,r4,1874 <memmove+0x34>
    1848:	298f883a 	add	r7,r5,r6
    184c:	21c0092e 	bgeu	r4,r7,1874 <memmove+0x34>
    1850:	2187883a 	add	r3,r4,r6
    1854:	198bc83a 	sub	r5,r3,r6
    1858:	30004826 	beq	r6,zero,197c <memmove+0x13c>
    185c:	39ffffc4 	addi	r7,r7,-1
    1860:	39000003 	ldbu	r4,0(r7)
    1864:	18ffffc4 	addi	r3,r3,-1
    1868:	19000005 	stb	r4,0(r3)
    186c:	28fffb1e 	bne	r5,r3,185c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700185c>
    1870:	f800283a 	ret
    1874:	00c003c4 	movi	r3,15
    1878:	1980412e 	bgeu	r3,r6,1980 <memmove+0x140>
    187c:	2886b03a 	or	r3,r5,r2
    1880:	18c000cc 	andi	r3,r3,3
    1884:	1800401e 	bne	r3,zero,1988 <memmove+0x148>
    1888:	33fffc04 	addi	r15,r6,-16
    188c:	781ed13a 	srli	r15,r15,4
    1890:	28c00104 	addi	r3,r5,4
    1894:	13400104 	addi	r13,r2,4
    1898:	781c913a 	slli	r14,r15,4
    189c:	2b000204 	addi	r12,r5,8
    18a0:	12c00204 	addi	r11,r2,8
    18a4:	73800504 	addi	r14,r14,20
    18a8:	2a800304 	addi	r10,r5,12
    18ac:	12400304 	addi	r9,r2,12
    18b0:	2b9d883a 	add	r14,r5,r14
    18b4:	2811883a 	mov	r8,r5
    18b8:	100f883a 	mov	r7,r2
    18bc:	41000017 	ldw	r4,0(r8)
    18c0:	39c00404 	addi	r7,r7,16
    18c4:	18c00404 	addi	r3,r3,16
    18c8:	393ffc15 	stw	r4,-16(r7)
    18cc:	193ffc17 	ldw	r4,-16(r3)
    18d0:	6b400404 	addi	r13,r13,16
    18d4:	5ac00404 	addi	r11,r11,16
    18d8:	693ffc15 	stw	r4,-16(r13)
    18dc:	61000017 	ldw	r4,0(r12)
    18e0:	4a400404 	addi	r9,r9,16
    18e4:	42000404 	addi	r8,r8,16
    18e8:	593ffc15 	stw	r4,-16(r11)
    18ec:	51000017 	ldw	r4,0(r10)
    18f0:	63000404 	addi	r12,r12,16
    18f4:	52800404 	addi	r10,r10,16
    18f8:	493ffc15 	stw	r4,-16(r9)
    18fc:	1bbfef1e 	bne	r3,r14,18bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018bc>
    1900:	79000044 	addi	r4,r15,1
    1904:	2008913a 	slli	r4,r4,4
    1908:	328003cc 	andi	r10,r6,15
    190c:	02c000c4 	movi	r11,3
    1910:	1107883a 	add	r3,r2,r4
    1914:	290b883a 	add	r5,r5,r4
    1918:	5a801e2e 	bgeu	r11,r10,1994 <memmove+0x154>
    191c:	1813883a 	mov	r9,r3
    1920:	2811883a 	mov	r8,r5
    1924:	500f883a 	mov	r7,r10
    1928:	41000017 	ldw	r4,0(r8)
    192c:	4a400104 	addi	r9,r9,4
    1930:	39ffff04 	addi	r7,r7,-4
    1934:	493fff15 	stw	r4,-4(r9)
    1938:	42000104 	addi	r8,r8,4
    193c:	59fffa36 	bltu	r11,r7,1928 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001928>
    1940:	513fff04 	addi	r4,r10,-4
    1944:	2008d0ba 	srli	r4,r4,2
    1948:	318000cc 	andi	r6,r6,3
    194c:	21000044 	addi	r4,r4,1
    1950:	2109883a 	add	r4,r4,r4
    1954:	2109883a 	add	r4,r4,r4
    1958:	1907883a 	add	r3,r3,r4
    195c:	290b883a 	add	r5,r5,r4
    1960:	30000b26 	beq	r6,zero,1990 <memmove+0x150>
    1964:	198d883a 	add	r6,r3,r6
    1968:	29c00003 	ldbu	r7,0(r5)
    196c:	18c00044 	addi	r3,r3,1
    1970:	29400044 	addi	r5,r5,1
    1974:	19ffffc5 	stb	r7,-1(r3)
    1978:	19bffb1e 	bne	r3,r6,1968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001968>
    197c:	f800283a 	ret
    1980:	1007883a 	mov	r3,r2
    1984:	003ff606 	br	1960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001960>
    1988:	1007883a 	mov	r3,r2
    198c:	003ff506 	br	1964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001964>
    1990:	f800283a 	ret
    1994:	500d883a 	mov	r6,r10
    1998:	003ff106 	br	1960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001960>

0000199c <memset>:
    199c:	20c000cc 	andi	r3,r4,3
    19a0:	2005883a 	mov	r2,r4
    19a4:	18004426 	beq	r3,zero,1ab8 <memset+0x11c>
    19a8:	31ffffc4 	addi	r7,r6,-1
    19ac:	30004026 	beq	r6,zero,1ab0 <memset+0x114>
    19b0:	2813883a 	mov	r9,r5
    19b4:	200d883a 	mov	r6,r4
    19b8:	2007883a 	mov	r3,r4
    19bc:	00000406 	br	19d0 <memset+0x34>
    19c0:	3a3fffc4 	addi	r8,r7,-1
    19c4:	31800044 	addi	r6,r6,1
    19c8:	38003926 	beq	r7,zero,1ab0 <memset+0x114>
    19cc:	400f883a 	mov	r7,r8
    19d0:	18c00044 	addi	r3,r3,1
    19d4:	32400005 	stb	r9,0(r6)
    19d8:	1a0000cc 	andi	r8,r3,3
    19dc:	403ff81e 	bne	r8,zero,19c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019c0>
    19e0:	010000c4 	movi	r4,3
    19e4:	21c02d2e 	bgeu	r4,r7,1a9c <memset+0x100>
    19e8:	29003fcc 	andi	r4,r5,255
    19ec:	200c923a 	slli	r6,r4,8
    19f0:	3108b03a 	or	r4,r6,r4
    19f4:	200c943a 	slli	r6,r4,16
    19f8:	218cb03a 	or	r6,r4,r6
    19fc:	010003c4 	movi	r4,15
    1a00:	21c0182e 	bgeu	r4,r7,1a64 <memset+0xc8>
    1a04:	3b3ffc04 	addi	r12,r7,-16
    1a08:	6018d13a 	srli	r12,r12,4
    1a0c:	1a000104 	addi	r8,r3,4
    1a10:	1ac00204 	addi	r11,r3,8
    1a14:	6008913a 	slli	r4,r12,4
    1a18:	1a800304 	addi	r10,r3,12
    1a1c:	1813883a 	mov	r9,r3
    1a20:	21000504 	addi	r4,r4,20
    1a24:	1909883a 	add	r4,r3,r4
    1a28:	49800015 	stw	r6,0(r9)
    1a2c:	41800015 	stw	r6,0(r8)
    1a30:	59800015 	stw	r6,0(r11)
    1a34:	51800015 	stw	r6,0(r10)
    1a38:	42000404 	addi	r8,r8,16
    1a3c:	4a400404 	addi	r9,r9,16
    1a40:	5ac00404 	addi	r11,r11,16
    1a44:	52800404 	addi	r10,r10,16
    1a48:	413ff71e 	bne	r8,r4,1a28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a28>
    1a4c:	63000044 	addi	r12,r12,1
    1a50:	6018913a 	slli	r12,r12,4
    1a54:	39c003cc 	andi	r7,r7,15
    1a58:	010000c4 	movi	r4,3
    1a5c:	1b07883a 	add	r3,r3,r12
    1a60:	21c00e2e 	bgeu	r4,r7,1a9c <memset+0x100>
    1a64:	1813883a 	mov	r9,r3
    1a68:	3811883a 	mov	r8,r7
    1a6c:	010000c4 	movi	r4,3
    1a70:	49800015 	stw	r6,0(r9)
    1a74:	423fff04 	addi	r8,r8,-4
    1a78:	4a400104 	addi	r9,r9,4
    1a7c:	223ffc36 	bltu	r4,r8,1a70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a70>
    1a80:	393fff04 	addi	r4,r7,-4
    1a84:	2008d0ba 	srli	r4,r4,2
    1a88:	39c000cc 	andi	r7,r7,3
    1a8c:	21000044 	addi	r4,r4,1
    1a90:	2109883a 	add	r4,r4,r4
    1a94:	2109883a 	add	r4,r4,r4
    1a98:	1907883a 	add	r3,r3,r4
    1a9c:	38000526 	beq	r7,zero,1ab4 <memset+0x118>
    1aa0:	19cf883a 	add	r7,r3,r7
    1aa4:	19400005 	stb	r5,0(r3)
    1aa8:	18c00044 	addi	r3,r3,1
    1aac:	38fffd1e 	bne	r7,r3,1aa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001aa4>
    1ab0:	f800283a 	ret
    1ab4:	f800283a 	ret
    1ab8:	2007883a 	mov	r3,r4
    1abc:	300f883a 	mov	r7,r6
    1ac0:	003fc706 	br	19e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019e0>

00001ac4 <_realloc_r>:
    1ac4:	defff604 	addi	sp,sp,-40
    1ac8:	dc800215 	stw	r18,8(sp)
    1acc:	dfc00915 	stw	ra,36(sp)
    1ad0:	df000815 	stw	fp,32(sp)
    1ad4:	ddc00715 	stw	r23,28(sp)
    1ad8:	dd800615 	stw	r22,24(sp)
    1adc:	dd400515 	stw	r21,20(sp)
    1ae0:	dd000415 	stw	r20,16(sp)
    1ae4:	dcc00315 	stw	r19,12(sp)
    1ae8:	dc400115 	stw	r17,4(sp)
    1aec:	dc000015 	stw	r16,0(sp)
    1af0:	3025883a 	mov	r18,r6
    1af4:	2800b726 	beq	r5,zero,1dd4 <_realloc_r+0x310>
    1af8:	282b883a 	mov	r21,r5
    1afc:	2029883a 	mov	r20,r4
    1b00:	00035fc0 	call	35fc <__malloc_lock>
    1b04:	a8bfff17 	ldw	r2,-4(r21)
    1b08:	043fff04 	movi	r16,-4
    1b0c:	90c002c4 	addi	r3,r18,11
    1b10:	01000584 	movi	r4,22
    1b14:	acfffe04 	addi	r19,r21,-8
    1b18:	1420703a 	and	r16,r2,r16
    1b1c:	20c0332e 	bgeu	r4,r3,1bec <_realloc_r+0x128>
    1b20:	047ffe04 	movi	r17,-8
    1b24:	1c62703a 	and	r17,r3,r17
    1b28:	8807883a 	mov	r3,r17
    1b2c:	88005816 	blt	r17,zero,1c90 <_realloc_r+0x1cc>
    1b30:	8c805736 	bltu	r17,r18,1c90 <_realloc_r+0x1cc>
    1b34:	80c0300e 	bge	r16,r3,1bf8 <_realloc_r+0x134>
    1b38:	07000034 	movhi	fp,0
    1b3c:	e71e1d04 	addi	fp,fp,30836
    1b40:	e1c00217 	ldw	r7,8(fp)
    1b44:	9c09883a 	add	r4,r19,r16
    1b48:	22000117 	ldw	r8,4(r4)
    1b4c:	21c06326 	beq	r4,r7,1cdc <_realloc_r+0x218>
    1b50:	017fff84 	movi	r5,-2
    1b54:	414a703a 	and	r5,r8,r5
    1b58:	214b883a 	add	r5,r4,r5
    1b5c:	29800117 	ldw	r6,4(r5)
    1b60:	3180004c 	andi	r6,r6,1
    1b64:	30003f26 	beq	r6,zero,1c64 <_realloc_r+0x1a0>
    1b68:	1080004c 	andi	r2,r2,1
    1b6c:	10008326 	beq	r2,zero,1d7c <_realloc_r+0x2b8>
    1b70:	900b883a 	mov	r5,r18
    1b74:	a009883a 	mov	r4,r20
    1b78:	0000e080 	call	e08 <_malloc_r>
    1b7c:	1025883a 	mov	r18,r2
    1b80:	10011e26 	beq	r2,zero,1ffc <_realloc_r+0x538>
    1b84:	a93fff17 	ldw	r4,-4(r21)
    1b88:	10fffe04 	addi	r3,r2,-8
    1b8c:	00bfff84 	movi	r2,-2
    1b90:	2084703a 	and	r2,r4,r2
    1b94:	9885883a 	add	r2,r19,r2
    1b98:	1880ee26 	beq	r3,r2,1f54 <_realloc_r+0x490>
    1b9c:	81bfff04 	addi	r6,r16,-4
    1ba0:	00800904 	movi	r2,36
    1ba4:	1180b836 	bltu	r2,r6,1e88 <_realloc_r+0x3c4>
    1ba8:	00c004c4 	movi	r3,19
    1bac:	19809636 	bltu	r3,r6,1e08 <_realloc_r+0x344>
    1bb0:	9005883a 	mov	r2,r18
    1bb4:	a807883a 	mov	r3,r21
    1bb8:	19000017 	ldw	r4,0(r3)
    1bbc:	11000015 	stw	r4,0(r2)
    1bc0:	19000117 	ldw	r4,4(r3)
    1bc4:	11000115 	stw	r4,4(r2)
    1bc8:	18c00217 	ldw	r3,8(r3)
    1bcc:	10c00215 	stw	r3,8(r2)
    1bd0:	a80b883a 	mov	r5,r21
    1bd4:	a009883a 	mov	r4,r20
    1bd8:	00028900 	call	2890 <_free_r>
    1bdc:	a009883a 	mov	r4,r20
    1be0:	00036200 	call	3620 <__malloc_unlock>
    1be4:	9005883a 	mov	r2,r18
    1be8:	00001206 	br	1c34 <_realloc_r+0x170>
    1bec:	00c00404 	movi	r3,16
    1bf0:	1823883a 	mov	r17,r3
    1bf4:	003fce06 	br	1b30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b30>
    1bf8:	a825883a 	mov	r18,r21
    1bfc:	8445c83a 	sub	r2,r16,r17
    1c00:	00c003c4 	movi	r3,15
    1c04:	18802636 	bltu	r3,r2,1ca0 <_realloc_r+0x1dc>
    1c08:	99800117 	ldw	r6,4(r19)
    1c0c:	9c07883a 	add	r3,r19,r16
    1c10:	3180004c 	andi	r6,r6,1
    1c14:	3420b03a 	or	r16,r6,r16
    1c18:	9c000115 	stw	r16,4(r19)
    1c1c:	18800117 	ldw	r2,4(r3)
    1c20:	10800054 	ori	r2,r2,1
    1c24:	18800115 	stw	r2,4(r3)
    1c28:	a009883a 	mov	r4,r20
    1c2c:	00036200 	call	3620 <__malloc_unlock>
    1c30:	9005883a 	mov	r2,r18
    1c34:	dfc00917 	ldw	ra,36(sp)
    1c38:	df000817 	ldw	fp,32(sp)
    1c3c:	ddc00717 	ldw	r23,28(sp)
    1c40:	dd800617 	ldw	r22,24(sp)
    1c44:	dd400517 	ldw	r21,20(sp)
    1c48:	dd000417 	ldw	r20,16(sp)
    1c4c:	dcc00317 	ldw	r19,12(sp)
    1c50:	dc800217 	ldw	r18,8(sp)
    1c54:	dc400117 	ldw	r17,4(sp)
    1c58:	dc000017 	ldw	r16,0(sp)
    1c5c:	dec00a04 	addi	sp,sp,40
    1c60:	f800283a 	ret
    1c64:	017fff04 	movi	r5,-4
    1c68:	414a703a 	and	r5,r8,r5
    1c6c:	814d883a 	add	r6,r16,r5
    1c70:	30c01f16 	blt	r6,r3,1cf0 <_realloc_r+0x22c>
    1c74:	20800317 	ldw	r2,12(r4)
    1c78:	20c00217 	ldw	r3,8(r4)
    1c7c:	a825883a 	mov	r18,r21
    1c80:	3021883a 	mov	r16,r6
    1c84:	18800315 	stw	r2,12(r3)
    1c88:	10c00215 	stw	r3,8(r2)
    1c8c:	003fdb06 	br	1bfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bfc>
    1c90:	00800304 	movi	r2,12
    1c94:	a0800015 	stw	r2,0(r20)
    1c98:	0005883a 	mov	r2,zero
    1c9c:	003fe506 	br	1c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c34>
    1ca0:	98c00117 	ldw	r3,4(r19)
    1ca4:	9c4b883a 	add	r5,r19,r17
    1ca8:	11000054 	ori	r4,r2,1
    1cac:	18c0004c 	andi	r3,r3,1
    1cb0:	1c62b03a 	or	r17,r3,r17
    1cb4:	9c400115 	stw	r17,4(r19)
    1cb8:	29000115 	stw	r4,4(r5)
    1cbc:	2885883a 	add	r2,r5,r2
    1cc0:	10c00117 	ldw	r3,4(r2)
    1cc4:	29400204 	addi	r5,r5,8
    1cc8:	a009883a 	mov	r4,r20
    1ccc:	18c00054 	ori	r3,r3,1
    1cd0:	10c00115 	stw	r3,4(r2)
    1cd4:	00028900 	call	2890 <_free_r>
    1cd8:	003fd306 	br	1c28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c28>
    1cdc:	017fff04 	movi	r5,-4
    1ce0:	414a703a 	and	r5,r8,r5
    1ce4:	89800404 	addi	r6,r17,16
    1ce8:	8151883a 	add	r8,r16,r5
    1cec:	4180590e 	bge	r8,r6,1e54 <_realloc_r+0x390>
    1cf0:	1080004c 	andi	r2,r2,1
    1cf4:	103f9e1e 	bne	r2,zero,1b70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b70>
    1cf8:	adbffe17 	ldw	r22,-8(r21)
    1cfc:	00bfff04 	movi	r2,-4
    1d00:	9dadc83a 	sub	r22,r19,r22
    1d04:	b1800117 	ldw	r6,4(r22)
    1d08:	3084703a 	and	r2,r6,r2
    1d0c:	20002026 	beq	r4,zero,1d90 <_realloc_r+0x2cc>
    1d10:	80af883a 	add	r23,r16,r2
    1d14:	b96f883a 	add	r23,r23,r5
    1d18:	21c05f26 	beq	r4,r7,1e98 <_realloc_r+0x3d4>
    1d1c:	b8c01c16 	blt	r23,r3,1d90 <_realloc_r+0x2cc>
    1d20:	20800317 	ldw	r2,12(r4)
    1d24:	20c00217 	ldw	r3,8(r4)
    1d28:	81bfff04 	addi	r6,r16,-4
    1d2c:	01000904 	movi	r4,36
    1d30:	18800315 	stw	r2,12(r3)
    1d34:	10c00215 	stw	r3,8(r2)
    1d38:	b0c00217 	ldw	r3,8(r22)
    1d3c:	b0800317 	ldw	r2,12(r22)
    1d40:	b4800204 	addi	r18,r22,8
    1d44:	18800315 	stw	r2,12(r3)
    1d48:	10c00215 	stw	r3,8(r2)
    1d4c:	21801b36 	bltu	r4,r6,1dbc <_realloc_r+0x2f8>
    1d50:	008004c4 	movi	r2,19
    1d54:	1180352e 	bgeu	r2,r6,1e2c <_realloc_r+0x368>
    1d58:	a8800017 	ldw	r2,0(r21)
    1d5c:	b0800215 	stw	r2,8(r22)
    1d60:	a8800117 	ldw	r2,4(r21)
    1d64:	b0800315 	stw	r2,12(r22)
    1d68:	008006c4 	movi	r2,27
    1d6c:	11807f36 	bltu	r2,r6,1f6c <_realloc_r+0x4a8>
    1d70:	b0800404 	addi	r2,r22,16
    1d74:	ad400204 	addi	r21,r21,8
    1d78:	00002d06 	br	1e30 <_realloc_r+0x36c>
    1d7c:	adbffe17 	ldw	r22,-8(r21)
    1d80:	00bfff04 	movi	r2,-4
    1d84:	9dadc83a 	sub	r22,r19,r22
    1d88:	b1000117 	ldw	r4,4(r22)
    1d8c:	2084703a 	and	r2,r4,r2
    1d90:	b03f7726 	beq	r22,zero,1b70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b70>
    1d94:	80af883a 	add	r23,r16,r2
    1d98:	b8ff7516 	blt	r23,r3,1b70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b70>
    1d9c:	b0800317 	ldw	r2,12(r22)
    1da0:	b0c00217 	ldw	r3,8(r22)
    1da4:	81bfff04 	addi	r6,r16,-4
    1da8:	01000904 	movi	r4,36
    1dac:	18800315 	stw	r2,12(r3)
    1db0:	10c00215 	stw	r3,8(r2)
    1db4:	b4800204 	addi	r18,r22,8
    1db8:	21bfe52e 	bgeu	r4,r6,1d50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d50>
    1dbc:	a80b883a 	mov	r5,r21
    1dc0:	9009883a 	mov	r4,r18
    1dc4:	00018400 	call	1840 <memmove>
    1dc8:	b821883a 	mov	r16,r23
    1dcc:	b027883a 	mov	r19,r22
    1dd0:	003f8a06 	br	1bfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bfc>
    1dd4:	300b883a 	mov	r5,r6
    1dd8:	dfc00917 	ldw	ra,36(sp)
    1ddc:	df000817 	ldw	fp,32(sp)
    1de0:	ddc00717 	ldw	r23,28(sp)
    1de4:	dd800617 	ldw	r22,24(sp)
    1de8:	dd400517 	ldw	r21,20(sp)
    1dec:	dd000417 	ldw	r20,16(sp)
    1df0:	dcc00317 	ldw	r19,12(sp)
    1df4:	dc800217 	ldw	r18,8(sp)
    1df8:	dc400117 	ldw	r17,4(sp)
    1dfc:	dc000017 	ldw	r16,0(sp)
    1e00:	dec00a04 	addi	sp,sp,40
    1e04:	0000e081 	jmpi	e08 <_malloc_r>
    1e08:	a8c00017 	ldw	r3,0(r21)
    1e0c:	90c00015 	stw	r3,0(r18)
    1e10:	a8c00117 	ldw	r3,4(r21)
    1e14:	90c00115 	stw	r3,4(r18)
    1e18:	00c006c4 	movi	r3,27
    1e1c:	19804536 	bltu	r3,r6,1f34 <_realloc_r+0x470>
    1e20:	90800204 	addi	r2,r18,8
    1e24:	a8c00204 	addi	r3,r21,8
    1e28:	003f6306 	br	1bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bb8>
    1e2c:	9005883a 	mov	r2,r18
    1e30:	a8c00017 	ldw	r3,0(r21)
    1e34:	b821883a 	mov	r16,r23
    1e38:	b027883a 	mov	r19,r22
    1e3c:	10c00015 	stw	r3,0(r2)
    1e40:	a8c00117 	ldw	r3,4(r21)
    1e44:	10c00115 	stw	r3,4(r2)
    1e48:	a8c00217 	ldw	r3,8(r21)
    1e4c:	10c00215 	stw	r3,8(r2)
    1e50:	003f6a06 	br	1bfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bfc>
    1e54:	9c67883a 	add	r19,r19,r17
    1e58:	4445c83a 	sub	r2,r8,r17
    1e5c:	e4c00215 	stw	r19,8(fp)
    1e60:	10800054 	ori	r2,r2,1
    1e64:	98800115 	stw	r2,4(r19)
    1e68:	a8bfff17 	ldw	r2,-4(r21)
    1e6c:	a009883a 	mov	r4,r20
    1e70:	1080004c 	andi	r2,r2,1
    1e74:	1462b03a 	or	r17,r2,r17
    1e78:	ac7fff15 	stw	r17,-4(r21)
    1e7c:	00036200 	call	3620 <__malloc_unlock>
    1e80:	a805883a 	mov	r2,r21
    1e84:	003f6b06 	br	1c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c34>
    1e88:	a80b883a 	mov	r5,r21
    1e8c:	9009883a 	mov	r4,r18
    1e90:	00018400 	call	1840 <memmove>
    1e94:	003f4e06 	br	1bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bd0>
    1e98:	89000404 	addi	r4,r17,16
    1e9c:	b93fbc16 	blt	r23,r4,1d90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d90>
    1ea0:	b0800317 	ldw	r2,12(r22)
    1ea4:	b0c00217 	ldw	r3,8(r22)
    1ea8:	81bfff04 	addi	r6,r16,-4
    1eac:	01000904 	movi	r4,36
    1eb0:	18800315 	stw	r2,12(r3)
    1eb4:	10c00215 	stw	r3,8(r2)
    1eb8:	b4800204 	addi	r18,r22,8
    1ebc:	21804336 	bltu	r4,r6,1fcc <_realloc_r+0x508>
    1ec0:	008004c4 	movi	r2,19
    1ec4:	11803f2e 	bgeu	r2,r6,1fc4 <_realloc_r+0x500>
    1ec8:	a8800017 	ldw	r2,0(r21)
    1ecc:	b0800215 	stw	r2,8(r22)
    1ed0:	a8800117 	ldw	r2,4(r21)
    1ed4:	b0800315 	stw	r2,12(r22)
    1ed8:	008006c4 	movi	r2,27
    1edc:	11803f36 	bltu	r2,r6,1fdc <_realloc_r+0x518>
    1ee0:	b0800404 	addi	r2,r22,16
    1ee4:	ad400204 	addi	r21,r21,8
    1ee8:	a8c00017 	ldw	r3,0(r21)
    1eec:	10c00015 	stw	r3,0(r2)
    1ef0:	a8c00117 	ldw	r3,4(r21)
    1ef4:	10c00115 	stw	r3,4(r2)
    1ef8:	a8c00217 	ldw	r3,8(r21)
    1efc:	10c00215 	stw	r3,8(r2)
    1f00:	b447883a 	add	r3,r22,r17
    1f04:	bc45c83a 	sub	r2,r23,r17
    1f08:	e0c00215 	stw	r3,8(fp)
    1f0c:	10800054 	ori	r2,r2,1
    1f10:	18800115 	stw	r2,4(r3)
    1f14:	b0800117 	ldw	r2,4(r22)
    1f18:	a009883a 	mov	r4,r20
    1f1c:	1080004c 	andi	r2,r2,1
    1f20:	1462b03a 	or	r17,r2,r17
    1f24:	b4400115 	stw	r17,4(r22)
    1f28:	00036200 	call	3620 <__malloc_unlock>
    1f2c:	9005883a 	mov	r2,r18
    1f30:	003f4006 	br	1c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c34>
    1f34:	a8c00217 	ldw	r3,8(r21)
    1f38:	90c00215 	stw	r3,8(r18)
    1f3c:	a8c00317 	ldw	r3,12(r21)
    1f40:	90c00315 	stw	r3,12(r18)
    1f44:	30801126 	beq	r6,r2,1f8c <_realloc_r+0x4c8>
    1f48:	90800404 	addi	r2,r18,16
    1f4c:	a8c00404 	addi	r3,r21,16
    1f50:	003f1906 	br	1bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bb8>
    1f54:	90ffff17 	ldw	r3,-4(r18)
    1f58:	00bfff04 	movi	r2,-4
    1f5c:	a825883a 	mov	r18,r21
    1f60:	1884703a 	and	r2,r3,r2
    1f64:	80a1883a 	add	r16,r16,r2
    1f68:	003f2406 	br	1bfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bfc>
    1f6c:	a8800217 	ldw	r2,8(r21)
    1f70:	b0800415 	stw	r2,16(r22)
    1f74:	a8800317 	ldw	r2,12(r21)
    1f78:	b0800515 	stw	r2,20(r22)
    1f7c:	31000a26 	beq	r6,r4,1fa8 <_realloc_r+0x4e4>
    1f80:	b0800604 	addi	r2,r22,24
    1f84:	ad400404 	addi	r21,r21,16
    1f88:	003fa906 	br	1e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e30>
    1f8c:	a9000417 	ldw	r4,16(r21)
    1f90:	90800604 	addi	r2,r18,24
    1f94:	a8c00604 	addi	r3,r21,24
    1f98:	91000415 	stw	r4,16(r18)
    1f9c:	a9000517 	ldw	r4,20(r21)
    1fa0:	91000515 	stw	r4,20(r18)
    1fa4:	003f0406 	br	1bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bb8>
    1fa8:	a8c00417 	ldw	r3,16(r21)
    1fac:	ad400604 	addi	r21,r21,24
    1fb0:	b0800804 	addi	r2,r22,32
    1fb4:	b0c00615 	stw	r3,24(r22)
    1fb8:	a8ffff17 	ldw	r3,-4(r21)
    1fbc:	b0c00715 	stw	r3,28(r22)
    1fc0:	003f9b06 	br	1e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e30>
    1fc4:	9005883a 	mov	r2,r18
    1fc8:	003fc706 	br	1ee8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ee8>
    1fcc:	a80b883a 	mov	r5,r21
    1fd0:	9009883a 	mov	r4,r18
    1fd4:	00018400 	call	1840 <memmove>
    1fd8:	003fc906 	br	1f00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f00>
    1fdc:	a8800217 	ldw	r2,8(r21)
    1fe0:	b0800415 	stw	r2,16(r22)
    1fe4:	a8800317 	ldw	r2,12(r21)
    1fe8:	b0800515 	stw	r2,20(r22)
    1fec:	31000726 	beq	r6,r4,200c <_realloc_r+0x548>
    1ff0:	b0800604 	addi	r2,r22,24
    1ff4:	ad400404 	addi	r21,r21,16
    1ff8:	003fbb06 	br	1ee8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ee8>
    1ffc:	a009883a 	mov	r4,r20
    2000:	00036200 	call	3620 <__malloc_unlock>
    2004:	0005883a 	mov	r2,zero
    2008:	003f0a06 	br	1c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c34>
    200c:	a8c00417 	ldw	r3,16(r21)
    2010:	ad400604 	addi	r21,r21,24
    2014:	b0800804 	addi	r2,r22,32
    2018:	b0c00615 	stw	r3,24(r22)
    201c:	a8ffff17 	ldw	r3,-4(r21)
    2020:	b0c00715 	stw	r3,28(r22)
    2024:	003fb006 	br	1ee8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ee8>

00002028 <_sbrk_r>:
    2028:	defffd04 	addi	sp,sp,-12
    202c:	dc000015 	stw	r16,0(sp)
    2030:	04000074 	movhi	r16,1
    2034:	dc400115 	stw	r17,4(sp)
    2038:	842bd304 	addi	r16,r16,-20660
    203c:	2023883a 	mov	r17,r4
    2040:	2809883a 	mov	r4,r5
    2044:	dfc00215 	stw	ra,8(sp)
    2048:	80000015 	stw	zero,0(r16)
    204c:	00037e00 	call	37e0 <sbrk>
    2050:	00ffffc4 	movi	r3,-1
    2054:	10c00526 	beq	r2,r3,206c <_sbrk_r+0x44>
    2058:	dfc00217 	ldw	ra,8(sp)
    205c:	dc400117 	ldw	r17,4(sp)
    2060:	dc000017 	ldw	r16,0(sp)
    2064:	dec00304 	addi	sp,sp,12
    2068:	f800283a 	ret
    206c:	80c00017 	ldw	r3,0(r16)
    2070:	183ff926 	beq	r3,zero,2058 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002058>
    2074:	88c00015 	stw	r3,0(r17)
    2078:	003ff706 	br	2058 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002058>

0000207c <__sread>:
    207c:	defffe04 	addi	sp,sp,-8
    2080:	dc000015 	stw	r16,0(sp)
    2084:	2821883a 	mov	r16,r5
    2088:	2940038f 	ldh	r5,14(r5)
    208c:	dfc00115 	stw	ra,4(sp)
    2090:	0002dbc0 	call	2dbc <_read_r>
    2094:	10000716 	blt	r2,zero,20b4 <__sread+0x38>
    2098:	80c01417 	ldw	r3,80(r16)
    209c:	1887883a 	add	r3,r3,r2
    20a0:	80c01415 	stw	r3,80(r16)
    20a4:	dfc00117 	ldw	ra,4(sp)
    20a8:	dc000017 	ldw	r16,0(sp)
    20ac:	dec00204 	addi	sp,sp,8
    20b0:	f800283a 	ret
    20b4:	80c0030b 	ldhu	r3,12(r16)
    20b8:	18fbffcc 	andi	r3,r3,61439
    20bc:	80c0030d 	sth	r3,12(r16)
    20c0:	dfc00117 	ldw	ra,4(sp)
    20c4:	dc000017 	ldw	r16,0(sp)
    20c8:	dec00204 	addi	sp,sp,8
    20cc:	f800283a 	ret

000020d0 <__seofread>:
    20d0:	0005883a 	mov	r2,zero
    20d4:	f800283a 	ret

000020d8 <__swrite>:
    20d8:	2880030b 	ldhu	r2,12(r5)
    20dc:	defffb04 	addi	sp,sp,-20
    20e0:	dcc00315 	stw	r19,12(sp)
    20e4:	dc800215 	stw	r18,8(sp)
    20e8:	dc400115 	stw	r17,4(sp)
    20ec:	dc000015 	stw	r16,0(sp)
    20f0:	dfc00415 	stw	ra,16(sp)
    20f4:	10c0400c 	andi	r3,r2,256
    20f8:	2821883a 	mov	r16,r5
    20fc:	2023883a 	mov	r17,r4
    2100:	3025883a 	mov	r18,r6
    2104:	3827883a 	mov	r19,r7
    2108:	18000526 	beq	r3,zero,2120 <__swrite+0x48>
    210c:	2940038f 	ldh	r5,14(r5)
    2110:	01c00084 	movi	r7,2
    2114:	000d883a 	mov	r6,zero
    2118:	0002ba00 	call	2ba0 <_lseek_r>
    211c:	8080030b 	ldhu	r2,12(r16)
    2120:	8140038f 	ldh	r5,14(r16)
    2124:	10bbffcc 	andi	r2,r2,61439
    2128:	980f883a 	mov	r7,r19
    212c:	900d883a 	mov	r6,r18
    2130:	8809883a 	mov	r4,r17
    2134:	8080030d 	sth	r2,12(r16)
    2138:	dfc00417 	ldw	ra,16(sp)
    213c:	dcc00317 	ldw	r19,12(sp)
    2140:	dc800217 	ldw	r18,8(sp)
    2144:	dc400117 	ldw	r17,4(sp)
    2148:	dc000017 	ldw	r16,0(sp)
    214c:	dec00504 	addi	sp,sp,20
    2150:	00021b81 	jmpi	21b8 <_write_r>

00002154 <__sseek>:
    2154:	defffe04 	addi	sp,sp,-8
    2158:	dc000015 	stw	r16,0(sp)
    215c:	2821883a 	mov	r16,r5
    2160:	2940038f 	ldh	r5,14(r5)
    2164:	dfc00115 	stw	ra,4(sp)
    2168:	0002ba00 	call	2ba0 <_lseek_r>
    216c:	00ffffc4 	movi	r3,-1
    2170:	10c00826 	beq	r2,r3,2194 <__sseek+0x40>
    2174:	80c0030b 	ldhu	r3,12(r16)
    2178:	80801415 	stw	r2,80(r16)
    217c:	18c40014 	ori	r3,r3,4096
    2180:	80c0030d 	sth	r3,12(r16)
    2184:	dfc00117 	ldw	ra,4(sp)
    2188:	dc000017 	ldw	r16,0(sp)
    218c:	dec00204 	addi	sp,sp,8
    2190:	f800283a 	ret
    2194:	80c0030b 	ldhu	r3,12(r16)
    2198:	18fbffcc 	andi	r3,r3,61439
    219c:	80c0030d 	sth	r3,12(r16)
    21a0:	dfc00117 	ldw	ra,4(sp)
    21a4:	dc000017 	ldw	r16,0(sp)
    21a8:	dec00204 	addi	sp,sp,8
    21ac:	f800283a 	ret

000021b0 <__sclose>:
    21b0:	2940038f 	ldh	r5,14(r5)
    21b4:	000236c1 	jmpi	236c <_close_r>

000021b8 <_write_r>:
    21b8:	defffd04 	addi	sp,sp,-12
    21bc:	2805883a 	mov	r2,r5
    21c0:	dc000015 	stw	r16,0(sp)
    21c4:	04000074 	movhi	r16,1
    21c8:	dc400115 	stw	r17,4(sp)
    21cc:	300b883a 	mov	r5,r6
    21d0:	842bd304 	addi	r16,r16,-20660
    21d4:	2023883a 	mov	r17,r4
    21d8:	380d883a 	mov	r6,r7
    21dc:	1009883a 	mov	r4,r2
    21e0:	dfc00215 	stw	ra,8(sp)
    21e4:	80000015 	stw	zero,0(r16)
    21e8:	00038cc0 	call	38cc <write>
    21ec:	00ffffc4 	movi	r3,-1
    21f0:	10c00526 	beq	r2,r3,2208 <_write_r+0x50>
    21f4:	dfc00217 	ldw	ra,8(sp)
    21f8:	dc400117 	ldw	r17,4(sp)
    21fc:	dc000017 	ldw	r16,0(sp)
    2200:	dec00304 	addi	sp,sp,12
    2204:	f800283a 	ret
    2208:	80c00017 	ldw	r3,0(r16)
    220c:	183ff926 	beq	r3,zero,21f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021f4>
    2210:	88c00015 	stw	r3,0(r17)
    2214:	003ff706 	br	21f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021f4>

00002218 <__swsetup_r>:
    2218:	00800074 	movhi	r2,1
    221c:	defffd04 	addi	sp,sp,-12
    2220:	10a46504 	addi	r2,r2,-28268
    2224:	dc400115 	stw	r17,4(sp)
    2228:	2023883a 	mov	r17,r4
    222c:	11000017 	ldw	r4,0(r2)
    2230:	dc000015 	stw	r16,0(sp)
    2234:	dfc00215 	stw	ra,8(sp)
    2238:	2821883a 	mov	r16,r5
    223c:	20000226 	beq	r4,zero,2248 <__swsetup_r+0x30>
    2240:	20800e17 	ldw	r2,56(r4)
    2244:	10003126 	beq	r2,zero,230c <__swsetup_r+0xf4>
    2248:	8080030b 	ldhu	r2,12(r16)
    224c:	10c0020c 	andi	r3,r2,8
    2250:	1009883a 	mov	r4,r2
    2254:	18000f26 	beq	r3,zero,2294 <__swsetup_r+0x7c>
    2258:	80c00417 	ldw	r3,16(r16)
    225c:	18001526 	beq	r3,zero,22b4 <__swsetup_r+0x9c>
    2260:	1100004c 	andi	r4,r2,1
    2264:	20001c1e 	bne	r4,zero,22d8 <__swsetup_r+0xc0>
    2268:	1080008c 	andi	r2,r2,2
    226c:	1000291e 	bne	r2,zero,2314 <__swsetup_r+0xfc>
    2270:	80800517 	ldw	r2,20(r16)
    2274:	80800215 	stw	r2,8(r16)
    2278:	18001c26 	beq	r3,zero,22ec <__swsetup_r+0xd4>
    227c:	0005883a 	mov	r2,zero
    2280:	dfc00217 	ldw	ra,8(sp)
    2284:	dc400117 	ldw	r17,4(sp)
    2288:	dc000017 	ldw	r16,0(sp)
    228c:	dec00304 	addi	sp,sp,12
    2290:	f800283a 	ret
    2294:	2080040c 	andi	r2,r4,16
    2298:	10002e26 	beq	r2,zero,2354 <__swsetup_r+0x13c>
    229c:	2080010c 	andi	r2,r4,4
    22a0:	10001e1e 	bne	r2,zero,231c <__swsetup_r+0x104>
    22a4:	80c00417 	ldw	r3,16(r16)
    22a8:	20800214 	ori	r2,r4,8
    22ac:	8080030d 	sth	r2,12(r16)
    22b0:	183feb1e 	bne	r3,zero,2260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002260>
    22b4:	1100a00c 	andi	r4,r2,640
    22b8:	01408004 	movi	r5,512
    22bc:	217fe826 	beq	r4,r5,2260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002260>
    22c0:	800b883a 	mov	r5,r16
    22c4:	8809883a 	mov	r4,r17
    22c8:	0002c000 	call	2c00 <__smakebuf_r>
    22cc:	8080030b 	ldhu	r2,12(r16)
    22d0:	80c00417 	ldw	r3,16(r16)
    22d4:	003fe206 	br	2260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002260>
    22d8:	80800517 	ldw	r2,20(r16)
    22dc:	80000215 	stw	zero,8(r16)
    22e0:	0085c83a 	sub	r2,zero,r2
    22e4:	80800615 	stw	r2,24(r16)
    22e8:	183fe41e 	bne	r3,zero,227c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700227c>
    22ec:	80c0030b 	ldhu	r3,12(r16)
    22f0:	0005883a 	mov	r2,zero
    22f4:	1900200c 	andi	r4,r3,128
    22f8:	203fe126 	beq	r4,zero,2280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002280>
    22fc:	18c01014 	ori	r3,r3,64
    2300:	80c0030d 	sth	r3,12(r16)
    2304:	00bfffc4 	movi	r2,-1
    2308:	003fdd06 	br	2280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002280>
    230c:	00007740 	call	774 <__sinit>
    2310:	003fcd06 	br	2248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002248>
    2314:	0005883a 	mov	r2,zero
    2318:	003fd606 	br	2274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002274>
    231c:	81400c17 	ldw	r5,48(r16)
    2320:	28000626 	beq	r5,zero,233c <__swsetup_r+0x124>
    2324:	80801004 	addi	r2,r16,64
    2328:	28800326 	beq	r5,r2,2338 <__swsetup_r+0x120>
    232c:	8809883a 	mov	r4,r17
    2330:	00028900 	call	2890 <_free_r>
    2334:	8100030b 	ldhu	r4,12(r16)
    2338:	80000c15 	stw	zero,48(r16)
    233c:	80c00417 	ldw	r3,16(r16)
    2340:	00bff6c4 	movi	r2,-37
    2344:	1108703a 	and	r4,r2,r4
    2348:	80000115 	stw	zero,4(r16)
    234c:	80c00015 	stw	r3,0(r16)
    2350:	003fd506 	br	22a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022a8>
    2354:	00800244 	movi	r2,9
    2358:	88800015 	stw	r2,0(r17)
    235c:	20801014 	ori	r2,r4,64
    2360:	8080030d 	sth	r2,12(r16)
    2364:	00bfffc4 	movi	r2,-1
    2368:	003fc506 	br	2280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002280>

0000236c <_close_r>:
    236c:	defffd04 	addi	sp,sp,-12
    2370:	dc000015 	stw	r16,0(sp)
    2374:	04000074 	movhi	r16,1
    2378:	dc400115 	stw	r17,4(sp)
    237c:	842bd304 	addi	r16,r16,-20660
    2380:	2023883a 	mov	r17,r4
    2384:	2809883a 	mov	r4,r5
    2388:	dfc00215 	stw	ra,8(sp)
    238c:	80000015 	stw	zero,0(r16)
    2390:	00030bc0 	call	30bc <close>
    2394:	00ffffc4 	movi	r3,-1
    2398:	10c00526 	beq	r2,r3,23b0 <_close_r+0x44>
    239c:	dfc00217 	ldw	ra,8(sp)
    23a0:	dc400117 	ldw	r17,4(sp)
    23a4:	dc000017 	ldw	r16,0(sp)
    23a8:	dec00304 	addi	sp,sp,12
    23ac:	f800283a 	ret
    23b0:	80c00017 	ldw	r3,0(r16)
    23b4:	183ff926 	beq	r3,zero,239c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700239c>
    23b8:	88c00015 	stw	r3,0(r17)
    23bc:	003ff706 	br	239c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700239c>

000023c0 <_fclose_r>:
    23c0:	28003926 	beq	r5,zero,24a8 <_fclose_r+0xe8>
    23c4:	defffc04 	addi	sp,sp,-16
    23c8:	dc400115 	stw	r17,4(sp)
    23cc:	dc000015 	stw	r16,0(sp)
    23d0:	dfc00315 	stw	ra,12(sp)
    23d4:	dc800215 	stw	r18,8(sp)
    23d8:	2023883a 	mov	r17,r4
    23dc:	2821883a 	mov	r16,r5
    23e0:	20000226 	beq	r4,zero,23ec <_fclose_r+0x2c>
    23e4:	20800e17 	ldw	r2,56(r4)
    23e8:	10002726 	beq	r2,zero,2488 <_fclose_r+0xc8>
    23ec:	8080030f 	ldh	r2,12(r16)
    23f0:	1000071e 	bne	r2,zero,2410 <_fclose_r+0x50>
    23f4:	0005883a 	mov	r2,zero
    23f8:	dfc00317 	ldw	ra,12(sp)
    23fc:	dc800217 	ldw	r18,8(sp)
    2400:	dc400117 	ldw	r17,4(sp)
    2404:	dc000017 	ldw	r16,0(sp)
    2408:	dec00404 	addi	sp,sp,16
    240c:	f800283a 	ret
    2410:	800b883a 	mov	r5,r16
    2414:	8809883a 	mov	r4,r17
    2418:	00024c40 	call	24c4 <__sflush_r>
    241c:	1025883a 	mov	r18,r2
    2420:	80800b17 	ldw	r2,44(r16)
    2424:	10000426 	beq	r2,zero,2438 <_fclose_r+0x78>
    2428:	81400717 	ldw	r5,28(r16)
    242c:	8809883a 	mov	r4,r17
    2430:	103ee83a 	callr	r2
    2434:	10001616 	blt	r2,zero,2490 <_fclose_r+0xd0>
    2438:	8080030b 	ldhu	r2,12(r16)
    243c:	1080200c 	andi	r2,r2,128
    2440:	1000151e 	bne	r2,zero,2498 <_fclose_r+0xd8>
    2444:	81400c17 	ldw	r5,48(r16)
    2448:	28000526 	beq	r5,zero,2460 <_fclose_r+0xa0>
    244c:	80801004 	addi	r2,r16,64
    2450:	28800226 	beq	r5,r2,245c <_fclose_r+0x9c>
    2454:	8809883a 	mov	r4,r17
    2458:	00028900 	call	2890 <_free_r>
    245c:	80000c15 	stw	zero,48(r16)
    2460:	81401117 	ldw	r5,68(r16)
    2464:	28000326 	beq	r5,zero,2474 <_fclose_r+0xb4>
    2468:	8809883a 	mov	r4,r17
    246c:	00028900 	call	2890 <_free_r>
    2470:	80001115 	stw	zero,68(r16)
    2474:	00007840 	call	784 <__sfp_lock_acquire>
    2478:	8000030d 	sth	zero,12(r16)
    247c:	00007880 	call	788 <__sfp_lock_release>
    2480:	9005883a 	mov	r2,r18
    2484:	003fdc06 	br	23f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023f8>
    2488:	00007740 	call	774 <__sinit>
    248c:	003fd706 	br	23ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023ec>
    2490:	04bfffc4 	movi	r18,-1
    2494:	003fe806 	br	2438 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002438>
    2498:	81400417 	ldw	r5,16(r16)
    249c:	8809883a 	mov	r4,r17
    24a0:	00028900 	call	2890 <_free_r>
    24a4:	003fe706 	br	2444 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002444>
    24a8:	0005883a 	mov	r2,zero
    24ac:	f800283a 	ret

000024b0 <fclose>:
    24b0:	00800074 	movhi	r2,1
    24b4:	10a46504 	addi	r2,r2,-28268
    24b8:	200b883a 	mov	r5,r4
    24bc:	11000017 	ldw	r4,0(r2)
    24c0:	00023c01 	jmpi	23c0 <_fclose_r>

000024c4 <__sflush_r>:
    24c4:	2880030b 	ldhu	r2,12(r5)
    24c8:	defffb04 	addi	sp,sp,-20
    24cc:	dcc00315 	stw	r19,12(sp)
    24d0:	dc400115 	stw	r17,4(sp)
    24d4:	dfc00415 	stw	ra,16(sp)
    24d8:	dc800215 	stw	r18,8(sp)
    24dc:	dc000015 	stw	r16,0(sp)
    24e0:	10c0020c 	andi	r3,r2,8
    24e4:	2823883a 	mov	r17,r5
    24e8:	2027883a 	mov	r19,r4
    24ec:	1800311e 	bne	r3,zero,25b4 <__sflush_r+0xf0>
    24f0:	28c00117 	ldw	r3,4(r5)
    24f4:	10820014 	ori	r2,r2,2048
    24f8:	2880030d 	sth	r2,12(r5)
    24fc:	00c04b0e 	bge	zero,r3,262c <__sflush_r+0x168>
    2500:	8a000a17 	ldw	r8,40(r17)
    2504:	40002326 	beq	r8,zero,2594 <__sflush_r+0xd0>
    2508:	9c000017 	ldw	r16,0(r19)
    250c:	10c4000c 	andi	r3,r2,4096
    2510:	98000015 	stw	zero,0(r19)
    2514:	18004826 	beq	r3,zero,2638 <__sflush_r+0x174>
    2518:	89801417 	ldw	r6,80(r17)
    251c:	10c0010c 	andi	r3,r2,4
    2520:	18000626 	beq	r3,zero,253c <__sflush_r+0x78>
    2524:	88c00117 	ldw	r3,4(r17)
    2528:	88800c17 	ldw	r2,48(r17)
    252c:	30cdc83a 	sub	r6,r6,r3
    2530:	10000226 	beq	r2,zero,253c <__sflush_r+0x78>
    2534:	88800f17 	ldw	r2,60(r17)
    2538:	308dc83a 	sub	r6,r6,r2
    253c:	89400717 	ldw	r5,28(r17)
    2540:	000f883a 	mov	r7,zero
    2544:	9809883a 	mov	r4,r19
    2548:	403ee83a 	callr	r8
    254c:	00ffffc4 	movi	r3,-1
    2550:	10c04426 	beq	r2,r3,2664 <__sflush_r+0x1a0>
    2554:	88c0030b 	ldhu	r3,12(r17)
    2558:	89000417 	ldw	r4,16(r17)
    255c:	88000115 	stw	zero,4(r17)
    2560:	197dffcc 	andi	r5,r3,63487
    2564:	8940030d 	sth	r5,12(r17)
    2568:	89000015 	stw	r4,0(r17)
    256c:	18c4000c 	andi	r3,r3,4096
    2570:	18002c1e 	bne	r3,zero,2624 <__sflush_r+0x160>
    2574:	89400c17 	ldw	r5,48(r17)
    2578:	9c000015 	stw	r16,0(r19)
    257c:	28000526 	beq	r5,zero,2594 <__sflush_r+0xd0>
    2580:	88801004 	addi	r2,r17,64
    2584:	28800226 	beq	r5,r2,2590 <__sflush_r+0xcc>
    2588:	9809883a 	mov	r4,r19
    258c:	00028900 	call	2890 <_free_r>
    2590:	88000c15 	stw	zero,48(r17)
    2594:	0005883a 	mov	r2,zero
    2598:	dfc00417 	ldw	ra,16(sp)
    259c:	dcc00317 	ldw	r19,12(sp)
    25a0:	dc800217 	ldw	r18,8(sp)
    25a4:	dc400117 	ldw	r17,4(sp)
    25a8:	dc000017 	ldw	r16,0(sp)
    25ac:	dec00504 	addi	sp,sp,20
    25b0:	f800283a 	ret
    25b4:	2c800417 	ldw	r18,16(r5)
    25b8:	903ff626 	beq	r18,zero,2594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002594>
    25bc:	2c000017 	ldw	r16,0(r5)
    25c0:	108000cc 	andi	r2,r2,3
    25c4:	2c800015 	stw	r18,0(r5)
    25c8:	84a1c83a 	sub	r16,r16,r18
    25cc:	1000131e 	bne	r2,zero,261c <__sflush_r+0x158>
    25d0:	28800517 	ldw	r2,20(r5)
    25d4:	88800215 	stw	r2,8(r17)
    25d8:	04000316 	blt	zero,r16,25e8 <__sflush_r+0x124>
    25dc:	003fed06 	br	2594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002594>
    25e0:	90a5883a 	add	r18,r18,r2
    25e4:	043feb0e 	bge	zero,r16,2594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002594>
    25e8:	88800917 	ldw	r2,36(r17)
    25ec:	89400717 	ldw	r5,28(r17)
    25f0:	800f883a 	mov	r7,r16
    25f4:	900d883a 	mov	r6,r18
    25f8:	9809883a 	mov	r4,r19
    25fc:	103ee83a 	callr	r2
    2600:	80a1c83a 	sub	r16,r16,r2
    2604:	00bff616 	blt	zero,r2,25e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025e0>
    2608:	88c0030b 	ldhu	r3,12(r17)
    260c:	00bfffc4 	movi	r2,-1
    2610:	18c01014 	ori	r3,r3,64
    2614:	88c0030d 	sth	r3,12(r17)
    2618:	003fdf06 	br	2598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002598>
    261c:	0005883a 	mov	r2,zero
    2620:	003fec06 	br	25d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025d4>
    2624:	88801415 	stw	r2,80(r17)
    2628:	003fd206 	br	2574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002574>
    262c:	28c00f17 	ldw	r3,60(r5)
    2630:	00ffb316 	blt	zero,r3,2500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002500>
    2634:	003fd706 	br	2594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002594>
    2638:	89400717 	ldw	r5,28(r17)
    263c:	000d883a 	mov	r6,zero
    2640:	01c00044 	movi	r7,1
    2644:	9809883a 	mov	r4,r19
    2648:	403ee83a 	callr	r8
    264c:	100d883a 	mov	r6,r2
    2650:	00bfffc4 	movi	r2,-1
    2654:	30801426 	beq	r6,r2,26a8 <__sflush_r+0x1e4>
    2658:	8880030b 	ldhu	r2,12(r17)
    265c:	8a000a17 	ldw	r8,40(r17)
    2660:	003fae06 	br	251c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700251c>
    2664:	98c00017 	ldw	r3,0(r19)
    2668:	183fba26 	beq	r3,zero,2554 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002554>
    266c:	01000744 	movi	r4,29
    2670:	19000626 	beq	r3,r4,268c <__sflush_r+0x1c8>
    2674:	01000584 	movi	r4,22
    2678:	19000426 	beq	r3,r4,268c <__sflush_r+0x1c8>
    267c:	88c0030b 	ldhu	r3,12(r17)
    2680:	18c01014 	ori	r3,r3,64
    2684:	88c0030d 	sth	r3,12(r17)
    2688:	003fc306 	br	2598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002598>
    268c:	8880030b 	ldhu	r2,12(r17)
    2690:	88c00417 	ldw	r3,16(r17)
    2694:	88000115 	stw	zero,4(r17)
    2698:	10bdffcc 	andi	r2,r2,63487
    269c:	8880030d 	sth	r2,12(r17)
    26a0:	88c00015 	stw	r3,0(r17)
    26a4:	003fb306 	br	2574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002574>
    26a8:	98800017 	ldw	r2,0(r19)
    26ac:	103fea26 	beq	r2,zero,2658 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002658>
    26b0:	00c00744 	movi	r3,29
    26b4:	10c00226 	beq	r2,r3,26c0 <__sflush_r+0x1fc>
    26b8:	00c00584 	movi	r3,22
    26bc:	10c0031e 	bne	r2,r3,26cc <__sflush_r+0x208>
    26c0:	9c000015 	stw	r16,0(r19)
    26c4:	0005883a 	mov	r2,zero
    26c8:	003fb306 	br	2598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002598>
    26cc:	88c0030b 	ldhu	r3,12(r17)
    26d0:	3005883a 	mov	r2,r6
    26d4:	18c01014 	ori	r3,r3,64
    26d8:	88c0030d 	sth	r3,12(r17)
    26dc:	003fae06 	br	2598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002598>

000026e0 <_fflush_r>:
    26e0:	defffd04 	addi	sp,sp,-12
    26e4:	dc000115 	stw	r16,4(sp)
    26e8:	dfc00215 	stw	ra,8(sp)
    26ec:	2021883a 	mov	r16,r4
    26f0:	20000226 	beq	r4,zero,26fc <_fflush_r+0x1c>
    26f4:	20800e17 	ldw	r2,56(r4)
    26f8:	10000c26 	beq	r2,zero,272c <_fflush_r+0x4c>
    26fc:	2880030f 	ldh	r2,12(r5)
    2700:	1000051e 	bne	r2,zero,2718 <_fflush_r+0x38>
    2704:	0005883a 	mov	r2,zero
    2708:	dfc00217 	ldw	ra,8(sp)
    270c:	dc000117 	ldw	r16,4(sp)
    2710:	dec00304 	addi	sp,sp,12
    2714:	f800283a 	ret
    2718:	8009883a 	mov	r4,r16
    271c:	dfc00217 	ldw	ra,8(sp)
    2720:	dc000117 	ldw	r16,4(sp)
    2724:	dec00304 	addi	sp,sp,12
    2728:	00024c41 	jmpi	24c4 <__sflush_r>
    272c:	d9400015 	stw	r5,0(sp)
    2730:	00007740 	call	774 <__sinit>
    2734:	d9400017 	ldw	r5,0(sp)
    2738:	003ff006 	br	26fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70026fc>

0000273c <fflush>:
    273c:	20000526 	beq	r4,zero,2754 <fflush+0x18>
    2740:	00800074 	movhi	r2,1
    2744:	10a46504 	addi	r2,r2,-28268
    2748:	200b883a 	mov	r5,r4
    274c:	11000017 	ldw	r4,0(r2)
    2750:	00026e01 	jmpi	26e0 <_fflush_r>
    2754:	00800074 	movhi	r2,1
    2758:	10a46404 	addi	r2,r2,-28272
    275c:	11000017 	ldw	r4,0(r2)
    2760:	01400034 	movhi	r5,0
    2764:	2949b804 	addi	r5,r5,9952
    2768:	0000d441 	jmpi	d44 <_fwalk_reent>

0000276c <_malloc_trim_r>:
    276c:	defffb04 	addi	sp,sp,-20
    2770:	dcc00315 	stw	r19,12(sp)
    2774:	04c00034 	movhi	r19,0
    2778:	dc800215 	stw	r18,8(sp)
    277c:	dc400115 	stw	r17,4(sp)
    2780:	dc000015 	stw	r16,0(sp)
    2784:	dfc00415 	stw	ra,16(sp)
    2788:	2821883a 	mov	r16,r5
    278c:	9cde1d04 	addi	r19,r19,30836
    2790:	2025883a 	mov	r18,r4
    2794:	00035fc0 	call	35fc <__malloc_lock>
    2798:	98800217 	ldw	r2,8(r19)
    279c:	14400117 	ldw	r17,4(r2)
    27a0:	00bfff04 	movi	r2,-4
    27a4:	88a2703a 	and	r17,r17,r2
    27a8:	8c21c83a 	sub	r16,r17,r16
    27ac:	8403fbc4 	addi	r16,r16,4079
    27b0:	8020d33a 	srli	r16,r16,12
    27b4:	0083ffc4 	movi	r2,4095
    27b8:	843fffc4 	addi	r16,r16,-1
    27bc:	8020933a 	slli	r16,r16,12
    27c0:	1400060e 	bge	r2,r16,27dc <_malloc_trim_r+0x70>
    27c4:	000b883a 	mov	r5,zero
    27c8:	9009883a 	mov	r4,r18
    27cc:	00020280 	call	2028 <_sbrk_r>
    27d0:	98c00217 	ldw	r3,8(r19)
    27d4:	1c47883a 	add	r3,r3,r17
    27d8:	10c00a26 	beq	r2,r3,2804 <_malloc_trim_r+0x98>
    27dc:	9009883a 	mov	r4,r18
    27e0:	00036200 	call	3620 <__malloc_unlock>
    27e4:	0005883a 	mov	r2,zero
    27e8:	dfc00417 	ldw	ra,16(sp)
    27ec:	dcc00317 	ldw	r19,12(sp)
    27f0:	dc800217 	ldw	r18,8(sp)
    27f4:	dc400117 	ldw	r17,4(sp)
    27f8:	dc000017 	ldw	r16,0(sp)
    27fc:	dec00504 	addi	sp,sp,20
    2800:	f800283a 	ret
    2804:	040bc83a 	sub	r5,zero,r16
    2808:	9009883a 	mov	r4,r18
    280c:	00020280 	call	2028 <_sbrk_r>
    2810:	00ffffc4 	movi	r3,-1
    2814:	10c00d26 	beq	r2,r3,284c <_malloc_trim_r+0xe0>
    2818:	00c00074 	movhi	r3,1
    281c:	18ebdd04 	addi	r3,r3,-20620
    2820:	18800017 	ldw	r2,0(r3)
    2824:	99000217 	ldw	r4,8(r19)
    2828:	8c23c83a 	sub	r17,r17,r16
    282c:	8c400054 	ori	r17,r17,1
    2830:	1421c83a 	sub	r16,r2,r16
    2834:	24400115 	stw	r17,4(r4)
    2838:	9009883a 	mov	r4,r18
    283c:	1c000015 	stw	r16,0(r3)
    2840:	00036200 	call	3620 <__malloc_unlock>
    2844:	00800044 	movi	r2,1
    2848:	003fe706 	br	27e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027e8>
    284c:	000b883a 	mov	r5,zero
    2850:	9009883a 	mov	r4,r18
    2854:	00020280 	call	2028 <_sbrk_r>
    2858:	99000217 	ldw	r4,8(r19)
    285c:	014003c4 	movi	r5,15
    2860:	1107c83a 	sub	r3,r2,r4
    2864:	28ffdd0e 	bge	r5,r3,27dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027dc>
    2868:	01400074 	movhi	r5,1
    286c:	29646604 	addi	r5,r5,-28264
    2870:	29400017 	ldw	r5,0(r5)
    2874:	18c00054 	ori	r3,r3,1
    2878:	20c00115 	stw	r3,4(r4)
    287c:	00c00074 	movhi	r3,1
    2880:	1145c83a 	sub	r2,r2,r5
    2884:	18ebdd04 	addi	r3,r3,-20620
    2888:	18800015 	stw	r2,0(r3)
    288c:	003fd306 	br	27dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027dc>

00002890 <_free_r>:
    2890:	28004126 	beq	r5,zero,2998 <_free_r+0x108>
    2894:	defffd04 	addi	sp,sp,-12
    2898:	dc400115 	stw	r17,4(sp)
    289c:	dc000015 	stw	r16,0(sp)
    28a0:	2023883a 	mov	r17,r4
    28a4:	2821883a 	mov	r16,r5
    28a8:	dfc00215 	stw	ra,8(sp)
    28ac:	00035fc0 	call	35fc <__malloc_lock>
    28b0:	81ffff17 	ldw	r7,-4(r16)
    28b4:	00bfff84 	movi	r2,-2
    28b8:	01000034 	movhi	r4,0
    28bc:	81bffe04 	addi	r6,r16,-8
    28c0:	3884703a 	and	r2,r7,r2
    28c4:	211e1d04 	addi	r4,r4,30836
    28c8:	308b883a 	add	r5,r6,r2
    28cc:	2a400117 	ldw	r9,4(r5)
    28d0:	22000217 	ldw	r8,8(r4)
    28d4:	00ffff04 	movi	r3,-4
    28d8:	48c6703a 	and	r3,r9,r3
    28dc:	2a005726 	beq	r5,r8,2a3c <_free_r+0x1ac>
    28e0:	28c00115 	stw	r3,4(r5)
    28e4:	39c0004c 	andi	r7,r7,1
    28e8:	3800091e 	bne	r7,zero,2910 <_free_r+0x80>
    28ec:	823ffe17 	ldw	r8,-8(r16)
    28f0:	22400204 	addi	r9,r4,8
    28f4:	320dc83a 	sub	r6,r6,r8
    28f8:	31c00217 	ldw	r7,8(r6)
    28fc:	1205883a 	add	r2,r2,r8
    2900:	3a406526 	beq	r7,r9,2a98 <_free_r+0x208>
    2904:	32000317 	ldw	r8,12(r6)
    2908:	3a000315 	stw	r8,12(r7)
    290c:	41c00215 	stw	r7,8(r8)
    2910:	28cf883a 	add	r7,r5,r3
    2914:	39c00117 	ldw	r7,4(r7)
    2918:	39c0004c 	andi	r7,r7,1
    291c:	38003a26 	beq	r7,zero,2a08 <_free_r+0x178>
    2920:	10c00054 	ori	r3,r2,1
    2924:	30c00115 	stw	r3,4(r6)
    2928:	3087883a 	add	r3,r6,r2
    292c:	18800015 	stw	r2,0(r3)
    2930:	00c07fc4 	movi	r3,511
    2934:	18801936 	bltu	r3,r2,299c <_free_r+0x10c>
    2938:	1004d0fa 	srli	r2,r2,3
    293c:	01c00044 	movi	r7,1
    2940:	21400117 	ldw	r5,4(r4)
    2944:	10c00044 	addi	r3,r2,1
    2948:	18c7883a 	add	r3,r3,r3
    294c:	1005d0ba 	srai	r2,r2,2
    2950:	18c7883a 	add	r3,r3,r3
    2954:	18c7883a 	add	r3,r3,r3
    2958:	1907883a 	add	r3,r3,r4
    295c:	3884983a 	sll	r2,r7,r2
    2960:	19c00017 	ldw	r7,0(r3)
    2964:	1a3ffe04 	addi	r8,r3,-8
    2968:	1144b03a 	or	r2,r2,r5
    296c:	32000315 	stw	r8,12(r6)
    2970:	31c00215 	stw	r7,8(r6)
    2974:	20800115 	stw	r2,4(r4)
    2978:	19800015 	stw	r6,0(r3)
    297c:	39800315 	stw	r6,12(r7)
    2980:	8809883a 	mov	r4,r17
    2984:	dfc00217 	ldw	ra,8(sp)
    2988:	dc400117 	ldw	r17,4(sp)
    298c:	dc000017 	ldw	r16,0(sp)
    2990:	dec00304 	addi	sp,sp,12
    2994:	00036201 	jmpi	3620 <__malloc_unlock>
    2998:	f800283a 	ret
    299c:	100ad27a 	srli	r5,r2,9
    29a0:	00c00104 	movi	r3,4
    29a4:	19404a36 	bltu	r3,r5,2ad0 <_free_r+0x240>
    29a8:	100ad1ba 	srli	r5,r2,6
    29ac:	28c00e44 	addi	r3,r5,57
    29b0:	18c7883a 	add	r3,r3,r3
    29b4:	29400e04 	addi	r5,r5,56
    29b8:	18c7883a 	add	r3,r3,r3
    29bc:	18c7883a 	add	r3,r3,r3
    29c0:	1909883a 	add	r4,r3,r4
    29c4:	20c00017 	ldw	r3,0(r4)
    29c8:	01c00034 	movhi	r7,0
    29cc:	213ffe04 	addi	r4,r4,-8
    29d0:	39de1d04 	addi	r7,r7,30836
    29d4:	20c04426 	beq	r4,r3,2ae8 <_free_r+0x258>
    29d8:	01ffff04 	movi	r7,-4
    29dc:	19400117 	ldw	r5,4(r3)
    29e0:	29ca703a 	and	r5,r5,r7
    29e4:	1140022e 	bgeu	r2,r5,29f0 <_free_r+0x160>
    29e8:	18c00217 	ldw	r3,8(r3)
    29ec:	20fffb1e 	bne	r4,r3,29dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029dc>
    29f0:	19000317 	ldw	r4,12(r3)
    29f4:	31000315 	stw	r4,12(r6)
    29f8:	30c00215 	stw	r3,8(r6)
    29fc:	21800215 	stw	r6,8(r4)
    2a00:	19800315 	stw	r6,12(r3)
    2a04:	003fde06 	br	2980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002980>
    2a08:	29c00217 	ldw	r7,8(r5)
    2a0c:	10c5883a 	add	r2,r2,r3
    2a10:	00c00034 	movhi	r3,0
    2a14:	18de1f04 	addi	r3,r3,30844
    2a18:	38c03b26 	beq	r7,r3,2b08 <_free_r+0x278>
    2a1c:	2a000317 	ldw	r8,12(r5)
    2a20:	11400054 	ori	r5,r2,1
    2a24:	3087883a 	add	r3,r6,r2
    2a28:	3a000315 	stw	r8,12(r7)
    2a2c:	41c00215 	stw	r7,8(r8)
    2a30:	31400115 	stw	r5,4(r6)
    2a34:	18800015 	stw	r2,0(r3)
    2a38:	003fbd06 	br	2930 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002930>
    2a3c:	39c0004c 	andi	r7,r7,1
    2a40:	10c5883a 	add	r2,r2,r3
    2a44:	3800071e 	bne	r7,zero,2a64 <_free_r+0x1d4>
    2a48:	81fffe17 	ldw	r7,-8(r16)
    2a4c:	31cdc83a 	sub	r6,r6,r7
    2a50:	30c00317 	ldw	r3,12(r6)
    2a54:	31400217 	ldw	r5,8(r6)
    2a58:	11c5883a 	add	r2,r2,r7
    2a5c:	28c00315 	stw	r3,12(r5)
    2a60:	19400215 	stw	r5,8(r3)
    2a64:	10c00054 	ori	r3,r2,1
    2a68:	30c00115 	stw	r3,4(r6)
    2a6c:	00c00074 	movhi	r3,1
    2a70:	18e46704 	addi	r3,r3,-28260
    2a74:	18c00017 	ldw	r3,0(r3)
    2a78:	21800215 	stw	r6,8(r4)
    2a7c:	10ffc036 	bltu	r2,r3,2980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002980>
    2a80:	00800074 	movhi	r2,1
    2a84:	10abd204 	addi	r2,r2,-20664
    2a88:	11400017 	ldw	r5,0(r2)
    2a8c:	8809883a 	mov	r4,r17
    2a90:	000276c0 	call	276c <_malloc_trim_r>
    2a94:	003fba06 	br	2980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002980>
    2a98:	28c9883a 	add	r4,r5,r3
    2a9c:	21000117 	ldw	r4,4(r4)
    2aa0:	2100004c 	andi	r4,r4,1
    2aa4:	2000391e 	bne	r4,zero,2b8c <_free_r+0x2fc>
    2aa8:	29c00217 	ldw	r7,8(r5)
    2aac:	29000317 	ldw	r4,12(r5)
    2ab0:	1885883a 	add	r2,r3,r2
    2ab4:	10c00054 	ori	r3,r2,1
    2ab8:	39000315 	stw	r4,12(r7)
    2abc:	21c00215 	stw	r7,8(r4)
    2ac0:	30c00115 	stw	r3,4(r6)
    2ac4:	308d883a 	add	r6,r6,r2
    2ac8:	30800015 	stw	r2,0(r6)
    2acc:	003fac06 	br	2980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002980>
    2ad0:	00c00504 	movi	r3,20
    2ad4:	19401536 	bltu	r3,r5,2b2c <_free_r+0x29c>
    2ad8:	28c01704 	addi	r3,r5,92
    2adc:	18c7883a 	add	r3,r3,r3
    2ae0:	294016c4 	addi	r5,r5,91
    2ae4:	003fb406 	br	29b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029b8>
    2ae8:	280bd0ba 	srai	r5,r5,2
    2aec:	00c00044 	movi	r3,1
    2af0:	38800117 	ldw	r2,4(r7)
    2af4:	194a983a 	sll	r5,r3,r5
    2af8:	2007883a 	mov	r3,r4
    2afc:	2884b03a 	or	r2,r5,r2
    2b00:	38800115 	stw	r2,4(r7)
    2b04:	003fbb06 	br	29f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029f4>
    2b08:	21800515 	stw	r6,20(r4)
    2b0c:	21800415 	stw	r6,16(r4)
    2b10:	10c00054 	ori	r3,r2,1
    2b14:	31c00315 	stw	r7,12(r6)
    2b18:	31c00215 	stw	r7,8(r6)
    2b1c:	30c00115 	stw	r3,4(r6)
    2b20:	308d883a 	add	r6,r6,r2
    2b24:	30800015 	stw	r2,0(r6)
    2b28:	003f9506 	br	2980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002980>
    2b2c:	00c01504 	movi	r3,84
    2b30:	19400536 	bltu	r3,r5,2b48 <_free_r+0x2b8>
    2b34:	100ad33a 	srli	r5,r2,12
    2b38:	28c01bc4 	addi	r3,r5,111
    2b3c:	18c7883a 	add	r3,r3,r3
    2b40:	29401b84 	addi	r5,r5,110
    2b44:	003f9c06 	br	29b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029b8>
    2b48:	00c05504 	movi	r3,340
    2b4c:	19400536 	bltu	r3,r5,2b64 <_free_r+0x2d4>
    2b50:	100ad3fa 	srli	r5,r2,15
    2b54:	28c01e04 	addi	r3,r5,120
    2b58:	18c7883a 	add	r3,r3,r3
    2b5c:	29401dc4 	addi	r5,r5,119
    2b60:	003f9506 	br	29b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029b8>
    2b64:	00c15504 	movi	r3,1364
    2b68:	19400536 	bltu	r3,r5,2b80 <_free_r+0x2f0>
    2b6c:	100ad4ba 	srli	r5,r2,18
    2b70:	28c01f44 	addi	r3,r5,125
    2b74:	18c7883a 	add	r3,r3,r3
    2b78:	29401f04 	addi	r5,r5,124
    2b7c:	003f8e06 	br	29b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029b8>
    2b80:	00c03f84 	movi	r3,254
    2b84:	01401f84 	movi	r5,126
    2b88:	003f8b06 	br	29b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029b8>
    2b8c:	10c00054 	ori	r3,r2,1
    2b90:	30c00115 	stw	r3,4(r6)
    2b94:	308d883a 	add	r6,r6,r2
    2b98:	30800015 	stw	r2,0(r6)
    2b9c:	003f7806 	br	2980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002980>

00002ba0 <_lseek_r>:
    2ba0:	defffd04 	addi	sp,sp,-12
    2ba4:	2805883a 	mov	r2,r5
    2ba8:	dc000015 	stw	r16,0(sp)
    2bac:	04000074 	movhi	r16,1
    2bb0:	dc400115 	stw	r17,4(sp)
    2bb4:	300b883a 	mov	r5,r6
    2bb8:	842bd304 	addi	r16,r16,-20660
    2bbc:	2023883a 	mov	r17,r4
    2bc0:	380d883a 	mov	r6,r7
    2bc4:	1009883a 	mov	r4,r2
    2bc8:	dfc00215 	stw	ra,8(sp)
    2bcc:	80000015 	stw	zero,0(r16)
    2bd0:	00034ac0 	call	34ac <lseek>
    2bd4:	00ffffc4 	movi	r3,-1
    2bd8:	10c00526 	beq	r2,r3,2bf0 <_lseek_r+0x50>
    2bdc:	dfc00217 	ldw	ra,8(sp)
    2be0:	dc400117 	ldw	r17,4(sp)
    2be4:	dc000017 	ldw	r16,0(sp)
    2be8:	dec00304 	addi	sp,sp,12
    2bec:	f800283a 	ret
    2bf0:	80c00017 	ldw	r3,0(r16)
    2bf4:	183ff926 	beq	r3,zero,2bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002bdc>
    2bf8:	88c00015 	stw	r3,0(r17)
    2bfc:	003ff706 	br	2bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002bdc>

00002c00 <__smakebuf_r>:
    2c00:	2880030b 	ldhu	r2,12(r5)
    2c04:	10c0008c 	andi	r3,r2,2
    2c08:	1800411e 	bne	r3,zero,2d10 <__smakebuf_r+0x110>
    2c0c:	deffec04 	addi	sp,sp,-80
    2c10:	dc000f15 	stw	r16,60(sp)
    2c14:	2821883a 	mov	r16,r5
    2c18:	2940038f 	ldh	r5,14(r5)
    2c1c:	dc401015 	stw	r17,64(sp)
    2c20:	dfc01315 	stw	ra,76(sp)
    2c24:	dcc01215 	stw	r19,72(sp)
    2c28:	dc801115 	stw	r18,68(sp)
    2c2c:	2023883a 	mov	r17,r4
    2c30:	28001c16 	blt	r5,zero,2ca4 <__smakebuf_r+0xa4>
    2c34:	d80d883a 	mov	r6,sp
    2c38:	0002e1c0 	call	2e1c <_fstat_r>
    2c3c:	10001816 	blt	r2,zero,2ca0 <__smakebuf_r+0xa0>
    2c40:	d8800117 	ldw	r2,4(sp)
    2c44:	00e00014 	movui	r3,32768
    2c48:	10bc000c 	andi	r2,r2,61440
    2c4c:	14c80020 	cmpeqi	r19,r2,8192
    2c50:	10c03726 	beq	r2,r3,2d30 <__smakebuf_r+0x130>
    2c54:	80c0030b 	ldhu	r3,12(r16)
    2c58:	18c20014 	ori	r3,r3,2048
    2c5c:	80c0030d 	sth	r3,12(r16)
    2c60:	00c80004 	movi	r3,8192
    2c64:	10c0521e 	bne	r2,r3,2db0 <__smakebuf_r+0x1b0>
    2c68:	8140038f 	ldh	r5,14(r16)
    2c6c:	8809883a 	mov	r4,r17
    2c70:	0002e780 	call	2e78 <_isatty_r>
    2c74:	10004c26 	beq	r2,zero,2da8 <__smakebuf_r+0x1a8>
    2c78:	8080030b 	ldhu	r2,12(r16)
    2c7c:	80c010c4 	addi	r3,r16,67
    2c80:	80c00015 	stw	r3,0(r16)
    2c84:	10800054 	ori	r2,r2,1
    2c88:	8080030d 	sth	r2,12(r16)
    2c8c:	00800044 	movi	r2,1
    2c90:	80c00415 	stw	r3,16(r16)
    2c94:	80800515 	stw	r2,20(r16)
    2c98:	04810004 	movi	r18,1024
    2c9c:	00000706 	br	2cbc <__smakebuf_r+0xbc>
    2ca0:	8080030b 	ldhu	r2,12(r16)
    2ca4:	10c0200c 	andi	r3,r2,128
    2ca8:	18001f1e 	bne	r3,zero,2d28 <__smakebuf_r+0x128>
    2cac:	04810004 	movi	r18,1024
    2cb0:	10820014 	ori	r2,r2,2048
    2cb4:	8080030d 	sth	r2,12(r16)
    2cb8:	0027883a 	mov	r19,zero
    2cbc:	900b883a 	mov	r5,r18
    2cc0:	8809883a 	mov	r4,r17
    2cc4:	0000e080 	call	e08 <_malloc_r>
    2cc8:	10002c26 	beq	r2,zero,2d7c <__smakebuf_r+0x17c>
    2ccc:	80c0030b 	ldhu	r3,12(r16)
    2cd0:	01000034 	movhi	r4,0
    2cd4:	21010b04 	addi	r4,r4,1068
    2cd8:	89000f15 	stw	r4,60(r17)
    2cdc:	18c02014 	ori	r3,r3,128
    2ce0:	80c0030d 	sth	r3,12(r16)
    2ce4:	80800015 	stw	r2,0(r16)
    2ce8:	80800415 	stw	r2,16(r16)
    2cec:	84800515 	stw	r18,20(r16)
    2cf0:	98001a1e 	bne	r19,zero,2d5c <__smakebuf_r+0x15c>
    2cf4:	dfc01317 	ldw	ra,76(sp)
    2cf8:	dcc01217 	ldw	r19,72(sp)
    2cfc:	dc801117 	ldw	r18,68(sp)
    2d00:	dc401017 	ldw	r17,64(sp)
    2d04:	dc000f17 	ldw	r16,60(sp)
    2d08:	dec01404 	addi	sp,sp,80
    2d0c:	f800283a 	ret
    2d10:	288010c4 	addi	r2,r5,67
    2d14:	28800015 	stw	r2,0(r5)
    2d18:	28800415 	stw	r2,16(r5)
    2d1c:	00800044 	movi	r2,1
    2d20:	28800515 	stw	r2,20(r5)
    2d24:	f800283a 	ret
    2d28:	04801004 	movi	r18,64
    2d2c:	003fe006 	br	2cb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cb0>
    2d30:	81000a17 	ldw	r4,40(r16)
    2d34:	00c00034 	movhi	r3,0
    2d38:	18c85504 	addi	r3,r3,8532
    2d3c:	20ffc51e 	bne	r4,r3,2c54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c54>
    2d40:	8080030b 	ldhu	r2,12(r16)
    2d44:	04810004 	movi	r18,1024
    2d48:	84801315 	stw	r18,76(r16)
    2d4c:	1484b03a 	or	r2,r2,r18
    2d50:	8080030d 	sth	r2,12(r16)
    2d54:	0027883a 	mov	r19,zero
    2d58:	003fd806 	br	2cbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cbc>
    2d5c:	8140038f 	ldh	r5,14(r16)
    2d60:	8809883a 	mov	r4,r17
    2d64:	0002e780 	call	2e78 <_isatty_r>
    2d68:	103fe226 	beq	r2,zero,2cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf4>
    2d6c:	8080030b 	ldhu	r2,12(r16)
    2d70:	10800054 	ori	r2,r2,1
    2d74:	8080030d 	sth	r2,12(r16)
    2d78:	003fde06 	br	2cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf4>
    2d7c:	8080030b 	ldhu	r2,12(r16)
    2d80:	10c0800c 	andi	r3,r2,512
    2d84:	183fdb1e 	bne	r3,zero,2cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf4>
    2d88:	10800094 	ori	r2,r2,2
    2d8c:	80c010c4 	addi	r3,r16,67
    2d90:	8080030d 	sth	r2,12(r16)
    2d94:	00800044 	movi	r2,1
    2d98:	80c00015 	stw	r3,0(r16)
    2d9c:	80c00415 	stw	r3,16(r16)
    2da0:	80800515 	stw	r2,20(r16)
    2da4:	003fd306 	br	2cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf4>
    2da8:	04810004 	movi	r18,1024
    2dac:	003fc306 	br	2cbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cbc>
    2db0:	0027883a 	mov	r19,zero
    2db4:	04810004 	movi	r18,1024
    2db8:	003fc006 	br	2cbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cbc>

00002dbc <_read_r>:
    2dbc:	defffd04 	addi	sp,sp,-12
    2dc0:	2805883a 	mov	r2,r5
    2dc4:	dc000015 	stw	r16,0(sp)
    2dc8:	04000074 	movhi	r16,1
    2dcc:	dc400115 	stw	r17,4(sp)
    2dd0:	300b883a 	mov	r5,r6
    2dd4:	842bd304 	addi	r16,r16,-20660
    2dd8:	2023883a 	mov	r17,r4
    2ddc:	380d883a 	mov	r6,r7
    2de0:	1009883a 	mov	r4,r2
    2de4:	dfc00215 	stw	ra,8(sp)
    2de8:	80000015 	stw	zero,0(r16)
    2dec:	00036800 	call	3680 <read>
    2df0:	00ffffc4 	movi	r3,-1
    2df4:	10c00526 	beq	r2,r3,2e0c <_read_r+0x50>
    2df8:	dfc00217 	ldw	ra,8(sp)
    2dfc:	dc400117 	ldw	r17,4(sp)
    2e00:	dc000017 	ldw	r16,0(sp)
    2e04:	dec00304 	addi	sp,sp,12
    2e08:	f800283a 	ret
    2e0c:	80c00017 	ldw	r3,0(r16)
    2e10:	183ff926 	beq	r3,zero,2df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002df8>
    2e14:	88c00015 	stw	r3,0(r17)
    2e18:	003ff706 	br	2df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002df8>

00002e1c <_fstat_r>:
    2e1c:	defffd04 	addi	sp,sp,-12
    2e20:	2805883a 	mov	r2,r5
    2e24:	dc000015 	stw	r16,0(sp)
    2e28:	04000074 	movhi	r16,1
    2e2c:	dc400115 	stw	r17,4(sp)
    2e30:	842bd304 	addi	r16,r16,-20660
    2e34:	2023883a 	mov	r17,r4
    2e38:	300b883a 	mov	r5,r6
    2e3c:	1009883a 	mov	r4,r2
    2e40:	dfc00215 	stw	ra,8(sp)
    2e44:	80000015 	stw	zero,0(r16)
    2e48:	00031f40 	call	31f4 <fstat>
    2e4c:	00ffffc4 	movi	r3,-1
    2e50:	10c00526 	beq	r2,r3,2e68 <_fstat_r+0x4c>
    2e54:	dfc00217 	ldw	ra,8(sp)
    2e58:	dc400117 	ldw	r17,4(sp)
    2e5c:	dc000017 	ldw	r16,0(sp)
    2e60:	dec00304 	addi	sp,sp,12
    2e64:	f800283a 	ret
    2e68:	80c00017 	ldw	r3,0(r16)
    2e6c:	183ff926 	beq	r3,zero,2e54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e54>
    2e70:	88c00015 	stw	r3,0(r17)
    2e74:	003ff706 	br	2e54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e54>

00002e78 <_isatty_r>:
    2e78:	defffd04 	addi	sp,sp,-12
    2e7c:	dc000015 	stw	r16,0(sp)
    2e80:	04000074 	movhi	r16,1
    2e84:	dc400115 	stw	r17,4(sp)
    2e88:	842bd304 	addi	r16,r16,-20660
    2e8c:	2023883a 	mov	r17,r4
    2e90:	2809883a 	mov	r4,r5
    2e94:	dfc00215 	stw	ra,8(sp)
    2e98:	80000015 	stw	zero,0(r16)
    2e9c:	00032e00 	call	32e0 <isatty>
    2ea0:	00ffffc4 	movi	r3,-1
    2ea4:	10c00526 	beq	r2,r3,2ebc <_isatty_r+0x44>
    2ea8:	dfc00217 	ldw	ra,8(sp)
    2eac:	dc400117 	ldw	r17,4(sp)
    2eb0:	dc000017 	ldw	r16,0(sp)
    2eb4:	dec00304 	addi	sp,sp,12
    2eb8:	f800283a 	ret
    2ebc:	80c00017 	ldw	r3,0(r16)
    2ec0:	183ff926 	beq	r3,zero,2ea8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ea8>
    2ec4:	88c00015 	stw	r3,0(r17)
    2ec8:	003ff706 	br	2ea8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ea8>

00002ecc <__divsi3>:
    2ecc:	20001b16 	blt	r4,zero,2f3c <__divsi3+0x70>
    2ed0:	000f883a 	mov	r7,zero
    2ed4:	28001616 	blt	r5,zero,2f30 <__divsi3+0x64>
    2ed8:	200d883a 	mov	r6,r4
    2edc:	29001a2e 	bgeu	r5,r4,2f48 <__divsi3+0x7c>
    2ee0:	00800804 	movi	r2,32
    2ee4:	00c00044 	movi	r3,1
    2ee8:	00000106 	br	2ef0 <__divsi3+0x24>
    2eec:	10000d26 	beq	r2,zero,2f24 <__divsi3+0x58>
    2ef0:	294b883a 	add	r5,r5,r5
    2ef4:	10bfffc4 	addi	r2,r2,-1
    2ef8:	18c7883a 	add	r3,r3,r3
    2efc:	293ffb36 	bltu	r5,r4,2eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002eec>
    2f00:	0005883a 	mov	r2,zero
    2f04:	18000726 	beq	r3,zero,2f24 <__divsi3+0x58>
    2f08:	0005883a 	mov	r2,zero
    2f0c:	31400236 	bltu	r6,r5,2f18 <__divsi3+0x4c>
    2f10:	314dc83a 	sub	r6,r6,r5
    2f14:	10c4b03a 	or	r2,r2,r3
    2f18:	1806d07a 	srli	r3,r3,1
    2f1c:	280ad07a 	srli	r5,r5,1
    2f20:	183ffa1e 	bne	r3,zero,2f0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f0c>
    2f24:	38000126 	beq	r7,zero,2f2c <__divsi3+0x60>
    2f28:	0085c83a 	sub	r2,zero,r2
    2f2c:	f800283a 	ret
    2f30:	014bc83a 	sub	r5,zero,r5
    2f34:	39c0005c 	xori	r7,r7,1
    2f38:	003fe706 	br	2ed8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ed8>
    2f3c:	0109c83a 	sub	r4,zero,r4
    2f40:	01c00044 	movi	r7,1
    2f44:	003fe306 	br	2ed4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ed4>
    2f48:	00c00044 	movi	r3,1
    2f4c:	003fee06 	br	2f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f08>

00002f50 <__modsi3>:
    2f50:	20001716 	blt	r4,zero,2fb0 <__modsi3+0x60>
    2f54:	000f883a 	mov	r7,zero
    2f58:	2005883a 	mov	r2,r4
    2f5c:	28001216 	blt	r5,zero,2fa8 <__modsi3+0x58>
    2f60:	2900162e 	bgeu	r5,r4,2fbc <__modsi3+0x6c>
    2f64:	01800804 	movi	r6,32
    2f68:	00c00044 	movi	r3,1
    2f6c:	00000106 	br	2f74 <__modsi3+0x24>
    2f70:	30000a26 	beq	r6,zero,2f9c <__modsi3+0x4c>
    2f74:	294b883a 	add	r5,r5,r5
    2f78:	31bfffc4 	addi	r6,r6,-1
    2f7c:	18c7883a 	add	r3,r3,r3
    2f80:	293ffb36 	bltu	r5,r4,2f70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f70>
    2f84:	18000526 	beq	r3,zero,2f9c <__modsi3+0x4c>
    2f88:	1806d07a 	srli	r3,r3,1
    2f8c:	11400136 	bltu	r2,r5,2f94 <__modsi3+0x44>
    2f90:	1145c83a 	sub	r2,r2,r5
    2f94:	280ad07a 	srli	r5,r5,1
    2f98:	183ffb1e 	bne	r3,zero,2f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f88>
    2f9c:	38000126 	beq	r7,zero,2fa4 <__modsi3+0x54>
    2fa0:	0085c83a 	sub	r2,zero,r2
    2fa4:	f800283a 	ret
    2fa8:	014bc83a 	sub	r5,zero,r5
    2fac:	003fec06 	br	2f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f60>
    2fb0:	0109c83a 	sub	r4,zero,r4
    2fb4:	01c00044 	movi	r7,1
    2fb8:	003fe706 	br	2f58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f58>
    2fbc:	00c00044 	movi	r3,1
    2fc0:	003ff106 	br	2f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f88>

00002fc4 <__udivsi3>:
    2fc4:	200d883a 	mov	r6,r4
    2fc8:	2900152e 	bgeu	r5,r4,3020 <__udivsi3+0x5c>
    2fcc:	28001416 	blt	r5,zero,3020 <__udivsi3+0x5c>
    2fd0:	00800804 	movi	r2,32
    2fd4:	00c00044 	movi	r3,1
    2fd8:	00000206 	br	2fe4 <__udivsi3+0x20>
    2fdc:	10000e26 	beq	r2,zero,3018 <__udivsi3+0x54>
    2fe0:	28000516 	blt	r5,zero,2ff8 <__udivsi3+0x34>
    2fe4:	294b883a 	add	r5,r5,r5
    2fe8:	10bfffc4 	addi	r2,r2,-1
    2fec:	18c7883a 	add	r3,r3,r3
    2ff0:	293ffa36 	bltu	r5,r4,2fdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002fdc>
    2ff4:	18000826 	beq	r3,zero,3018 <__udivsi3+0x54>
    2ff8:	0005883a 	mov	r2,zero
    2ffc:	31400236 	bltu	r6,r5,3008 <__udivsi3+0x44>
    3000:	314dc83a 	sub	r6,r6,r5
    3004:	10c4b03a 	or	r2,r2,r3
    3008:	1806d07a 	srli	r3,r3,1
    300c:	280ad07a 	srli	r5,r5,1
    3010:	183ffa1e 	bne	r3,zero,2ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ffc>
    3014:	f800283a 	ret
    3018:	0005883a 	mov	r2,zero
    301c:	f800283a 	ret
    3020:	00c00044 	movi	r3,1
    3024:	003ff406 	br	2ff8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ff8>

00003028 <__umodsi3>:
    3028:	2005883a 	mov	r2,r4
    302c:	2900122e 	bgeu	r5,r4,3078 <__umodsi3+0x50>
    3030:	28001116 	blt	r5,zero,3078 <__umodsi3+0x50>
    3034:	01800804 	movi	r6,32
    3038:	00c00044 	movi	r3,1
    303c:	00000206 	br	3048 <__umodsi3+0x20>
    3040:	30000c26 	beq	r6,zero,3074 <__umodsi3+0x4c>
    3044:	28000516 	blt	r5,zero,305c <__umodsi3+0x34>
    3048:	294b883a 	add	r5,r5,r5
    304c:	31bfffc4 	addi	r6,r6,-1
    3050:	18c7883a 	add	r3,r3,r3
    3054:	293ffa36 	bltu	r5,r4,3040 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003040>
    3058:	18000626 	beq	r3,zero,3074 <__umodsi3+0x4c>
    305c:	1806d07a 	srli	r3,r3,1
    3060:	11400136 	bltu	r2,r5,3068 <__umodsi3+0x40>
    3064:	1145c83a 	sub	r2,r2,r5
    3068:	280ad07a 	srli	r5,r5,1
    306c:	183ffb1e 	bne	r3,zero,305c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700305c>
    3070:	f800283a 	ret
    3074:	f800283a 	ret
    3078:	00c00044 	movi	r3,1
    307c:	003ff706 	br	305c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700305c>

00003080 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3080:	defffe04 	addi	sp,sp,-8
    3084:	dfc00115 	stw	ra,4(sp)
    3088:	df000015 	stw	fp,0(sp)
    308c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3090:	d0a00917 	ldw	r2,-32732(gp)
    3094:	10000326 	beq	r2,zero,30a4 <alt_get_errno+0x24>
    3098:	d0a00917 	ldw	r2,-32732(gp)
    309c:	103ee83a 	callr	r2
    30a0:	00000106 	br	30a8 <alt_get_errno+0x28>
    30a4:	d0a76f04 	addi	r2,gp,-25156
}
    30a8:	e037883a 	mov	sp,fp
    30ac:	dfc00117 	ldw	ra,4(sp)
    30b0:	df000017 	ldw	fp,0(sp)
    30b4:	dec00204 	addi	sp,sp,8
    30b8:	f800283a 	ret

000030bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    30bc:	defffb04 	addi	sp,sp,-20
    30c0:	dfc00415 	stw	ra,16(sp)
    30c4:	df000315 	stw	fp,12(sp)
    30c8:	df000304 	addi	fp,sp,12
    30cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    30d0:	e0bfff17 	ldw	r2,-4(fp)
    30d4:	10000616 	blt	r2,zero,30f0 <close+0x34>
    30d8:	e0bfff17 	ldw	r2,-4(fp)
    30dc:	10c00324 	muli	r3,r2,12
    30e0:	00800034 	movhi	r2,0
    30e4:	109f2904 	addi	r2,r2,31908
    30e8:	1885883a 	add	r2,r3,r2
    30ec:	00000106 	br	30f4 <close+0x38>
    30f0:	0005883a 	mov	r2,zero
    30f4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    30f8:	e0bffd17 	ldw	r2,-12(fp)
    30fc:	10001926 	beq	r2,zero,3164 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3100:	e0bffd17 	ldw	r2,-12(fp)
    3104:	10800017 	ldw	r2,0(r2)
    3108:	10800417 	ldw	r2,16(r2)
    310c:	10000626 	beq	r2,zero,3128 <close+0x6c>
    3110:	e0bffd17 	ldw	r2,-12(fp)
    3114:	10800017 	ldw	r2,0(r2)
    3118:	10800417 	ldw	r2,16(r2)
    311c:	e13ffd17 	ldw	r4,-12(fp)
    3120:	103ee83a 	callr	r2
    3124:	00000106 	br	312c <close+0x70>
    3128:	0005883a 	mov	r2,zero
    312c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3130:	e13fff17 	ldw	r4,-4(fp)
    3134:	000377c0 	call	377c <alt_release_fd>
    if (rval < 0)
    3138:	e0bffe17 	ldw	r2,-8(fp)
    313c:	1000070e 	bge	r2,zero,315c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    3140:	00030800 	call	3080 <alt_get_errno>
    3144:	1007883a 	mov	r3,r2
    3148:	e0bffe17 	ldw	r2,-8(fp)
    314c:	0085c83a 	sub	r2,zero,r2
    3150:	18800015 	stw	r2,0(r3)
      return -1;
    3154:	00bfffc4 	movi	r2,-1
    3158:	00000706 	br	3178 <close+0xbc>
    }
    return 0;
    315c:	0005883a 	mov	r2,zero
    3160:	00000506 	br	3178 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3164:	00030800 	call	3080 <alt_get_errno>
    3168:	1007883a 	mov	r3,r2
    316c:	00801444 	movi	r2,81
    3170:	18800015 	stw	r2,0(r3)
    return -1;
    3174:	00bfffc4 	movi	r2,-1
  }
}
    3178:	e037883a 	mov	sp,fp
    317c:	dfc00117 	ldw	ra,4(sp)
    3180:	df000017 	ldw	fp,0(sp)
    3184:	dec00204 	addi	sp,sp,8
    3188:	f800283a 	ret

0000318c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    318c:	defffc04 	addi	sp,sp,-16
    3190:	df000315 	stw	fp,12(sp)
    3194:	df000304 	addi	fp,sp,12
    3198:	e13ffd15 	stw	r4,-12(fp)
    319c:	e17ffe15 	stw	r5,-8(fp)
    31a0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    31a4:	e0bfff17 	ldw	r2,-4(fp)
}
    31a8:	e037883a 	mov	sp,fp
    31ac:	df000017 	ldw	fp,0(sp)
    31b0:	dec00104 	addi	sp,sp,4
    31b4:	f800283a 	ret

000031b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    31b8:	defffe04 	addi	sp,sp,-8
    31bc:	dfc00115 	stw	ra,4(sp)
    31c0:	df000015 	stw	fp,0(sp)
    31c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    31c8:	d0a00917 	ldw	r2,-32732(gp)
    31cc:	10000326 	beq	r2,zero,31dc <alt_get_errno+0x24>
    31d0:	d0a00917 	ldw	r2,-32732(gp)
    31d4:	103ee83a 	callr	r2
    31d8:	00000106 	br	31e0 <alt_get_errno+0x28>
    31dc:	d0a76f04 	addi	r2,gp,-25156
}
    31e0:	e037883a 	mov	sp,fp
    31e4:	dfc00117 	ldw	ra,4(sp)
    31e8:	df000017 	ldw	fp,0(sp)
    31ec:	dec00204 	addi	sp,sp,8
    31f0:	f800283a 	ret

000031f4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    31f4:	defffb04 	addi	sp,sp,-20
    31f8:	dfc00415 	stw	ra,16(sp)
    31fc:	df000315 	stw	fp,12(sp)
    3200:	df000304 	addi	fp,sp,12
    3204:	e13ffe15 	stw	r4,-8(fp)
    3208:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    320c:	e0bffe17 	ldw	r2,-8(fp)
    3210:	10000616 	blt	r2,zero,322c <fstat+0x38>
    3214:	e0bffe17 	ldw	r2,-8(fp)
    3218:	10c00324 	muli	r3,r2,12
    321c:	00800034 	movhi	r2,0
    3220:	109f2904 	addi	r2,r2,31908
    3224:	1885883a 	add	r2,r3,r2
    3228:	00000106 	br	3230 <fstat+0x3c>
    322c:	0005883a 	mov	r2,zero
    3230:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    3234:	e0bffd17 	ldw	r2,-12(fp)
    3238:	10001026 	beq	r2,zero,327c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    323c:	e0bffd17 	ldw	r2,-12(fp)
    3240:	10800017 	ldw	r2,0(r2)
    3244:	10800817 	ldw	r2,32(r2)
    3248:	10000726 	beq	r2,zero,3268 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    324c:	e0bffd17 	ldw	r2,-12(fp)
    3250:	10800017 	ldw	r2,0(r2)
    3254:	10800817 	ldw	r2,32(r2)
    3258:	e17fff17 	ldw	r5,-4(fp)
    325c:	e13ffd17 	ldw	r4,-12(fp)
    3260:	103ee83a 	callr	r2
    3264:	00000a06 	br	3290 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3268:	e0bfff17 	ldw	r2,-4(fp)
    326c:	00c80004 	movi	r3,8192
    3270:	10c00115 	stw	r3,4(r2)
      return 0;
    3274:	0005883a 	mov	r2,zero
    3278:	00000506 	br	3290 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    327c:	00031b80 	call	31b8 <alt_get_errno>
    3280:	1007883a 	mov	r3,r2
    3284:	00801444 	movi	r2,81
    3288:	18800015 	stw	r2,0(r3)
    return -1;
    328c:	00bfffc4 	movi	r2,-1
  }
}
    3290:	e037883a 	mov	sp,fp
    3294:	dfc00117 	ldw	ra,4(sp)
    3298:	df000017 	ldw	fp,0(sp)
    329c:	dec00204 	addi	sp,sp,8
    32a0:	f800283a 	ret

000032a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    32a4:	defffe04 	addi	sp,sp,-8
    32a8:	dfc00115 	stw	ra,4(sp)
    32ac:	df000015 	stw	fp,0(sp)
    32b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    32b4:	d0a00917 	ldw	r2,-32732(gp)
    32b8:	10000326 	beq	r2,zero,32c8 <alt_get_errno+0x24>
    32bc:	d0a00917 	ldw	r2,-32732(gp)
    32c0:	103ee83a 	callr	r2
    32c4:	00000106 	br	32cc <alt_get_errno+0x28>
    32c8:	d0a76f04 	addi	r2,gp,-25156
}
    32cc:	e037883a 	mov	sp,fp
    32d0:	dfc00117 	ldw	ra,4(sp)
    32d4:	df000017 	ldw	fp,0(sp)
    32d8:	dec00204 	addi	sp,sp,8
    32dc:	f800283a 	ret

000032e0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    32e0:	deffed04 	addi	sp,sp,-76
    32e4:	dfc01215 	stw	ra,72(sp)
    32e8:	df001115 	stw	fp,68(sp)
    32ec:	df001104 	addi	fp,sp,68
    32f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    32f4:	e0bfff17 	ldw	r2,-4(fp)
    32f8:	10000616 	blt	r2,zero,3314 <isatty+0x34>
    32fc:	e0bfff17 	ldw	r2,-4(fp)
    3300:	10c00324 	muli	r3,r2,12
    3304:	00800034 	movhi	r2,0
    3308:	109f2904 	addi	r2,r2,31908
    330c:	1885883a 	add	r2,r3,r2
    3310:	00000106 	br	3318 <isatty+0x38>
    3314:	0005883a 	mov	r2,zero
    3318:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    331c:	e0bfef17 	ldw	r2,-68(fp)
    3320:	10000e26 	beq	r2,zero,335c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3324:	e0bfef17 	ldw	r2,-68(fp)
    3328:	10800017 	ldw	r2,0(r2)
    332c:	10800817 	ldw	r2,32(r2)
    3330:	1000021e 	bne	r2,zero,333c <isatty+0x5c>
    {
      return 1;
    3334:	00800044 	movi	r2,1
    3338:	00000d06 	br	3370 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    333c:	e0bff004 	addi	r2,fp,-64
    3340:	100b883a 	mov	r5,r2
    3344:	e13fff17 	ldw	r4,-4(fp)
    3348:	00031f40 	call	31f4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    334c:	e0bff117 	ldw	r2,-60(fp)
    3350:	10880020 	cmpeqi	r2,r2,8192
    3354:	10803fcc 	andi	r2,r2,255
    3358:	00000506 	br	3370 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    335c:	00032a40 	call	32a4 <alt_get_errno>
    3360:	1007883a 	mov	r3,r2
    3364:	00801444 	movi	r2,81
    3368:	18800015 	stw	r2,0(r3)
    return 0;
    336c:	0005883a 	mov	r2,zero
  }
}
    3370:	e037883a 	mov	sp,fp
    3374:	dfc00117 	ldw	ra,4(sp)
    3378:	df000017 	ldw	fp,0(sp)
    337c:	dec00204 	addi	sp,sp,8
    3380:	f800283a 	ret

00003384 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3384:	defffc04 	addi	sp,sp,-16
    3388:	df000315 	stw	fp,12(sp)
    338c:	df000304 	addi	fp,sp,12
    3390:	e13ffd15 	stw	r4,-12(fp)
    3394:	e17ffe15 	stw	r5,-8(fp)
    3398:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    339c:	e0fffe17 	ldw	r3,-8(fp)
    33a0:	e0bffd17 	ldw	r2,-12(fp)
    33a4:	18800c26 	beq	r3,r2,33d8 <alt_load_section+0x54>
  {
    while( to != end )
    33a8:	00000806 	br	33cc <alt_load_section+0x48>
    {
      *to++ = *from++;
    33ac:	e0bffe17 	ldw	r2,-8(fp)
    33b0:	10c00104 	addi	r3,r2,4
    33b4:	e0fffe15 	stw	r3,-8(fp)
    33b8:	e0fffd17 	ldw	r3,-12(fp)
    33bc:	19000104 	addi	r4,r3,4
    33c0:	e13ffd15 	stw	r4,-12(fp)
    33c4:	18c00017 	ldw	r3,0(r3)
    33c8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    33cc:	e0fffe17 	ldw	r3,-8(fp)
    33d0:	e0bfff17 	ldw	r2,-4(fp)
    33d4:	18bff51e 	bne	r3,r2,33ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033ac>
    {
      *to++ = *from++;
    }
  }
}
    33d8:	0001883a 	nop
    33dc:	e037883a 	mov	sp,fp
    33e0:	df000017 	ldw	fp,0(sp)
    33e4:	dec00104 	addi	sp,sp,4
    33e8:	f800283a 	ret

000033ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    33ec:	defffe04 	addi	sp,sp,-8
    33f0:	dfc00115 	stw	ra,4(sp)
    33f4:	df000015 	stw	fp,0(sp)
    33f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    33fc:	01800074 	movhi	r6,1
    3400:	31a47204 	addi	r6,r6,-28216
    3404:	01400034 	movhi	r5,0
    3408:	295d1404 	addi	r5,r5,29776
    340c:	01000074 	movhi	r4,1
    3410:	21247204 	addi	r4,r4,-28216
    3414:	00033840 	call	3384 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3418:	01800034 	movhi	r6,0
    341c:	31809204 	addi	r6,r6,584
    3420:	01400034 	movhi	r5,0
    3424:	29400804 	addi	r5,r5,32
    3428:	01000034 	movhi	r4,0
    342c:	21000804 	addi	r4,r4,32
    3430:	00033840 	call	3384 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3434:	01800034 	movhi	r6,0
    3438:	319d1404 	addi	r6,r6,29776
    343c:	01400034 	movhi	r5,0
    3440:	295caf04 	addi	r5,r5,29372
    3444:	01000034 	movhi	r4,0
    3448:	211caf04 	addi	r4,r4,29372
    344c:	00033840 	call	3384 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3450:	00062f00 	call	62f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3454:	00065400 	call	6540 <alt_icache_flush_all>
}
    3458:	0001883a 	nop
    345c:	e037883a 	mov	sp,fp
    3460:	dfc00117 	ldw	ra,4(sp)
    3464:	df000017 	ldw	fp,0(sp)
    3468:	dec00204 	addi	sp,sp,8
    346c:	f800283a 	ret

00003470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3470:	defffe04 	addi	sp,sp,-8
    3474:	dfc00115 	stw	ra,4(sp)
    3478:	df000015 	stw	fp,0(sp)
    347c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3480:	d0a00917 	ldw	r2,-32732(gp)
    3484:	10000326 	beq	r2,zero,3494 <alt_get_errno+0x24>
    3488:	d0a00917 	ldw	r2,-32732(gp)
    348c:	103ee83a 	callr	r2
    3490:	00000106 	br	3498 <alt_get_errno+0x28>
    3494:	d0a76f04 	addi	r2,gp,-25156
}
    3498:	e037883a 	mov	sp,fp
    349c:	dfc00117 	ldw	ra,4(sp)
    34a0:	df000017 	ldw	fp,0(sp)
    34a4:	dec00204 	addi	sp,sp,8
    34a8:	f800283a 	ret

000034ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    34ac:	defff904 	addi	sp,sp,-28
    34b0:	dfc00615 	stw	ra,24(sp)
    34b4:	df000515 	stw	fp,20(sp)
    34b8:	df000504 	addi	fp,sp,20
    34bc:	e13ffd15 	stw	r4,-12(fp)
    34c0:	e17ffe15 	stw	r5,-8(fp)
    34c4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    34c8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    34cc:	e0bffd17 	ldw	r2,-12(fp)
    34d0:	10000616 	blt	r2,zero,34ec <lseek+0x40>
    34d4:	e0bffd17 	ldw	r2,-12(fp)
    34d8:	10c00324 	muli	r3,r2,12
    34dc:	00800034 	movhi	r2,0
    34e0:	109f2904 	addi	r2,r2,31908
    34e4:	1885883a 	add	r2,r3,r2
    34e8:	00000106 	br	34f0 <lseek+0x44>
    34ec:	0005883a 	mov	r2,zero
    34f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    34f4:	e0bffc17 	ldw	r2,-16(fp)
    34f8:	10001026 	beq	r2,zero,353c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    34fc:	e0bffc17 	ldw	r2,-16(fp)
    3500:	10800017 	ldw	r2,0(r2)
    3504:	10800717 	ldw	r2,28(r2)
    3508:	10000926 	beq	r2,zero,3530 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    350c:	e0bffc17 	ldw	r2,-16(fp)
    3510:	10800017 	ldw	r2,0(r2)
    3514:	10800717 	ldw	r2,28(r2)
    3518:	e1bfff17 	ldw	r6,-4(fp)
    351c:	e17ffe17 	ldw	r5,-8(fp)
    3520:	e13ffc17 	ldw	r4,-16(fp)
    3524:	103ee83a 	callr	r2
    3528:	e0bffb15 	stw	r2,-20(fp)
    352c:	00000506 	br	3544 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3530:	00bfde84 	movi	r2,-134
    3534:	e0bffb15 	stw	r2,-20(fp)
    3538:	00000206 	br	3544 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    353c:	00bfebc4 	movi	r2,-81
    3540:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    3544:	e0bffb17 	ldw	r2,-20(fp)
    3548:	1000070e 	bge	r2,zero,3568 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    354c:	00034700 	call	3470 <alt_get_errno>
    3550:	1007883a 	mov	r3,r2
    3554:	e0bffb17 	ldw	r2,-20(fp)
    3558:	0085c83a 	sub	r2,zero,r2
    355c:	18800015 	stw	r2,0(r3)
    rc = -1;
    3560:	00bfffc4 	movi	r2,-1
    3564:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3568:	e0bffb17 	ldw	r2,-20(fp)
}
    356c:	e037883a 	mov	sp,fp
    3570:	dfc00117 	ldw	ra,4(sp)
    3574:	df000017 	ldw	fp,0(sp)
    3578:	dec00204 	addi	sp,sp,8
    357c:	f800283a 	ret

00003580 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3580:	defffd04 	addi	sp,sp,-12
    3584:	dfc00215 	stw	ra,8(sp)
    3588:	df000115 	stw	fp,4(sp)
    358c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3590:	0009883a 	mov	r4,zero
    3594:	00039f80 	call	39f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3598:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    359c:	0003a300 	call	3a30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    35a0:	01800034 	movhi	r6,0
    35a4:	319cb904 	addi	r6,r6,29412
    35a8:	01400034 	movhi	r5,0
    35ac:	295cb904 	addi	r5,r5,29412
    35b0:	01000034 	movhi	r4,0
    35b4:	211cb904 	addi	r4,r4,29412
    35b8:	00066380 	call	6638 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    35bc:	00063f00 	call	63f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    35c0:	01000034 	movhi	r4,0
    35c4:	21191404 	addi	r4,r4,25680
    35c8:	0006f280 	call	6f28 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    35cc:	d0a77017 	ldw	r2,-25152(gp)
    35d0:	d0e77117 	ldw	r3,-25148(gp)
    35d4:	d1277217 	ldw	r4,-25144(gp)
    35d8:	200d883a 	mov	r6,r4
    35dc:	180b883a 	mov	r5,r3
    35e0:	1009883a 	mov	r4,r2
    35e4:	00002840 	call	284 <main>
    35e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    35ec:	01000044 	movi	r4,1
    35f0:	00030bc0 	call	30bc <close>
  exit (result);
    35f4:	e13fff17 	ldw	r4,-4(fp)
    35f8:	0006f3c0 	call	6f3c <exit>

000035fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    35fc:	defffe04 	addi	sp,sp,-8
    3600:	df000115 	stw	fp,4(sp)
    3604:	df000104 	addi	fp,sp,4
    3608:	e13fff15 	stw	r4,-4(fp)
}
    360c:	0001883a 	nop
    3610:	e037883a 	mov	sp,fp
    3614:	df000017 	ldw	fp,0(sp)
    3618:	dec00104 	addi	sp,sp,4
    361c:	f800283a 	ret

00003620 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3620:	defffe04 	addi	sp,sp,-8
    3624:	df000115 	stw	fp,4(sp)
    3628:	df000104 	addi	fp,sp,4
    362c:	e13fff15 	stw	r4,-4(fp)
}
    3630:	0001883a 	nop
    3634:	e037883a 	mov	sp,fp
    3638:	df000017 	ldw	fp,0(sp)
    363c:	dec00104 	addi	sp,sp,4
    3640:	f800283a 	ret

00003644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3644:	defffe04 	addi	sp,sp,-8
    3648:	dfc00115 	stw	ra,4(sp)
    364c:	df000015 	stw	fp,0(sp)
    3650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3654:	d0a00917 	ldw	r2,-32732(gp)
    3658:	10000326 	beq	r2,zero,3668 <alt_get_errno+0x24>
    365c:	d0a00917 	ldw	r2,-32732(gp)
    3660:	103ee83a 	callr	r2
    3664:	00000106 	br	366c <alt_get_errno+0x28>
    3668:	d0a76f04 	addi	r2,gp,-25156
}
    366c:	e037883a 	mov	sp,fp
    3670:	dfc00117 	ldw	ra,4(sp)
    3674:	df000017 	ldw	fp,0(sp)
    3678:	dec00204 	addi	sp,sp,8
    367c:	f800283a 	ret

00003680 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3680:	defff904 	addi	sp,sp,-28
    3684:	dfc00615 	stw	ra,24(sp)
    3688:	df000515 	stw	fp,20(sp)
    368c:	df000504 	addi	fp,sp,20
    3690:	e13ffd15 	stw	r4,-12(fp)
    3694:	e17ffe15 	stw	r5,-8(fp)
    3698:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    369c:	e0bffd17 	ldw	r2,-12(fp)
    36a0:	10000616 	blt	r2,zero,36bc <read+0x3c>
    36a4:	e0bffd17 	ldw	r2,-12(fp)
    36a8:	10c00324 	muli	r3,r2,12
    36ac:	00800034 	movhi	r2,0
    36b0:	109f2904 	addi	r2,r2,31908
    36b4:	1885883a 	add	r2,r3,r2
    36b8:	00000106 	br	36c0 <read+0x40>
    36bc:	0005883a 	mov	r2,zero
    36c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    36c4:	e0bffb17 	ldw	r2,-20(fp)
    36c8:	10002226 	beq	r2,zero,3754 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    36cc:	e0bffb17 	ldw	r2,-20(fp)
    36d0:	10800217 	ldw	r2,8(r2)
    36d4:	108000cc 	andi	r2,r2,3
    36d8:	10800060 	cmpeqi	r2,r2,1
    36dc:	1000181e 	bne	r2,zero,3740 <read+0xc0>
        (fd->dev->read))
    36e0:	e0bffb17 	ldw	r2,-20(fp)
    36e4:	10800017 	ldw	r2,0(r2)
    36e8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    36ec:	10001426 	beq	r2,zero,3740 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    36f0:	e0bffb17 	ldw	r2,-20(fp)
    36f4:	10800017 	ldw	r2,0(r2)
    36f8:	10800517 	ldw	r2,20(r2)
    36fc:	e0ffff17 	ldw	r3,-4(fp)
    3700:	180d883a 	mov	r6,r3
    3704:	e17ffe17 	ldw	r5,-8(fp)
    3708:	e13ffb17 	ldw	r4,-20(fp)
    370c:	103ee83a 	callr	r2
    3710:	e0bffc15 	stw	r2,-16(fp)
    3714:	e0bffc17 	ldw	r2,-16(fp)
    3718:	1000070e 	bge	r2,zero,3738 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    371c:	00036440 	call	3644 <alt_get_errno>
    3720:	1007883a 	mov	r3,r2
    3724:	e0bffc17 	ldw	r2,-16(fp)
    3728:	0085c83a 	sub	r2,zero,r2
    372c:	18800015 	stw	r2,0(r3)
          return -1;
    3730:	00bfffc4 	movi	r2,-1
    3734:	00000c06 	br	3768 <read+0xe8>
        }
        return rval;
    3738:	e0bffc17 	ldw	r2,-16(fp)
    373c:	00000a06 	br	3768 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3740:	00036440 	call	3644 <alt_get_errno>
    3744:	1007883a 	mov	r3,r2
    3748:	00800344 	movi	r2,13
    374c:	18800015 	stw	r2,0(r3)
    3750:	00000406 	br	3764 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3754:	00036440 	call	3644 <alt_get_errno>
    3758:	1007883a 	mov	r3,r2
    375c:	00801444 	movi	r2,81
    3760:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3764:	00bfffc4 	movi	r2,-1
}
    3768:	e037883a 	mov	sp,fp
    376c:	dfc00117 	ldw	ra,4(sp)
    3770:	df000017 	ldw	fp,0(sp)
    3774:	dec00204 	addi	sp,sp,8
    3778:	f800283a 	ret

0000377c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    377c:	defffe04 	addi	sp,sp,-8
    3780:	df000115 	stw	fp,4(sp)
    3784:	df000104 	addi	fp,sp,4
    3788:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    378c:	e0bfff17 	ldw	r2,-4(fp)
    3790:	108000d0 	cmplti	r2,r2,3
    3794:	10000d1e 	bne	r2,zero,37cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3798:	00800034 	movhi	r2,0
    379c:	109f2904 	addi	r2,r2,31908
    37a0:	e0ffff17 	ldw	r3,-4(fp)
    37a4:	18c00324 	muli	r3,r3,12
    37a8:	10c5883a 	add	r2,r2,r3
    37ac:	10800204 	addi	r2,r2,8
    37b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    37b4:	00800034 	movhi	r2,0
    37b8:	109f2904 	addi	r2,r2,31908
    37bc:	e0ffff17 	ldw	r3,-4(fp)
    37c0:	18c00324 	muli	r3,r3,12
    37c4:	10c5883a 	add	r2,r2,r3
    37c8:	10000015 	stw	zero,0(r2)
  }
}
    37cc:	0001883a 	nop
    37d0:	e037883a 	mov	sp,fp
    37d4:	df000017 	ldw	fp,0(sp)
    37d8:	dec00104 	addi	sp,sp,4
    37dc:	f800283a 	ret

000037e0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    37e0:	defff904 	addi	sp,sp,-28
    37e4:	df000615 	stw	fp,24(sp)
    37e8:	df000604 	addi	fp,sp,24
    37ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    37f0:	0005303a 	rdctl	r2,status
    37f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    37f8:	e0fffe17 	ldw	r3,-8(fp)
    37fc:	00bfff84 	movi	r2,-2
    3800:	1884703a 	and	r2,r3,r2
    3804:	1001703a 	wrctl	status,r2
  
  return context;
    3808:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    380c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3810:	d0a00a17 	ldw	r2,-32728(gp)
    3814:	10c000c4 	addi	r3,r2,3
    3818:	00bfff04 	movi	r2,-4
    381c:	1884703a 	and	r2,r3,r2
    3820:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3824:	d0e00a17 	ldw	r3,-32728(gp)
    3828:	e0bfff17 	ldw	r2,-4(fp)
    382c:	1887883a 	add	r3,r3,r2
    3830:	00810034 	movhi	r2,1024
    3834:	10800004 	addi	r2,r2,0
    3838:	10c0062e 	bgeu	r2,r3,3854 <sbrk+0x74>
    383c:	e0bffb17 	ldw	r2,-20(fp)
    3840:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3844:	e0bffa17 	ldw	r2,-24(fp)
    3848:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    384c:	00bfffc4 	movi	r2,-1
    3850:	00000b06 	br	3880 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3854:	d0a00a17 	ldw	r2,-32728(gp)
    3858:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    385c:	d0e00a17 	ldw	r3,-32728(gp)
    3860:	e0bfff17 	ldw	r2,-4(fp)
    3864:	1885883a 	add	r2,r3,r2
    3868:	d0a00a15 	stw	r2,-32728(gp)
    386c:	e0bffb17 	ldw	r2,-20(fp)
    3870:	e0bffc15 	stw	r2,-16(fp)
    3874:	e0bffc17 	ldw	r2,-16(fp)
    3878:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    387c:	e0bffd17 	ldw	r2,-12(fp)
} 
    3880:	e037883a 	mov	sp,fp
    3884:	df000017 	ldw	fp,0(sp)
    3888:	dec00104 	addi	sp,sp,4
    388c:	f800283a 	ret

00003890 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3890:	defffe04 	addi	sp,sp,-8
    3894:	dfc00115 	stw	ra,4(sp)
    3898:	df000015 	stw	fp,0(sp)
    389c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    38a0:	d0a00917 	ldw	r2,-32732(gp)
    38a4:	10000326 	beq	r2,zero,38b4 <alt_get_errno+0x24>
    38a8:	d0a00917 	ldw	r2,-32732(gp)
    38ac:	103ee83a 	callr	r2
    38b0:	00000106 	br	38b8 <alt_get_errno+0x28>
    38b4:	d0a76f04 	addi	r2,gp,-25156
}
    38b8:	e037883a 	mov	sp,fp
    38bc:	dfc00117 	ldw	ra,4(sp)
    38c0:	df000017 	ldw	fp,0(sp)
    38c4:	dec00204 	addi	sp,sp,8
    38c8:	f800283a 	ret

000038cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    38cc:	defff904 	addi	sp,sp,-28
    38d0:	dfc00615 	stw	ra,24(sp)
    38d4:	df000515 	stw	fp,20(sp)
    38d8:	df000504 	addi	fp,sp,20
    38dc:	e13ffd15 	stw	r4,-12(fp)
    38e0:	e17ffe15 	stw	r5,-8(fp)
    38e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    38e8:	e0bffd17 	ldw	r2,-12(fp)
    38ec:	10000616 	blt	r2,zero,3908 <write+0x3c>
    38f0:	e0bffd17 	ldw	r2,-12(fp)
    38f4:	10c00324 	muli	r3,r2,12
    38f8:	00800034 	movhi	r2,0
    38fc:	109f2904 	addi	r2,r2,31908
    3900:	1885883a 	add	r2,r3,r2
    3904:	00000106 	br	390c <write+0x40>
    3908:	0005883a 	mov	r2,zero
    390c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3910:	e0bffb17 	ldw	r2,-20(fp)
    3914:	10002126 	beq	r2,zero,399c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3918:	e0bffb17 	ldw	r2,-20(fp)
    391c:	10800217 	ldw	r2,8(r2)
    3920:	108000cc 	andi	r2,r2,3
    3924:	10001826 	beq	r2,zero,3988 <write+0xbc>
    3928:	e0bffb17 	ldw	r2,-20(fp)
    392c:	10800017 	ldw	r2,0(r2)
    3930:	10800617 	ldw	r2,24(r2)
    3934:	10001426 	beq	r2,zero,3988 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3938:	e0bffb17 	ldw	r2,-20(fp)
    393c:	10800017 	ldw	r2,0(r2)
    3940:	10800617 	ldw	r2,24(r2)
    3944:	e0ffff17 	ldw	r3,-4(fp)
    3948:	180d883a 	mov	r6,r3
    394c:	e17ffe17 	ldw	r5,-8(fp)
    3950:	e13ffb17 	ldw	r4,-20(fp)
    3954:	103ee83a 	callr	r2
    3958:	e0bffc15 	stw	r2,-16(fp)
    395c:	e0bffc17 	ldw	r2,-16(fp)
    3960:	1000070e 	bge	r2,zero,3980 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    3964:	00038900 	call	3890 <alt_get_errno>
    3968:	1007883a 	mov	r3,r2
    396c:	e0bffc17 	ldw	r2,-16(fp)
    3970:	0085c83a 	sub	r2,zero,r2
    3974:	18800015 	stw	r2,0(r3)
        return -1;
    3978:	00bfffc4 	movi	r2,-1
    397c:	00000c06 	br	39b0 <write+0xe4>
      }
      return rval;
    3980:	e0bffc17 	ldw	r2,-16(fp)
    3984:	00000a06 	br	39b0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3988:	00038900 	call	3890 <alt_get_errno>
    398c:	1007883a 	mov	r3,r2
    3990:	00800344 	movi	r2,13
    3994:	18800015 	stw	r2,0(r3)
    3998:	00000406 	br	39ac <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    399c:	00038900 	call	3890 <alt_get_errno>
    39a0:	1007883a 	mov	r3,r2
    39a4:	00801444 	movi	r2,81
    39a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    39ac:	00bfffc4 	movi	r2,-1
}
    39b0:	e037883a 	mov	sp,fp
    39b4:	dfc00117 	ldw	ra,4(sp)
    39b8:	df000017 	ldw	fp,0(sp)
    39bc:	dec00204 	addi	sp,sp,8
    39c0:	f800283a 	ret

000039c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    39c4:	defffd04 	addi	sp,sp,-12
    39c8:	dfc00215 	stw	ra,8(sp)
    39cc:	df000115 	stw	fp,4(sp)
    39d0:	df000104 	addi	fp,sp,4
    39d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    39d8:	d1600604 	addi	r5,gp,-32744
    39dc:	e13fff17 	ldw	r4,-4(fp)
    39e0:	000634c0 	call	634c <alt_dev_llist_insert>
}
    39e4:	e037883a 	mov	sp,fp
    39e8:	dfc00117 	ldw	ra,4(sp)
    39ec:	df000017 	ldw	fp,0(sp)
    39f0:	dec00204 	addi	sp,sp,8
    39f4:	f800283a 	ret

000039f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    39f8:	defffd04 	addi	sp,sp,-12
    39fc:	dfc00215 	stw	ra,8(sp)
    3a00:	df000115 	stw	fp,4(sp)
    3a04:	df000104 	addi	fp,sp,4
    3a08:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    3a0c:	0006c2c0 	call	6c2c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3a10:	00800044 	movi	r2,1
    3a14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3a18:	0001883a 	nop
    3a1c:	e037883a 	mov	sp,fp
    3a20:	dfc00117 	ldw	ra,4(sp)
    3a24:	df000017 	ldw	fp,0(sp)
    3a28:	dec00204 	addi	sp,sp,8
    3a2c:	f800283a 	ret

00003a30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3a30:	defffb04 	addi	sp,sp,-20
    3a34:	dfc00415 	stw	ra,16(sp)
    3a38:	df000315 	stw	fp,12(sp)
    3a3c:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    3a40:	01c00204 	movi	r7,8
    3a44:	000d883a 	mov	r6,zero
    3a48:	000b883a 	mov	r5,zero
    3a4c:	013fc834 	movhi	r4,65312
    3a50:	21080004 	addi	r4,r4,8192
    3a54:	0004e900 	call	4e90 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    3a58:	00bfc834 	movhi	r2,65312
    3a5c:	10880804 	addi	r2,r2,8224
    3a60:	d0a77315 	stw	r2,-25140(gp)
    3a64:	0080bef4 	movhi	r2,763
    3a68:	10bc2004 	addi	r2,r2,-3968
    3a6c:	d0a77415 	stw	r2,-25136(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    3a70:	01800204 	movi	r6,8
    3a74:	000b883a 	mov	r5,zero
    3a78:	01000034 	movhi	r4,0
    3a7c:	211f9304 	addi	r4,r4,32332
    3a80:	00045180 	call	4518 <altera_avalon_jtag_uart_init>
    3a84:	01000034 	movhi	r4,0
    3a88:	211f8904 	addi	r4,r4,32292
    3a8c:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    3a90:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    3a94:	01000074 	movhi	r4,1
    3a98:	2123a104 	addi	r4,r4,-29052
    3a9c:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    3aa0:	01000074 	movhi	r4,1
    3aa4:	2123ad04 	addi	r4,r4,-29004
    3aa8:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    3aac:	01000074 	movhi	r4,1
    3ab0:	2123b904 	addi	r4,r4,-28956
    3ab4:	0004fb80 	call	4fb8 <alt_up_character_lcd_init>
    3ab8:	01000074 	movhi	r4,1
    3abc:	2123b904 	addi	r4,r4,-28956
    3ac0:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    3ac4:	01000074 	movhi	r4,1
    3ac8:	2123c404 	addi	r4,r4,-28912
    3acc:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    3ad0:	01000074 	movhi	r4,1
    3ad4:	2123cf04 	addi	r4,r4,-28868
    3ad8:	00058ac0 	call	58ac <alt_up_ps2_init>
    3adc:	01000074 	movhi	r4,1
    3ae0:	2123cf04 	addi	r4,r4,-28868
    3ae4:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    3ae8:	01000074 	movhi	r4,1
    3aec:	2123dd04 	addi	r4,r4,-28812
    3af0:	00058ac0 	call	58ac <alt_up_ps2_init>
    3af4:	01000074 	movhi	r4,1
    3af8:	2123dd04 	addi	r4,r4,-28812
    3afc:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    3b00:	01000074 	movhi	r4,1
    3b04:	2123eb04 	addi	r4,r4,-28756
    3b08:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    3b0c:	01000074 	movhi	r4,1
    3b10:	2123f604 	addi	r4,r4,-28712
    3b14:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    3b18:	00800074 	movhi	r2,1
    3b1c:	10a40304 	addi	r2,r2,-28660
    3b20:	10800a17 	ldw	r2,40(r2)
    3b24:	10800017 	ldw	r2,0(r2)
    3b28:	1007883a 	mov	r3,r2
    3b2c:	00800074 	movhi	r2,1
    3b30:	10a40304 	addi	r2,r2,-28660
    3b34:	10c00b15 	stw	r3,44(r2)
    3b38:	00800074 	movhi	r2,1
    3b3c:	10a40304 	addi	r2,r2,-28660
    3b40:	10800a17 	ldw	r2,40(r2)
    3b44:	10800104 	addi	r2,r2,4
    3b48:	10800017 	ldw	r2,0(r2)
    3b4c:	1007883a 	mov	r3,r2
    3b50:	00800074 	movhi	r2,1
    3b54:	10a40304 	addi	r2,r2,-28660
    3b58:	10c00c15 	stw	r3,48(r2)
    3b5c:	00800074 	movhi	r2,1
    3b60:	10a40304 	addi	r2,r2,-28660
    3b64:	10800a17 	ldw	r2,40(r2)
    3b68:	10800204 	addi	r2,r2,8
    3b6c:	10800017 	ldw	r2,0(r2)
    3b70:	10ffffcc 	andi	r3,r2,65535
    3b74:	00800074 	movhi	r2,1
    3b78:	10a40304 	addi	r2,r2,-28660
    3b7c:	10c01115 	stw	r3,68(r2)
    3b80:	00800074 	movhi	r2,1
    3b84:	10a40304 	addi	r2,r2,-28660
    3b88:	10800a17 	ldw	r2,40(r2)
    3b8c:	10800204 	addi	r2,r2,8
    3b90:	10800017 	ldw	r2,0(r2)
    3b94:	1006d43a 	srli	r3,r2,16
    3b98:	00800074 	movhi	r2,1
    3b9c:	10a40304 	addi	r2,r2,-28660
    3ba0:	10c01215 	stw	r3,72(r2)
    3ba4:	00800074 	movhi	r2,1
    3ba8:	10a40304 	addi	r2,r2,-28660
    3bac:	10800a17 	ldw	r2,40(r2)
    3bb0:	10800304 	addi	r2,r2,12
    3bb4:	10800017 	ldw	r2,0(r2)
    3bb8:	1005d07a 	srai	r2,r2,1
    3bbc:	10c0004c 	andi	r3,r2,1
    3bc0:	00800074 	movhi	r2,1
    3bc4:	10a40304 	addi	r2,r2,-28660
    3bc8:	10c00d15 	stw	r3,52(r2)
    3bcc:	00800074 	movhi	r2,1
    3bd0:	10a40304 	addi	r2,r2,-28660
    3bd4:	10800a17 	ldw	r2,40(r2)
    3bd8:	10800304 	addi	r2,r2,12
    3bdc:	10800017 	ldw	r2,0(r2)
    3be0:	1005d23a 	srai	r2,r2,8
    3be4:	108003cc 	andi	r2,r2,15
    3be8:	10800044 	addi	r2,r2,1
    3bec:	1007883a 	mov	r3,r2
    3bf0:	00800074 	movhi	r2,1
    3bf4:	10a40304 	addi	r2,r2,-28660
    3bf8:	10c00e15 	stw	r3,56(r2)
    3bfc:	00800074 	movhi	r2,1
    3c00:	10a40304 	addi	r2,r2,-28660
    3c04:	10800a17 	ldw	r2,40(r2)
    3c08:	10800304 	addi	r2,r2,12
    3c0c:	10800017 	ldw	r2,0(r2)
    3c10:	1005d1ba 	srai	r2,r2,6
    3c14:	108000cc 	andi	r2,r2,3
    3c18:	10800044 	addi	r2,r2,1
    3c1c:	1007883a 	mov	r3,r2
    3c20:	00800074 	movhi	r2,1
    3c24:	10a40304 	addi	r2,r2,-28660
    3c28:	10c00f15 	stw	r3,60(r2)
    3c2c:	00800074 	movhi	r2,1
    3c30:	10a40304 	addi	r2,r2,-28660
    3c34:	10800e17 	ldw	r2,56(r2)
    3c38:	1007883a 	mov	r3,r2
    3c3c:	00800074 	movhi	r2,1
    3c40:	10a40304 	addi	r2,r2,-28660
    3c44:	10800f17 	ldw	r2,60(r2)
    3c48:	1885383a 	mul	r2,r3,r2
    3c4c:	e0bffd05 	stb	r2,-12(fp)
    3c50:	e0bffd03 	ldbu	r2,-12(fp)
    3c54:	10800268 	cmpgeui	r2,r2,9
    3c58:	1000051e 	bne	r2,zero,3c70 <alt_sys_init+0x240>
    3c5c:	00800074 	movhi	r2,1
    3c60:	10a40304 	addi	r2,r2,-28660
    3c64:	00c00044 	movi	r3,1
    3c68:	10c01015 	stw	r3,64(r2)
    3c6c:	00000c06 	br	3ca0 <alt_sys_init+0x270>
    3c70:	e0bffd03 	ldbu	r2,-12(fp)
    3c74:	10800468 	cmpgeui	r2,r2,17
    3c78:	1000051e 	bne	r2,zero,3c90 <alt_sys_init+0x260>
    3c7c:	00800074 	movhi	r2,1
    3c80:	10a40304 	addi	r2,r2,-28660
    3c84:	00c00084 	movi	r3,2
    3c88:	10c01015 	stw	r3,64(r2)
    3c8c:	00000406 	br	3ca0 <alt_sys_init+0x270>
    3c90:	00800074 	movhi	r2,1
    3c94:	10a40304 	addi	r2,r2,-28660
    3c98:	00c00104 	movi	r3,4
    3c9c:	10c01015 	stw	r3,64(r2)
    3ca0:	00800074 	movhi	r2,1
    3ca4:	10a40304 	addi	r2,r2,-28660
    3ca8:	10800a17 	ldw	r2,40(r2)
    3cac:	10800304 	addi	r2,r2,12
    3cb0:	10800017 	ldw	r2,0(r2)
    3cb4:	1005d43a 	srai	r2,r2,16
    3cb8:	e0bffd45 	stb	r2,-11(fp)
    3cbc:	00800074 	movhi	r2,1
    3cc0:	10a40304 	addi	r2,r2,-28660
    3cc4:	10800a17 	ldw	r2,40(r2)
    3cc8:	10800304 	addi	r2,r2,12
    3ccc:	10800017 	ldw	r2,0(r2)
    3cd0:	1004d63a 	srli	r2,r2,24
    3cd4:	e0bffd85 	stb	r2,-10(fp)
    3cd8:	00800074 	movhi	r2,1
    3cdc:	10a40304 	addi	r2,r2,-28660
    3ce0:	10801017 	ldw	r2,64(r2)
    3ce4:	10800058 	cmpnei	r2,r2,1
    3ce8:	1000041e 	bne	r2,zero,3cfc <alt_sys_init+0x2cc>
    3cec:	00800074 	movhi	r2,1
    3cf0:	10a40304 	addi	r2,r2,-28660
    3cf4:	10001315 	stw	zero,76(r2)
    3cf8:	00000e06 	br	3d34 <alt_sys_init+0x304>
    3cfc:	00800074 	movhi	r2,1
    3d00:	10a40304 	addi	r2,r2,-28660
    3d04:	10801017 	ldw	r2,64(r2)
    3d08:	10800098 	cmpnei	r2,r2,2
    3d0c:	1000051e 	bne	r2,zero,3d24 <alt_sys_init+0x2f4>
    3d10:	00800074 	movhi	r2,1
    3d14:	10a40304 	addi	r2,r2,-28660
    3d18:	00c00044 	movi	r3,1
    3d1c:	10c01315 	stw	r3,76(r2)
    3d20:	00000406 	br	3d34 <alt_sys_init+0x304>
    3d24:	00800074 	movhi	r2,1
    3d28:	10a40304 	addi	r2,r2,-28660
    3d2c:	00c00084 	movi	r3,2
    3d30:	10c01315 	stw	r3,76(r2)
    3d34:	e0bffd43 	ldbu	r2,-11(fp)
    3d38:	00c00804 	movi	r3,32
    3d3c:	1885c83a 	sub	r2,r3,r2
    3d40:	00ffffc4 	movi	r3,-1
    3d44:	1886d83a 	srl	r3,r3,r2
    3d48:	00800074 	movhi	r2,1
    3d4c:	10a40304 	addi	r2,r2,-28660
    3d50:	10c01415 	stw	r3,80(r2)
    3d54:	e0fffd43 	ldbu	r3,-11(fp)
    3d58:	00800074 	movhi	r2,1
    3d5c:	10a40304 	addi	r2,r2,-28660
    3d60:	10801317 	ldw	r2,76(r2)
    3d64:	1887883a 	add	r3,r3,r2
    3d68:	00800074 	movhi	r2,1
    3d6c:	10a40304 	addi	r2,r2,-28660
    3d70:	10c01515 	stw	r3,84(r2)
    3d74:	e0bffd83 	ldbu	r2,-10(fp)
    3d78:	00c00804 	movi	r3,32
    3d7c:	1885c83a 	sub	r2,r3,r2
    3d80:	00ffffc4 	movi	r3,-1
    3d84:	1886d83a 	srl	r3,r3,r2
    3d88:	00800074 	movhi	r2,1
    3d8c:	10a40304 	addi	r2,r2,-28660
    3d90:	10c01615 	stw	r3,88(r2)
    3d94:	01000074 	movhi	r4,1
    3d98:	21240304 	addi	r4,r4,-28660
    3d9c:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    3da0:	00800074 	movhi	r2,1
    3da4:	10a41a04 	addi	r2,r2,-28568
    3da8:	10800a17 	ldw	r2,40(r2)
    3dac:	10800017 	ldw	r2,0(r2)
    3db0:	1007883a 	mov	r3,r2
    3db4:	00800074 	movhi	r2,1
    3db8:	10a41a04 	addi	r2,r2,-28568
    3dbc:	10c00b15 	stw	r3,44(r2)
    3dc0:	00800074 	movhi	r2,1
    3dc4:	10a41a04 	addi	r2,r2,-28568
    3dc8:	10800a17 	ldw	r2,40(r2)
    3dcc:	10800104 	addi	r2,r2,4
    3dd0:	10800017 	ldw	r2,0(r2)
    3dd4:	1007883a 	mov	r3,r2
    3dd8:	00800074 	movhi	r2,1
    3ddc:	10a41a04 	addi	r2,r2,-28568
    3de0:	10c00c15 	stw	r3,48(r2)
    3de4:	00800074 	movhi	r2,1
    3de8:	10a41a04 	addi	r2,r2,-28568
    3dec:	10800a17 	ldw	r2,40(r2)
    3df0:	10800204 	addi	r2,r2,8
    3df4:	10800017 	ldw	r2,0(r2)
    3df8:	10ffffcc 	andi	r3,r2,65535
    3dfc:	00800074 	movhi	r2,1
    3e00:	10a41a04 	addi	r2,r2,-28568
    3e04:	10c01115 	stw	r3,68(r2)
    3e08:	00800074 	movhi	r2,1
    3e0c:	10a41a04 	addi	r2,r2,-28568
    3e10:	10800a17 	ldw	r2,40(r2)
    3e14:	10800204 	addi	r2,r2,8
    3e18:	10800017 	ldw	r2,0(r2)
    3e1c:	1006d43a 	srli	r3,r2,16
    3e20:	00800074 	movhi	r2,1
    3e24:	10a41a04 	addi	r2,r2,-28568
    3e28:	10c01215 	stw	r3,72(r2)
    3e2c:	00800074 	movhi	r2,1
    3e30:	10a41a04 	addi	r2,r2,-28568
    3e34:	10800a17 	ldw	r2,40(r2)
    3e38:	10800304 	addi	r2,r2,12
    3e3c:	10800017 	ldw	r2,0(r2)
    3e40:	1005d07a 	srai	r2,r2,1
    3e44:	10c0004c 	andi	r3,r2,1
    3e48:	00800074 	movhi	r2,1
    3e4c:	10a41a04 	addi	r2,r2,-28568
    3e50:	10c00d15 	stw	r3,52(r2)
    3e54:	00800074 	movhi	r2,1
    3e58:	10a41a04 	addi	r2,r2,-28568
    3e5c:	10800a17 	ldw	r2,40(r2)
    3e60:	10800304 	addi	r2,r2,12
    3e64:	10800017 	ldw	r2,0(r2)
    3e68:	1005d23a 	srai	r2,r2,8
    3e6c:	108003cc 	andi	r2,r2,15
    3e70:	10800044 	addi	r2,r2,1
    3e74:	1007883a 	mov	r3,r2
    3e78:	00800074 	movhi	r2,1
    3e7c:	10a41a04 	addi	r2,r2,-28568
    3e80:	10c00e15 	stw	r3,56(r2)
    3e84:	00800074 	movhi	r2,1
    3e88:	10a41a04 	addi	r2,r2,-28568
    3e8c:	10800a17 	ldw	r2,40(r2)
    3e90:	10800304 	addi	r2,r2,12
    3e94:	10800017 	ldw	r2,0(r2)
    3e98:	1005d1ba 	srai	r2,r2,6
    3e9c:	108000cc 	andi	r2,r2,3
    3ea0:	10800044 	addi	r2,r2,1
    3ea4:	1007883a 	mov	r3,r2
    3ea8:	00800074 	movhi	r2,1
    3eac:	10a41a04 	addi	r2,r2,-28568
    3eb0:	10c00f15 	stw	r3,60(r2)
    3eb4:	00800074 	movhi	r2,1
    3eb8:	10a41a04 	addi	r2,r2,-28568
    3ebc:	10800e17 	ldw	r2,56(r2)
    3ec0:	1007883a 	mov	r3,r2
    3ec4:	00800074 	movhi	r2,1
    3ec8:	10a41a04 	addi	r2,r2,-28568
    3ecc:	10800f17 	ldw	r2,60(r2)
    3ed0:	1885383a 	mul	r2,r3,r2
    3ed4:	e0bffdc5 	stb	r2,-9(fp)
    3ed8:	e0bffdc3 	ldbu	r2,-9(fp)
    3edc:	10800268 	cmpgeui	r2,r2,9
    3ee0:	1000051e 	bne	r2,zero,3ef8 <alt_sys_init+0x4c8>
    3ee4:	00800074 	movhi	r2,1
    3ee8:	10a41a04 	addi	r2,r2,-28568
    3eec:	00c00044 	movi	r3,1
    3ef0:	10c01015 	stw	r3,64(r2)
    3ef4:	00000c06 	br	3f28 <alt_sys_init+0x4f8>
    3ef8:	e0bffdc3 	ldbu	r2,-9(fp)
    3efc:	10800468 	cmpgeui	r2,r2,17
    3f00:	1000051e 	bne	r2,zero,3f18 <alt_sys_init+0x4e8>
    3f04:	00800074 	movhi	r2,1
    3f08:	10a41a04 	addi	r2,r2,-28568
    3f0c:	00c00084 	movi	r3,2
    3f10:	10c01015 	stw	r3,64(r2)
    3f14:	00000406 	br	3f28 <alt_sys_init+0x4f8>
    3f18:	00800074 	movhi	r2,1
    3f1c:	10a41a04 	addi	r2,r2,-28568
    3f20:	00c00104 	movi	r3,4
    3f24:	10c01015 	stw	r3,64(r2)
    3f28:	00800074 	movhi	r2,1
    3f2c:	10a41a04 	addi	r2,r2,-28568
    3f30:	10800a17 	ldw	r2,40(r2)
    3f34:	10800304 	addi	r2,r2,12
    3f38:	10800017 	ldw	r2,0(r2)
    3f3c:	1005d43a 	srai	r2,r2,16
    3f40:	e0bffe05 	stb	r2,-8(fp)
    3f44:	00800074 	movhi	r2,1
    3f48:	10a41a04 	addi	r2,r2,-28568
    3f4c:	10800a17 	ldw	r2,40(r2)
    3f50:	10800304 	addi	r2,r2,12
    3f54:	10800017 	ldw	r2,0(r2)
    3f58:	1004d63a 	srli	r2,r2,24
    3f5c:	e0bffe45 	stb	r2,-7(fp)
    3f60:	00800074 	movhi	r2,1
    3f64:	10a41a04 	addi	r2,r2,-28568
    3f68:	10801017 	ldw	r2,64(r2)
    3f6c:	10800058 	cmpnei	r2,r2,1
    3f70:	1000041e 	bne	r2,zero,3f84 <alt_sys_init+0x554>
    3f74:	00800074 	movhi	r2,1
    3f78:	10a41a04 	addi	r2,r2,-28568
    3f7c:	10001315 	stw	zero,76(r2)
    3f80:	00000e06 	br	3fbc <alt_sys_init+0x58c>
    3f84:	00800074 	movhi	r2,1
    3f88:	10a41a04 	addi	r2,r2,-28568
    3f8c:	10801017 	ldw	r2,64(r2)
    3f90:	10800098 	cmpnei	r2,r2,2
    3f94:	1000051e 	bne	r2,zero,3fac <alt_sys_init+0x57c>
    3f98:	00800074 	movhi	r2,1
    3f9c:	10a41a04 	addi	r2,r2,-28568
    3fa0:	00c00044 	movi	r3,1
    3fa4:	10c01315 	stw	r3,76(r2)
    3fa8:	00000406 	br	3fbc <alt_sys_init+0x58c>
    3fac:	00800074 	movhi	r2,1
    3fb0:	10a41a04 	addi	r2,r2,-28568
    3fb4:	00c00084 	movi	r3,2
    3fb8:	10c01315 	stw	r3,76(r2)
    3fbc:	e0bffe03 	ldbu	r2,-8(fp)
    3fc0:	00c00804 	movi	r3,32
    3fc4:	1885c83a 	sub	r2,r3,r2
    3fc8:	00ffffc4 	movi	r3,-1
    3fcc:	1886d83a 	srl	r3,r3,r2
    3fd0:	00800074 	movhi	r2,1
    3fd4:	10a41a04 	addi	r2,r2,-28568
    3fd8:	10c01415 	stw	r3,80(r2)
    3fdc:	e0fffe03 	ldbu	r3,-8(fp)
    3fe0:	00800074 	movhi	r2,1
    3fe4:	10a41a04 	addi	r2,r2,-28568
    3fe8:	10801317 	ldw	r2,76(r2)
    3fec:	1887883a 	add	r3,r3,r2
    3ff0:	00800074 	movhi	r2,1
    3ff4:	10a41a04 	addi	r2,r2,-28568
    3ff8:	10c01515 	stw	r3,84(r2)
    3ffc:	e0bffe43 	ldbu	r2,-7(fp)
    4000:	00c00804 	movi	r3,32
    4004:	1885c83a 	sub	r2,r3,r2
    4008:	00ffffc4 	movi	r3,-1
    400c:	1886d83a 	srl	r3,r3,r2
    4010:	00800074 	movhi	r2,1
    4014:	10a41a04 	addi	r2,r2,-28568
    4018:	10c01615 	stw	r3,88(r2)
    401c:	01000074 	movhi	r4,1
    4020:	21241a04 	addi	r4,r4,-28568
    4024:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
    4028:	00800074 	movhi	r2,1
    402c:	10a43104 	addi	r2,r2,-28476
    4030:	10800a17 	ldw	r2,40(r2)
    4034:	10800017 	ldw	r2,0(r2)
    4038:	1007883a 	mov	r3,r2
    403c:	00800074 	movhi	r2,1
    4040:	10a43104 	addi	r2,r2,-28476
    4044:	10c00b15 	stw	r3,44(r2)
    4048:	00800074 	movhi	r2,1
    404c:	10a43104 	addi	r2,r2,-28476
    4050:	10800a17 	ldw	r2,40(r2)
    4054:	10800104 	addi	r2,r2,4
    4058:	10800017 	ldw	r2,0(r2)
    405c:	1007883a 	mov	r3,r2
    4060:	00800074 	movhi	r2,1
    4064:	10a43104 	addi	r2,r2,-28476
    4068:	10c00c15 	stw	r3,48(r2)
    406c:	00800074 	movhi	r2,1
    4070:	10a43104 	addi	r2,r2,-28476
    4074:	10800a17 	ldw	r2,40(r2)
    4078:	10800204 	addi	r2,r2,8
    407c:	10800017 	ldw	r2,0(r2)
    4080:	10ffffcc 	andi	r3,r2,65535
    4084:	00800074 	movhi	r2,1
    4088:	10a43104 	addi	r2,r2,-28476
    408c:	10c01115 	stw	r3,68(r2)
    4090:	00800074 	movhi	r2,1
    4094:	10a43104 	addi	r2,r2,-28476
    4098:	10800a17 	ldw	r2,40(r2)
    409c:	10800204 	addi	r2,r2,8
    40a0:	10800017 	ldw	r2,0(r2)
    40a4:	1006d43a 	srli	r3,r2,16
    40a8:	00800074 	movhi	r2,1
    40ac:	10a43104 	addi	r2,r2,-28476
    40b0:	10c01215 	stw	r3,72(r2)
    40b4:	00800074 	movhi	r2,1
    40b8:	10a43104 	addi	r2,r2,-28476
    40bc:	10800a17 	ldw	r2,40(r2)
    40c0:	10800304 	addi	r2,r2,12
    40c4:	10800017 	ldw	r2,0(r2)
    40c8:	1005d07a 	srai	r2,r2,1
    40cc:	10c0004c 	andi	r3,r2,1
    40d0:	00800074 	movhi	r2,1
    40d4:	10a43104 	addi	r2,r2,-28476
    40d8:	10c00d15 	stw	r3,52(r2)
    40dc:	00800074 	movhi	r2,1
    40e0:	10a43104 	addi	r2,r2,-28476
    40e4:	10800a17 	ldw	r2,40(r2)
    40e8:	10800304 	addi	r2,r2,12
    40ec:	10800017 	ldw	r2,0(r2)
    40f0:	1005d23a 	srai	r2,r2,8
    40f4:	108003cc 	andi	r2,r2,15
    40f8:	10800044 	addi	r2,r2,1
    40fc:	1007883a 	mov	r3,r2
    4100:	00800074 	movhi	r2,1
    4104:	10a43104 	addi	r2,r2,-28476
    4108:	10c00e15 	stw	r3,56(r2)
    410c:	00800074 	movhi	r2,1
    4110:	10a43104 	addi	r2,r2,-28476
    4114:	10800a17 	ldw	r2,40(r2)
    4118:	10800304 	addi	r2,r2,12
    411c:	10800017 	ldw	r2,0(r2)
    4120:	1005d1ba 	srai	r2,r2,6
    4124:	108000cc 	andi	r2,r2,3
    4128:	10800044 	addi	r2,r2,1
    412c:	1007883a 	mov	r3,r2
    4130:	00800074 	movhi	r2,1
    4134:	10a43104 	addi	r2,r2,-28476
    4138:	10c00f15 	stw	r3,60(r2)
    413c:	00800074 	movhi	r2,1
    4140:	10a43104 	addi	r2,r2,-28476
    4144:	10800e17 	ldw	r2,56(r2)
    4148:	1007883a 	mov	r3,r2
    414c:	00800074 	movhi	r2,1
    4150:	10a43104 	addi	r2,r2,-28476
    4154:	10800f17 	ldw	r2,60(r2)
    4158:	1885383a 	mul	r2,r3,r2
    415c:	e0bffe85 	stb	r2,-6(fp)
    4160:	e0bffe83 	ldbu	r2,-6(fp)
    4164:	10800268 	cmpgeui	r2,r2,9
    4168:	1000051e 	bne	r2,zero,4180 <alt_sys_init+0x750>
    416c:	00800074 	movhi	r2,1
    4170:	10a43104 	addi	r2,r2,-28476
    4174:	00c00044 	movi	r3,1
    4178:	10c01015 	stw	r3,64(r2)
    417c:	00000c06 	br	41b0 <alt_sys_init+0x780>
    4180:	e0bffe83 	ldbu	r2,-6(fp)
    4184:	10800468 	cmpgeui	r2,r2,17
    4188:	1000051e 	bne	r2,zero,41a0 <alt_sys_init+0x770>
    418c:	00800074 	movhi	r2,1
    4190:	10a43104 	addi	r2,r2,-28476
    4194:	00c00084 	movi	r3,2
    4198:	10c01015 	stw	r3,64(r2)
    419c:	00000406 	br	41b0 <alt_sys_init+0x780>
    41a0:	00800074 	movhi	r2,1
    41a4:	10a43104 	addi	r2,r2,-28476
    41a8:	00c00104 	movi	r3,4
    41ac:	10c01015 	stw	r3,64(r2)
    41b0:	00800074 	movhi	r2,1
    41b4:	10a43104 	addi	r2,r2,-28476
    41b8:	10800a17 	ldw	r2,40(r2)
    41bc:	10800304 	addi	r2,r2,12
    41c0:	10800017 	ldw	r2,0(r2)
    41c4:	1005d43a 	srai	r2,r2,16
    41c8:	e0bffec5 	stb	r2,-5(fp)
    41cc:	00800074 	movhi	r2,1
    41d0:	10a43104 	addi	r2,r2,-28476
    41d4:	10800a17 	ldw	r2,40(r2)
    41d8:	10800304 	addi	r2,r2,12
    41dc:	10800017 	ldw	r2,0(r2)
    41e0:	1004d63a 	srli	r2,r2,24
    41e4:	e0bfff05 	stb	r2,-4(fp)
    41e8:	00800074 	movhi	r2,1
    41ec:	10a43104 	addi	r2,r2,-28476
    41f0:	10801017 	ldw	r2,64(r2)
    41f4:	10800058 	cmpnei	r2,r2,1
    41f8:	1000041e 	bne	r2,zero,420c <alt_sys_init+0x7dc>
    41fc:	00800074 	movhi	r2,1
    4200:	10a43104 	addi	r2,r2,-28476
    4204:	10001315 	stw	zero,76(r2)
    4208:	00000e06 	br	4244 <alt_sys_init+0x814>
    420c:	00800074 	movhi	r2,1
    4210:	10a43104 	addi	r2,r2,-28476
    4214:	10801017 	ldw	r2,64(r2)
    4218:	10800098 	cmpnei	r2,r2,2
    421c:	1000051e 	bne	r2,zero,4234 <alt_sys_init+0x804>
    4220:	00800074 	movhi	r2,1
    4224:	10a43104 	addi	r2,r2,-28476
    4228:	00c00044 	movi	r3,1
    422c:	10c01315 	stw	r3,76(r2)
    4230:	00000406 	br	4244 <alt_sys_init+0x814>
    4234:	00800074 	movhi	r2,1
    4238:	10a43104 	addi	r2,r2,-28476
    423c:	00c00084 	movi	r3,2
    4240:	10c01315 	stw	r3,76(r2)
    4244:	e0bffec3 	ldbu	r2,-5(fp)
    4248:	00c00804 	movi	r3,32
    424c:	1885c83a 	sub	r2,r3,r2
    4250:	00ffffc4 	movi	r3,-1
    4254:	1886d83a 	srl	r3,r3,r2
    4258:	00800074 	movhi	r2,1
    425c:	10a43104 	addi	r2,r2,-28476
    4260:	10c01415 	stw	r3,80(r2)
    4264:	e0fffec3 	ldbu	r3,-5(fp)
    4268:	00800074 	movhi	r2,1
    426c:	10a43104 	addi	r2,r2,-28476
    4270:	10801317 	ldw	r2,76(r2)
    4274:	1887883a 	add	r3,r3,r2
    4278:	00800074 	movhi	r2,1
    427c:	10a43104 	addi	r2,r2,-28476
    4280:	10c01515 	stw	r3,84(r2)
    4284:	e0bfff03 	ldbu	r2,-4(fp)
    4288:	00c00804 	movi	r3,32
    428c:	1885c83a 	sub	r2,r3,r2
    4290:	00ffffc4 	movi	r3,-1
    4294:	1886d83a 	srl	r3,r3,r2
    4298:	00800074 	movhi	r2,1
    429c:	10a43104 	addi	r2,r2,-28476
    42a0:	10c01615 	stw	r3,88(r2)
    42a4:	01000074 	movhi	r4,1
    42a8:	21243104 	addi	r4,r4,-28476
    42ac:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
    42b0:	00800074 	movhi	r2,1
    42b4:	10a44804 	addi	r2,r2,-28384
    42b8:	10800a17 	ldw	r2,40(r2)
    42bc:	10800017 	ldw	r2,0(r2)
    42c0:	10c003cc 	andi	r3,r2,15
    42c4:	00800074 	movhi	r2,1
    42c8:	10a44804 	addi	r2,r2,-28384
    42cc:	10c00b15 	stw	r3,44(r2)
    42d0:	00800074 	movhi	r2,1
    42d4:	10a44804 	addi	r2,r2,-28384
    42d8:	10800a17 	ldw	r2,40(r2)
    42dc:	10800017 	ldw	r2,0(r2)
    42e0:	1005d13a 	srai	r2,r2,4
    42e4:	10c0004c 	andi	r3,r2,1
    42e8:	00800074 	movhi	r2,1
    42ec:	10a44804 	addi	r2,r2,-28384
    42f0:	10c00c15 	stw	r3,48(r2)
    42f4:	00800074 	movhi	r2,1
    42f8:	10a44804 	addi	r2,r2,-28384
    42fc:	10800a17 	ldw	r2,40(r2)
    4300:	10800017 	ldw	r2,0(r2)
    4304:	1005d17a 	srai	r2,r2,5
    4308:	10c0004c 	andi	r3,r2,1
    430c:	00800074 	movhi	r2,1
    4310:	10a44804 	addi	r2,r2,-28384
    4314:	10c00d15 	stw	r3,52(r2)
    4318:	00800074 	movhi	r2,1
    431c:	10a44804 	addi	r2,r2,-28384
    4320:	10800a17 	ldw	r2,40(r2)
    4324:	10800017 	ldw	r2,0(r2)
    4328:	1005d43a 	srai	r2,r2,16
    432c:	10c003cc 	andi	r3,r2,15
    4330:	00800074 	movhi	r2,1
    4334:	10a44804 	addi	r2,r2,-28384
    4338:	10c00e15 	stw	r3,56(r2)
    433c:	00800074 	movhi	r2,1
    4340:	10a44804 	addi	r2,r2,-28384
    4344:	10800a17 	ldw	r2,40(r2)
    4348:	10800017 	ldw	r2,0(r2)
    434c:	1005d53a 	srai	r2,r2,20
    4350:	10c0004c 	andi	r3,r2,1
    4354:	00800074 	movhi	r2,1
    4358:	10a44804 	addi	r2,r2,-28384
    435c:	10c00f15 	stw	r3,60(r2)
    4360:	00800074 	movhi	r2,1
    4364:	10a44804 	addi	r2,r2,-28384
    4368:	10800a17 	ldw	r2,40(r2)
    436c:	10800017 	ldw	r2,0(r2)
    4370:	1005d57a 	srai	r2,r2,21
    4374:	10c0004c 	andi	r3,r2,1
    4378:	00800074 	movhi	r2,1
    437c:	10a44804 	addi	r2,r2,-28384
    4380:	10c01015 	stw	r3,64(r2)
    4384:	01000074 	movhi	r4,1
    4388:	21244804 	addi	r4,r4,-28384
    438c:	00039c40 	call	39c4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    4390:	01000074 	movhi	r4,1
    4394:	21245904 	addi	r4,r4,-28316
    4398:	00039c40 	call	39c4 <alt_dev_reg>
}
    439c:	0001883a 	nop
    43a0:	e037883a 	mov	sp,fp
    43a4:	dfc00117 	ldw	ra,4(sp)
    43a8:	df000017 	ldw	fp,0(sp)
    43ac:	dec00204 	addi	sp,sp,8
    43b0:	f800283a 	ret

000043b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    43b4:	defffa04 	addi	sp,sp,-24
    43b8:	dfc00515 	stw	ra,20(sp)
    43bc:	df000415 	stw	fp,16(sp)
    43c0:	df000404 	addi	fp,sp,16
    43c4:	e13ffd15 	stw	r4,-12(fp)
    43c8:	e17ffe15 	stw	r5,-8(fp)
    43cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    43d0:	e0bffd17 	ldw	r2,-12(fp)
    43d4:	10800017 	ldw	r2,0(r2)
    43d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    43dc:	e0bffc17 	ldw	r2,-16(fp)
    43e0:	10c00a04 	addi	r3,r2,40
    43e4:	e0bffd17 	ldw	r2,-12(fp)
    43e8:	10800217 	ldw	r2,8(r2)
    43ec:	100f883a 	mov	r7,r2
    43f0:	e1bfff17 	ldw	r6,-4(fp)
    43f4:	e17ffe17 	ldw	r5,-8(fp)
    43f8:	1809883a 	mov	r4,r3
    43fc:	00049d40 	call	49d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    4400:	e037883a 	mov	sp,fp
    4404:	dfc00117 	ldw	ra,4(sp)
    4408:	df000017 	ldw	fp,0(sp)
    440c:	dec00204 	addi	sp,sp,8
    4410:	f800283a 	ret

00004414 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4414:	defffa04 	addi	sp,sp,-24
    4418:	dfc00515 	stw	ra,20(sp)
    441c:	df000415 	stw	fp,16(sp)
    4420:	df000404 	addi	fp,sp,16
    4424:	e13ffd15 	stw	r4,-12(fp)
    4428:	e17ffe15 	stw	r5,-8(fp)
    442c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4430:	e0bffd17 	ldw	r2,-12(fp)
    4434:	10800017 	ldw	r2,0(r2)
    4438:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    443c:	e0bffc17 	ldw	r2,-16(fp)
    4440:	10c00a04 	addi	r3,r2,40
    4444:	e0bffd17 	ldw	r2,-12(fp)
    4448:	10800217 	ldw	r2,8(r2)
    444c:	100f883a 	mov	r7,r2
    4450:	e1bfff17 	ldw	r6,-4(fp)
    4454:	e17ffe17 	ldw	r5,-8(fp)
    4458:	1809883a 	mov	r4,r3
    445c:	0004bf00 	call	4bf0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    4460:	e037883a 	mov	sp,fp
    4464:	dfc00117 	ldw	ra,4(sp)
    4468:	df000017 	ldw	fp,0(sp)
    446c:	dec00204 	addi	sp,sp,8
    4470:	f800283a 	ret

00004474 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    4474:	defffc04 	addi	sp,sp,-16
    4478:	dfc00315 	stw	ra,12(sp)
    447c:	df000215 	stw	fp,8(sp)
    4480:	df000204 	addi	fp,sp,8
    4484:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4488:	e0bfff17 	ldw	r2,-4(fp)
    448c:	10800017 	ldw	r2,0(r2)
    4490:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    4494:	e0bffe17 	ldw	r2,-8(fp)
    4498:	10c00a04 	addi	r3,r2,40
    449c:	e0bfff17 	ldw	r2,-4(fp)
    44a0:	10800217 	ldw	r2,8(r2)
    44a4:	100b883a 	mov	r5,r2
    44a8:	1809883a 	mov	r4,r3
    44ac:	000487c0 	call	487c <altera_avalon_jtag_uart_close>
}
    44b0:	e037883a 	mov	sp,fp
    44b4:	dfc00117 	ldw	ra,4(sp)
    44b8:	df000017 	ldw	fp,0(sp)
    44bc:	dec00204 	addi	sp,sp,8
    44c0:	f800283a 	ret

000044c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    44c4:	defffa04 	addi	sp,sp,-24
    44c8:	dfc00515 	stw	ra,20(sp)
    44cc:	df000415 	stw	fp,16(sp)
    44d0:	df000404 	addi	fp,sp,16
    44d4:	e13ffd15 	stw	r4,-12(fp)
    44d8:	e17ffe15 	stw	r5,-8(fp)
    44dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    44e0:	e0bffd17 	ldw	r2,-12(fp)
    44e4:	10800017 	ldw	r2,0(r2)
    44e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    44ec:	e0bffc17 	ldw	r2,-16(fp)
    44f0:	10800a04 	addi	r2,r2,40
    44f4:	e1bfff17 	ldw	r6,-4(fp)
    44f8:	e17ffe17 	ldw	r5,-8(fp)
    44fc:	1009883a 	mov	r4,r2
    4500:	00048e40 	call	48e4 <altera_avalon_jtag_uart_ioctl>
}
    4504:	e037883a 	mov	sp,fp
    4508:	dfc00117 	ldw	ra,4(sp)
    450c:	df000017 	ldw	fp,0(sp)
    4510:	dec00204 	addi	sp,sp,8
    4514:	f800283a 	ret

00004518 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    4518:	defffb04 	addi	sp,sp,-20
    451c:	dfc00415 	stw	ra,16(sp)
    4520:	df000315 	stw	fp,12(sp)
    4524:	df000304 	addi	fp,sp,12
    4528:	e13ffd15 	stw	r4,-12(fp)
    452c:	e17ffe15 	stw	r5,-8(fp)
    4530:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4534:	e0bffd17 	ldw	r2,-12(fp)
    4538:	00c00044 	movi	r3,1
    453c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    4540:	e0bffd17 	ldw	r2,-12(fp)
    4544:	10800017 	ldw	r2,0(r2)
    4548:	10800104 	addi	r2,r2,4
    454c:	1007883a 	mov	r3,r2
    4550:	e0bffd17 	ldw	r2,-12(fp)
    4554:	10800817 	ldw	r2,32(r2)
    4558:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    455c:	e0bfff17 	ldw	r2,-4(fp)
    4560:	01800034 	movhi	r6,0
    4564:	31917304 	addi	r6,r6,17868
    4568:	e17ffd17 	ldw	r5,-12(fp)
    456c:	1009883a 	mov	r4,r2
    4570:	00066b40 	call	66b4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    4574:	e0bffd17 	ldw	r2,-12(fp)
    4578:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    457c:	e0bffd17 	ldw	r2,-12(fp)
    4580:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4584:	d0e77617 	ldw	r3,-25128(gp)
    4588:	e1fffd17 	ldw	r7,-12(fp)
    458c:	01800034 	movhi	r6,0
    4590:	3191f704 	addi	r6,r6,18396
    4594:	180b883a 	mov	r5,r3
    4598:	1009883a 	mov	r4,r2
    459c:	00061c40 	call	61c4 <alt_alarm_start>
    45a0:	1000040e 	bge	r2,zero,45b4 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    45a4:	e0fffd17 	ldw	r3,-12(fp)
    45a8:	00a00034 	movhi	r2,32768
    45ac:	10bfffc4 	addi	r2,r2,-1
    45b0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    45b4:	0001883a 	nop
    45b8:	e037883a 	mov	sp,fp
    45bc:	dfc00117 	ldw	ra,4(sp)
    45c0:	df000017 	ldw	fp,0(sp)
    45c4:	dec00204 	addi	sp,sp,8
    45c8:	f800283a 	ret

000045cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    45cc:	defff704 	addi	sp,sp,-36
    45d0:	df000815 	stw	fp,32(sp)
    45d4:	df000804 	addi	fp,sp,32
    45d8:	e13ffe15 	stw	r4,-8(fp)
    45dc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    45e0:	e0bffe17 	ldw	r2,-8(fp)
    45e4:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    45e8:	e0bffa17 	ldw	r2,-24(fp)
    45ec:	10800017 	ldw	r2,0(r2)
    45f0:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    45f4:	e0bffb17 	ldw	r2,-20(fp)
    45f8:	10800104 	addi	r2,r2,4
    45fc:	10800037 	ldwio	r2,0(r2)
    4600:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    4604:	e0bffc17 	ldw	r2,-16(fp)
    4608:	1080c00c 	andi	r2,r2,768
    460c:	10006d26 	beq	r2,zero,47c4 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    4610:	e0bffc17 	ldw	r2,-16(fp)
    4614:	1080400c 	andi	r2,r2,256
    4618:	10003526 	beq	r2,zero,46f0 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    461c:	00800074 	movhi	r2,1
    4620:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4624:	e0bffa17 	ldw	r2,-24(fp)
    4628:	10800a17 	ldw	r2,40(r2)
    462c:	10800044 	addi	r2,r2,1
    4630:	1081ffcc 	andi	r2,r2,2047
    4634:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    4638:	e0bffa17 	ldw	r2,-24(fp)
    463c:	10c00b17 	ldw	r3,44(r2)
    4640:	e0bffd17 	ldw	r2,-12(fp)
    4644:	18801526 	beq	r3,r2,469c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4648:	e0bffb17 	ldw	r2,-20(fp)
    464c:	10800037 	ldwio	r2,0(r2)
    4650:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    4654:	e0bff817 	ldw	r2,-32(fp)
    4658:	10a0000c 	andi	r2,r2,32768
    465c:	10001126 	beq	r2,zero,46a4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    4660:	e0bffa17 	ldw	r2,-24(fp)
    4664:	10800a17 	ldw	r2,40(r2)
    4668:	e0fff817 	ldw	r3,-32(fp)
    466c:	1809883a 	mov	r4,r3
    4670:	e0fffa17 	ldw	r3,-24(fp)
    4674:	1885883a 	add	r2,r3,r2
    4678:	10800e04 	addi	r2,r2,56
    467c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4680:	e0bffa17 	ldw	r2,-24(fp)
    4684:	10800a17 	ldw	r2,40(r2)
    4688:	10800044 	addi	r2,r2,1
    468c:	10c1ffcc 	andi	r3,r2,2047
    4690:	e0bffa17 	ldw	r2,-24(fp)
    4694:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    4698:	003fe206 	br	4624 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004624>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    469c:	0001883a 	nop
    46a0:	00000106 	br	46a8 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    46a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    46a8:	e0bff817 	ldw	r2,-32(fp)
    46ac:	10bfffec 	andhi	r2,r2,65535
    46b0:	10000f26 	beq	r2,zero,46f0 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    46b4:	e0bffa17 	ldw	r2,-24(fp)
    46b8:	10c00817 	ldw	r3,32(r2)
    46bc:	00bfff84 	movi	r2,-2
    46c0:	1886703a 	and	r3,r3,r2
    46c4:	e0bffa17 	ldw	r2,-24(fp)
    46c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    46cc:	e0bffb17 	ldw	r2,-20(fp)
    46d0:	10800104 	addi	r2,r2,4
    46d4:	1007883a 	mov	r3,r2
    46d8:	e0bffa17 	ldw	r2,-24(fp)
    46dc:	10800817 	ldw	r2,32(r2)
    46e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    46e4:	e0bffb17 	ldw	r2,-20(fp)
    46e8:	10800104 	addi	r2,r2,4
    46ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    46f0:	e0bffc17 	ldw	r2,-16(fp)
    46f4:	1080800c 	andi	r2,r2,512
    46f8:	103fbe26 	beq	r2,zero,45f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    46fc:	e0bffc17 	ldw	r2,-16(fp)
    4700:	1004d43a 	srli	r2,r2,16
    4704:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    4708:	00001406 	br	475c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    470c:	e0bffb17 	ldw	r2,-20(fp)
    4710:	e0fffa17 	ldw	r3,-24(fp)
    4714:	18c00d17 	ldw	r3,52(r3)
    4718:	e13ffa17 	ldw	r4,-24(fp)
    471c:	20c7883a 	add	r3,r4,r3
    4720:	18c20e04 	addi	r3,r3,2104
    4724:	18c00003 	ldbu	r3,0(r3)
    4728:	18c03fcc 	andi	r3,r3,255
    472c:	18c0201c 	xori	r3,r3,128
    4730:	18ffe004 	addi	r3,r3,-128
    4734:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4738:	e0bffa17 	ldw	r2,-24(fp)
    473c:	10800d17 	ldw	r2,52(r2)
    4740:	10800044 	addi	r2,r2,1
    4744:	10c1ffcc 	andi	r3,r2,2047
    4748:	e0bffa17 	ldw	r2,-24(fp)
    474c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    4750:	e0bff917 	ldw	r2,-28(fp)
    4754:	10bfffc4 	addi	r2,r2,-1
    4758:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    475c:	e0bff917 	ldw	r2,-28(fp)
    4760:	10000526 	beq	r2,zero,4778 <altera_avalon_jtag_uart_irq+0x1ac>
    4764:	e0bffa17 	ldw	r2,-24(fp)
    4768:	10c00d17 	ldw	r3,52(r2)
    476c:	e0bffa17 	ldw	r2,-24(fp)
    4770:	10800c17 	ldw	r2,48(r2)
    4774:	18bfe51e 	bne	r3,r2,470c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700470c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    4778:	e0bff917 	ldw	r2,-28(fp)
    477c:	103f9d26 	beq	r2,zero,45f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4780:	e0bffa17 	ldw	r2,-24(fp)
    4784:	10c00817 	ldw	r3,32(r2)
    4788:	00bfff44 	movi	r2,-3
    478c:	1886703a 	and	r3,r3,r2
    4790:	e0bffa17 	ldw	r2,-24(fp)
    4794:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4798:	e0bffa17 	ldw	r2,-24(fp)
    479c:	10800017 	ldw	r2,0(r2)
    47a0:	10800104 	addi	r2,r2,4
    47a4:	1007883a 	mov	r3,r2
    47a8:	e0bffa17 	ldw	r2,-24(fp)
    47ac:	10800817 	ldw	r2,32(r2)
    47b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    47b4:	e0bffb17 	ldw	r2,-20(fp)
    47b8:	10800104 	addi	r2,r2,4
    47bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    47c0:	003f8c06 	br	45f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045f4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    47c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    47c8:	0001883a 	nop
    47cc:	e037883a 	mov	sp,fp
    47d0:	df000017 	ldw	fp,0(sp)
    47d4:	dec00104 	addi	sp,sp,4
    47d8:	f800283a 	ret

000047dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    47dc:	defff804 	addi	sp,sp,-32
    47e0:	df000715 	stw	fp,28(sp)
    47e4:	df000704 	addi	fp,sp,28
    47e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    47ec:	e0bffb17 	ldw	r2,-20(fp)
    47f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    47f4:	e0bff917 	ldw	r2,-28(fp)
    47f8:	10800017 	ldw	r2,0(r2)
    47fc:	10800104 	addi	r2,r2,4
    4800:	10800037 	ldwio	r2,0(r2)
    4804:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    4808:	e0bffa17 	ldw	r2,-24(fp)
    480c:	1081000c 	andi	r2,r2,1024
    4810:	10000b26 	beq	r2,zero,4840 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4814:	e0bff917 	ldw	r2,-28(fp)
    4818:	10800017 	ldw	r2,0(r2)
    481c:	10800104 	addi	r2,r2,4
    4820:	1007883a 	mov	r3,r2
    4824:	e0bff917 	ldw	r2,-28(fp)
    4828:	10800817 	ldw	r2,32(r2)
    482c:	10810014 	ori	r2,r2,1024
    4830:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    4834:	e0bff917 	ldw	r2,-28(fp)
    4838:	10000915 	stw	zero,36(r2)
    483c:	00000a06 	br	4868 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    4840:	e0bff917 	ldw	r2,-28(fp)
    4844:	10c00917 	ldw	r3,36(r2)
    4848:	00a00034 	movhi	r2,32768
    484c:	10bfff04 	addi	r2,r2,-4
    4850:	10c00536 	bltu	r2,r3,4868 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    4854:	e0bff917 	ldw	r2,-28(fp)
    4858:	10800917 	ldw	r2,36(r2)
    485c:	10c00044 	addi	r3,r2,1
    4860:	e0bff917 	ldw	r2,-28(fp)
    4864:	10c00915 	stw	r3,36(r2)
    4868:	d0a77617 	ldw	r2,-25128(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    486c:	e037883a 	mov	sp,fp
    4870:	df000017 	ldw	fp,0(sp)
    4874:	dec00104 	addi	sp,sp,4
    4878:	f800283a 	ret

0000487c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    487c:	defffd04 	addi	sp,sp,-12
    4880:	df000215 	stw	fp,8(sp)
    4884:	df000204 	addi	fp,sp,8
    4888:	e13ffe15 	stw	r4,-8(fp)
    488c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4890:	00000506 	br	48a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    4894:	e0bfff17 	ldw	r2,-4(fp)
    4898:	1090000c 	andi	r2,r2,16384
    489c:	10000226 	beq	r2,zero,48a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    48a0:	00bffd44 	movi	r2,-11
    48a4:	00000b06 	br	48d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    48a8:	e0bffe17 	ldw	r2,-8(fp)
    48ac:	10c00d17 	ldw	r3,52(r2)
    48b0:	e0bffe17 	ldw	r2,-8(fp)
    48b4:	10800c17 	ldw	r2,48(r2)
    48b8:	18800526 	beq	r3,r2,48d0 <altera_avalon_jtag_uart_close+0x54>
    48bc:	e0bffe17 	ldw	r2,-8(fp)
    48c0:	10c00917 	ldw	r3,36(r2)
    48c4:	e0bffe17 	ldw	r2,-8(fp)
    48c8:	10800117 	ldw	r2,4(r2)
    48cc:	18bff136 	bltu	r3,r2,4894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004894>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    48d0:	0005883a 	mov	r2,zero
}
    48d4:	e037883a 	mov	sp,fp
    48d8:	df000017 	ldw	fp,0(sp)
    48dc:	dec00104 	addi	sp,sp,4
    48e0:	f800283a 	ret

000048e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    48e4:	defffa04 	addi	sp,sp,-24
    48e8:	df000515 	stw	fp,20(sp)
    48ec:	df000504 	addi	fp,sp,20
    48f0:	e13ffd15 	stw	r4,-12(fp)
    48f4:	e17ffe15 	stw	r5,-8(fp)
    48f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    48fc:	00bff9c4 	movi	r2,-25
    4900:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    4904:	e0bffe17 	ldw	r2,-8(fp)
    4908:	10da8060 	cmpeqi	r3,r2,27137
    490c:	1800031e 	bne	r3,zero,491c <altera_avalon_jtag_uart_ioctl+0x38>
    4910:	109a80a0 	cmpeqi	r2,r2,27138
    4914:	1000181e 	bne	r2,zero,4978 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    4918:	00002906 	br	49c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    491c:	e0bffd17 	ldw	r2,-12(fp)
    4920:	10c00117 	ldw	r3,4(r2)
    4924:	00a00034 	movhi	r2,32768
    4928:	10bfffc4 	addi	r2,r2,-1
    492c:	18802126 	beq	r3,r2,49b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    4930:	e0bfff17 	ldw	r2,-4(fp)
    4934:	10800017 	ldw	r2,0(r2)
    4938:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    493c:	e0bffc17 	ldw	r2,-16(fp)
    4940:	10800090 	cmplti	r2,r2,2
    4944:	1000061e 	bne	r2,zero,4960 <altera_avalon_jtag_uart_ioctl+0x7c>
    4948:	e0fffc17 	ldw	r3,-16(fp)
    494c:	00a00034 	movhi	r2,32768
    4950:	10bfffc4 	addi	r2,r2,-1
    4954:	18800226 	beq	r3,r2,4960 <altera_avalon_jtag_uart_ioctl+0x7c>
    4958:	e0bffc17 	ldw	r2,-16(fp)
    495c:	00000206 	br	4968 <altera_avalon_jtag_uart_ioctl+0x84>
    4960:	00a00034 	movhi	r2,32768
    4964:	10bfff84 	addi	r2,r2,-2
    4968:	e0fffd17 	ldw	r3,-12(fp)
    496c:	18800115 	stw	r2,4(r3)
      rc = 0;
    4970:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    4974:	00000f06 	br	49b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    4978:	e0bffd17 	ldw	r2,-12(fp)
    497c:	10c00117 	ldw	r3,4(r2)
    4980:	00a00034 	movhi	r2,32768
    4984:	10bfffc4 	addi	r2,r2,-1
    4988:	18800c26 	beq	r3,r2,49bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    498c:	e0bffd17 	ldw	r2,-12(fp)
    4990:	10c00917 	ldw	r3,36(r2)
    4994:	e0bffd17 	ldw	r2,-12(fp)
    4998:	10800117 	ldw	r2,4(r2)
    499c:	1885803a 	cmpltu	r2,r3,r2
    49a0:	10c03fcc 	andi	r3,r2,255
    49a4:	e0bfff17 	ldw	r2,-4(fp)
    49a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    49ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    49b0:	00000206 	br	49bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    49b4:	0001883a 	nop
    49b8:	00000106 	br	49c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    49bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
    49c0:	e0bffb17 	ldw	r2,-20(fp)
}
    49c4:	e037883a 	mov	sp,fp
    49c8:	df000017 	ldw	fp,0(sp)
    49cc:	dec00104 	addi	sp,sp,4
    49d0:	f800283a 	ret

000049d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    49d4:	defff304 	addi	sp,sp,-52
    49d8:	dfc00c15 	stw	ra,48(sp)
    49dc:	df000b15 	stw	fp,44(sp)
    49e0:	df000b04 	addi	fp,sp,44
    49e4:	e13ffc15 	stw	r4,-16(fp)
    49e8:	e17ffd15 	stw	r5,-12(fp)
    49ec:	e1bffe15 	stw	r6,-8(fp)
    49f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    49f4:	e0bffd17 	ldw	r2,-12(fp)
    49f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    49fc:	00004706 	br	4b1c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    4a00:	e0bffc17 	ldw	r2,-16(fp)
    4a04:	10800a17 	ldw	r2,40(r2)
    4a08:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    4a0c:	e0bffc17 	ldw	r2,-16(fp)
    4a10:	10800b17 	ldw	r2,44(r2)
    4a14:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    4a18:	e0fff717 	ldw	r3,-36(fp)
    4a1c:	e0bff817 	ldw	r2,-32(fp)
    4a20:	18800536 	bltu	r3,r2,4a38 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    4a24:	e0fff717 	ldw	r3,-36(fp)
    4a28:	e0bff817 	ldw	r2,-32(fp)
    4a2c:	1885c83a 	sub	r2,r3,r2
    4a30:	e0bff615 	stw	r2,-40(fp)
    4a34:	00000406 	br	4a48 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4a38:	00c20004 	movi	r3,2048
    4a3c:	e0bff817 	ldw	r2,-32(fp)
    4a40:	1885c83a 	sub	r2,r3,r2
    4a44:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4a48:	e0bff617 	ldw	r2,-40(fp)
    4a4c:	10001e26 	beq	r2,zero,4ac8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    4a50:	e0fffe17 	ldw	r3,-8(fp)
    4a54:	e0bff617 	ldw	r2,-40(fp)
    4a58:	1880022e 	bgeu	r3,r2,4a64 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    4a5c:	e0bffe17 	ldw	r2,-8(fp)
    4a60:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    4a64:	e0bffc17 	ldw	r2,-16(fp)
    4a68:	10c00e04 	addi	r3,r2,56
    4a6c:	e0bff817 	ldw	r2,-32(fp)
    4a70:	1885883a 	add	r2,r3,r2
    4a74:	e1bff617 	ldw	r6,-40(fp)
    4a78:	100b883a 	mov	r5,r2
    4a7c:	e13ff517 	ldw	r4,-44(fp)
    4a80:	00016f80 	call	16f8 <memcpy>
      ptr   += n;
    4a84:	e0fff517 	ldw	r3,-44(fp)
    4a88:	e0bff617 	ldw	r2,-40(fp)
    4a8c:	1885883a 	add	r2,r3,r2
    4a90:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    4a94:	e0fffe17 	ldw	r3,-8(fp)
    4a98:	e0bff617 	ldw	r2,-40(fp)
    4a9c:	1885c83a 	sub	r2,r3,r2
    4aa0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4aa4:	e0fff817 	ldw	r3,-32(fp)
    4aa8:	e0bff617 	ldw	r2,-40(fp)
    4aac:	1885883a 	add	r2,r3,r2
    4ab0:	10c1ffcc 	andi	r3,r2,2047
    4ab4:	e0bffc17 	ldw	r2,-16(fp)
    4ab8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4abc:	e0bffe17 	ldw	r2,-8(fp)
    4ac0:	00bfcf16 	blt	zero,r2,4a00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004a00>
    4ac4:	00000106 	br	4acc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    4ac8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    4acc:	e0fff517 	ldw	r3,-44(fp)
    4ad0:	e0bffd17 	ldw	r2,-12(fp)
    4ad4:	1880141e 	bne	r3,r2,4b28 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4ad8:	e0bfff17 	ldw	r2,-4(fp)
    4adc:	1090000c 	andi	r2,r2,16384
    4ae0:	1000131e 	bne	r2,zero,4b30 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4ae4:	0001883a 	nop
    4ae8:	e0bffc17 	ldw	r2,-16(fp)
    4aec:	10c00a17 	ldw	r3,40(r2)
    4af0:	e0bff717 	ldw	r2,-36(fp)
    4af4:	1880051e 	bne	r3,r2,4b0c <altera_avalon_jtag_uart_read+0x138>
    4af8:	e0bffc17 	ldw	r2,-16(fp)
    4afc:	10c00917 	ldw	r3,36(r2)
    4b00:	e0bffc17 	ldw	r2,-16(fp)
    4b04:	10800117 	ldw	r2,4(r2)
    4b08:	18bff736 	bltu	r3,r2,4ae8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ae8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    4b0c:	e0bffc17 	ldw	r2,-16(fp)
    4b10:	10c00a17 	ldw	r3,40(r2)
    4b14:	e0bff717 	ldw	r2,-36(fp)
    4b18:	18800726 	beq	r3,r2,4b38 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4b1c:	e0bffe17 	ldw	r2,-8(fp)
    4b20:	00bfb716 	blt	zero,r2,4a00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004a00>
    4b24:	00000506 	br	4b3c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    4b28:	0001883a 	nop
    4b2c:	00000306 	br	4b3c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    4b30:	0001883a 	nop
    4b34:	00000106 	br	4b3c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    4b38:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    4b3c:	e0fff517 	ldw	r3,-44(fp)
    4b40:	e0bffd17 	ldw	r2,-12(fp)
    4b44:	18801826 	beq	r3,r2,4ba8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b48:	0005303a 	rdctl	r2,status
    4b4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b50:	e0fffb17 	ldw	r3,-20(fp)
    4b54:	00bfff84 	movi	r2,-2
    4b58:	1884703a 	and	r2,r3,r2
    4b5c:	1001703a 	wrctl	status,r2
  
  return context;
    4b60:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    4b64:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4b68:	e0bffc17 	ldw	r2,-16(fp)
    4b6c:	10800817 	ldw	r2,32(r2)
    4b70:	10c00054 	ori	r3,r2,1
    4b74:	e0bffc17 	ldw	r2,-16(fp)
    4b78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4b7c:	e0bffc17 	ldw	r2,-16(fp)
    4b80:	10800017 	ldw	r2,0(r2)
    4b84:	10800104 	addi	r2,r2,4
    4b88:	1007883a 	mov	r3,r2
    4b8c:	e0bffc17 	ldw	r2,-16(fp)
    4b90:	10800817 	ldw	r2,32(r2)
    4b94:	18800035 	stwio	r2,0(r3)
    4b98:	e0bffa17 	ldw	r2,-24(fp)
    4b9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4ba0:	e0bff917 	ldw	r2,-28(fp)
    4ba4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    4ba8:	e0fff517 	ldw	r3,-44(fp)
    4bac:	e0bffd17 	ldw	r2,-12(fp)
    4bb0:	18800426 	beq	r3,r2,4bc4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    4bb4:	e0fff517 	ldw	r3,-44(fp)
    4bb8:	e0bffd17 	ldw	r2,-12(fp)
    4bbc:	1885c83a 	sub	r2,r3,r2
    4bc0:	00000606 	br	4bdc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    4bc4:	e0bfff17 	ldw	r2,-4(fp)
    4bc8:	1090000c 	andi	r2,r2,16384
    4bcc:	10000226 	beq	r2,zero,4bd8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    4bd0:	00bffd44 	movi	r2,-11
    4bd4:	00000106 	br	4bdc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    4bd8:	00bffec4 	movi	r2,-5
}
    4bdc:	e037883a 	mov	sp,fp
    4be0:	dfc00117 	ldw	ra,4(sp)
    4be4:	df000017 	ldw	fp,0(sp)
    4be8:	dec00204 	addi	sp,sp,8
    4bec:	f800283a 	ret

00004bf0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4bf0:	defff304 	addi	sp,sp,-52
    4bf4:	dfc00c15 	stw	ra,48(sp)
    4bf8:	df000b15 	stw	fp,44(sp)
    4bfc:	df000b04 	addi	fp,sp,44
    4c00:	e13ffc15 	stw	r4,-16(fp)
    4c04:	e17ffd15 	stw	r5,-12(fp)
    4c08:	e1bffe15 	stw	r6,-8(fp)
    4c0c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4c10:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4c14:	e0bffd17 	ldw	r2,-12(fp)
    4c18:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4c1c:	00003706 	br	4cfc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4c20:	e0bffc17 	ldw	r2,-16(fp)
    4c24:	10800c17 	ldw	r2,48(r2)
    4c28:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    4c2c:	e0bffc17 	ldw	r2,-16(fp)
    4c30:	10800d17 	ldw	r2,52(r2)
    4c34:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    4c38:	e0fff917 	ldw	r3,-28(fp)
    4c3c:	e0bff517 	ldw	r2,-44(fp)
    4c40:	1880062e 	bgeu	r3,r2,4c5c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4c44:	e0fff517 	ldw	r3,-44(fp)
    4c48:	e0bff917 	ldw	r2,-28(fp)
    4c4c:	1885c83a 	sub	r2,r3,r2
    4c50:	10bfffc4 	addi	r2,r2,-1
    4c54:	e0bff615 	stw	r2,-40(fp)
    4c58:	00000b06 	br	4c88 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    4c5c:	e0bff517 	ldw	r2,-44(fp)
    4c60:	10000526 	beq	r2,zero,4c78 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    4c64:	00c20004 	movi	r3,2048
    4c68:	e0bff917 	ldw	r2,-28(fp)
    4c6c:	1885c83a 	sub	r2,r3,r2
    4c70:	e0bff615 	stw	r2,-40(fp)
    4c74:	00000406 	br	4c88 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4c78:	00c1ffc4 	movi	r3,2047
    4c7c:	e0bff917 	ldw	r2,-28(fp)
    4c80:	1885c83a 	sub	r2,r3,r2
    4c84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4c88:	e0bff617 	ldw	r2,-40(fp)
    4c8c:	10001e26 	beq	r2,zero,4d08 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    4c90:	e0fffe17 	ldw	r3,-8(fp)
    4c94:	e0bff617 	ldw	r2,-40(fp)
    4c98:	1880022e 	bgeu	r3,r2,4ca4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    4c9c:	e0bffe17 	ldw	r2,-8(fp)
    4ca0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4ca4:	e0bffc17 	ldw	r2,-16(fp)
    4ca8:	10c20e04 	addi	r3,r2,2104
    4cac:	e0bff917 	ldw	r2,-28(fp)
    4cb0:	1885883a 	add	r2,r3,r2
    4cb4:	e1bff617 	ldw	r6,-40(fp)
    4cb8:	e17ffd17 	ldw	r5,-12(fp)
    4cbc:	1009883a 	mov	r4,r2
    4cc0:	00016f80 	call	16f8 <memcpy>
      ptr   += n;
    4cc4:	e0fffd17 	ldw	r3,-12(fp)
    4cc8:	e0bff617 	ldw	r2,-40(fp)
    4ccc:	1885883a 	add	r2,r3,r2
    4cd0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    4cd4:	e0fffe17 	ldw	r3,-8(fp)
    4cd8:	e0bff617 	ldw	r2,-40(fp)
    4cdc:	1885c83a 	sub	r2,r3,r2
    4ce0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4ce4:	e0fff917 	ldw	r3,-28(fp)
    4ce8:	e0bff617 	ldw	r2,-40(fp)
    4cec:	1885883a 	add	r2,r3,r2
    4cf0:	10c1ffcc 	andi	r3,r2,2047
    4cf4:	e0bffc17 	ldw	r2,-16(fp)
    4cf8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4cfc:	e0bffe17 	ldw	r2,-8(fp)
    4d00:	00bfc716 	blt	zero,r2,4c20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004c20>
    4d04:	00000106 	br	4d0c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    4d08:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4d0c:	0005303a 	rdctl	r2,status
    4d10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4d14:	e0fffb17 	ldw	r3,-20(fp)
    4d18:	00bfff84 	movi	r2,-2
    4d1c:	1884703a 	and	r2,r3,r2
    4d20:	1001703a 	wrctl	status,r2
  
  return context;
    4d24:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4d28:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4d2c:	e0bffc17 	ldw	r2,-16(fp)
    4d30:	10800817 	ldw	r2,32(r2)
    4d34:	10c00094 	ori	r3,r2,2
    4d38:	e0bffc17 	ldw	r2,-16(fp)
    4d3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4d40:	e0bffc17 	ldw	r2,-16(fp)
    4d44:	10800017 	ldw	r2,0(r2)
    4d48:	10800104 	addi	r2,r2,4
    4d4c:	1007883a 	mov	r3,r2
    4d50:	e0bffc17 	ldw	r2,-16(fp)
    4d54:	10800817 	ldw	r2,32(r2)
    4d58:	18800035 	stwio	r2,0(r3)
    4d5c:	e0bffa17 	ldw	r2,-24(fp)
    4d60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d64:	e0bff817 	ldw	r2,-32(fp)
    4d68:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4d6c:	e0bffe17 	ldw	r2,-8(fp)
    4d70:	0080100e 	bge	zero,r2,4db4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    4d74:	e0bfff17 	ldw	r2,-4(fp)
    4d78:	1090000c 	andi	r2,r2,16384
    4d7c:	1000101e 	bne	r2,zero,4dc0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4d80:	0001883a 	nop
    4d84:	e0bffc17 	ldw	r2,-16(fp)
    4d88:	10c00d17 	ldw	r3,52(r2)
    4d8c:	e0bff517 	ldw	r2,-44(fp)
    4d90:	1880051e 	bne	r3,r2,4da8 <altera_avalon_jtag_uart_write+0x1b8>
    4d94:	e0bffc17 	ldw	r2,-16(fp)
    4d98:	10c00917 	ldw	r3,36(r2)
    4d9c:	e0bffc17 	ldw	r2,-16(fp)
    4da0:	10800117 	ldw	r2,4(r2)
    4da4:	18bff736 	bltu	r3,r2,4d84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d84>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    4da8:	e0bffc17 	ldw	r2,-16(fp)
    4dac:	10800917 	ldw	r2,36(r2)
    4db0:	1000051e 	bne	r2,zero,4dc8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    4db4:	e0bffe17 	ldw	r2,-8(fp)
    4db8:	00bfd016 	blt	zero,r2,4cfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004cfc>
    4dbc:	00000306 	br	4dcc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    4dc0:	0001883a 	nop
    4dc4:	00000106 	br	4dcc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    4dc8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4dcc:	e0fffd17 	ldw	r3,-12(fp)
    4dd0:	e0bff717 	ldw	r2,-36(fp)
    4dd4:	18800426 	beq	r3,r2,4de8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    4dd8:	e0fffd17 	ldw	r3,-12(fp)
    4ddc:	e0bff717 	ldw	r2,-36(fp)
    4de0:	1885c83a 	sub	r2,r3,r2
    4de4:	00000606 	br	4e00 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    4de8:	e0bfff17 	ldw	r2,-4(fp)
    4dec:	1090000c 	andi	r2,r2,16384
    4df0:	10000226 	beq	r2,zero,4dfc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    4df4:	00bffd44 	movi	r2,-11
    4df8:	00000106 	br	4e00 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4dfc:	00bffec4 	movi	r2,-5
}
    4e00:	e037883a 	mov	sp,fp
    4e04:	dfc00117 	ldw	ra,4(sp)
    4e08:	df000017 	ldw	fp,0(sp)
    4e0c:	dec00204 	addi	sp,sp,8
    4e10:	f800283a 	ret

00004e14 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4e14:	defff904 	addi	sp,sp,-28
    4e18:	dfc00615 	stw	ra,24(sp)
    4e1c:	df000515 	stw	fp,20(sp)
    4e20:	df000504 	addi	fp,sp,20
    4e24:	e13ffe15 	stw	r4,-8(fp)
    4e28:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    4e2c:	0007883a 	mov	r3,zero
    4e30:	e0bffe17 	ldw	r2,-8(fp)
    4e34:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4e38:	e0bffe17 	ldw	r2,-8(fp)
    4e3c:	10800104 	addi	r2,r2,4
    4e40:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4e44:	0005303a 	rdctl	r2,status
    4e48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4e4c:	e0fffc17 	ldw	r3,-16(fp)
    4e50:	00bfff84 	movi	r2,-2
    4e54:	1884703a 	and	r2,r3,r2
    4e58:	1001703a 	wrctl	status,r2
  
  return context;
    4e5c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    4e60:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    4e64:	0006b240 	call	6b24 <alt_tick>
    4e68:	e0bffb17 	ldw	r2,-20(fp)
    4e6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4e70:	e0bffd17 	ldw	r2,-12(fp)
    4e74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4e78:	0001883a 	nop
    4e7c:	e037883a 	mov	sp,fp
    4e80:	dfc00117 	ldw	ra,4(sp)
    4e84:	df000017 	ldw	fp,0(sp)
    4e88:	dec00204 	addi	sp,sp,8
    4e8c:	f800283a 	ret

00004e90 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4e90:	defff904 	addi	sp,sp,-28
    4e94:	dfc00615 	stw	ra,24(sp)
    4e98:	df000515 	stw	fp,20(sp)
    4e9c:	df000504 	addi	fp,sp,20
    4ea0:	e13ffc15 	stw	r4,-16(fp)
    4ea4:	e17ffd15 	stw	r5,-12(fp)
    4ea8:	e1bffe15 	stw	r6,-8(fp)
    4eac:	e1ffff15 	stw	r7,-4(fp)
    4eb0:	e0bfff17 	ldw	r2,-4(fp)
    4eb4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4eb8:	d0a77617 	ldw	r2,-25128(gp)
    4ebc:	1000021e 	bne	r2,zero,4ec8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    4ec0:	e0bffb17 	ldw	r2,-20(fp)
    4ec4:	d0a77615 	stw	r2,-25128(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4ec8:	e0bffc17 	ldw	r2,-16(fp)
    4ecc:	10800104 	addi	r2,r2,4
    4ed0:	00c001c4 	movi	r3,7
    4ed4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    4ed8:	01800034 	movhi	r6,0
    4edc:	31938504 	addi	r6,r6,19988
    4ee0:	e17ffc17 	ldw	r5,-16(fp)
    4ee4:	e13ffe17 	ldw	r4,-8(fp)
    4ee8:	00066b40 	call	66b4 <alt_irq_register>
#endif  
}
    4eec:	0001883a 	nop
    4ef0:	e037883a 	mov	sp,fp
    4ef4:	dfc00117 	ldw	ra,4(sp)
    4ef8:	df000017 	ldw	fp,0(sp)
    4efc:	dec00204 	addi	sp,sp,8
    4f00:	f800283a 	ret

00004f04 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    4f04:	defffc04 	addi	sp,sp,-16
    4f08:	df000315 	stw	fp,12(sp)
    4f0c:	df000304 	addi	fp,sp,12
    4f10:	e13ffe15 	stw	r4,-8(fp)
    4f14:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    4f18:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    4f1c:	e0bfff17 	ldw	r2,-4(fp)
    4f20:	1000061e 	bne	r2,zero,4f3c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    4f24:	e0bffe17 	ldw	r2,-8(fp)
    4f28:	1007883a 	mov	r3,r2
    4f2c:	e0bffd03 	ldbu	r2,-12(fp)
    4f30:	1884b03a 	or	r2,r3,r2
    4f34:	e0bffd05 	stb	r2,-12(fp)
    4f38:	00000806 	br	4f5c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    4f3c:	e0bffe17 	ldw	r2,-8(fp)
    4f40:	1007883a 	mov	r3,r2
    4f44:	e0bffd03 	ldbu	r2,-12(fp)
    4f48:	1884b03a 	or	r2,r3,r2
    4f4c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    4f50:	e0bffd03 	ldbu	r2,-12(fp)
    4f54:	10801014 	ori	r2,r2,64
    4f58:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    4f5c:	e0fffd03 	ldbu	r3,-12(fp)
    4f60:	00bfe004 	movi	r2,-128
    4f64:	1884b03a 	or	r2,r3,r2
}
    4f68:	e037883a 	mov	sp,fp
    4f6c:	df000017 	ldw	fp,0(sp)
    4f70:	dec00104 	addi	sp,sp,4
    4f74:	f800283a 	ret

00004f78 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    4f78:	defffd04 	addi	sp,sp,-12
    4f7c:	df000215 	stw	fp,8(sp)
    4f80:	df000204 	addi	fp,sp,8
    4f84:	e13ffe15 	stw	r4,-8(fp)
    4f88:	2805883a 	mov	r2,r5
    4f8c:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    4f90:	e0bffe17 	ldw	r2,-8(fp)
    4f94:	10800a17 	ldw	r2,40(r2)
    4f98:	1007883a 	mov	r3,r2
    4f9c:	e0bfff03 	ldbu	r2,-4(fp)
    4fa0:	18800025 	stbio	r2,0(r3)
}
    4fa4:	0001883a 	nop
    4fa8:	e037883a 	mov	sp,fp
    4fac:	df000017 	ldw	fp,0(sp)
    4fb0:	dec00104 	addi	sp,sp,4
    4fb4:	f800283a 	ret

00004fb8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    4fb8:	defffe04 	addi	sp,sp,-8
    4fbc:	df000115 	stw	fp,4(sp)
    4fc0:	df000104 	addi	fp,sp,4
    4fc4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    4fc8:	e0bfff17 	ldw	r2,-4(fp)
    4fcc:	10800a17 	ldw	r2,40(r2)
    4fd0:	1007883a 	mov	r3,r2
    4fd4:	00800044 	movi	r2,1
    4fd8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    4fdc:	0001883a 	nop
    4fe0:	e037883a 	mov	sp,fp
    4fe4:	df000017 	ldw	fp,0(sp)
    4fe8:	dec00104 	addi	sp,sp,4
    4fec:	f800283a 	ret

00004ff0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    4ff0:	defffc04 	addi	sp,sp,-16
    4ff4:	dfc00315 	stw	ra,12(sp)
    4ff8:	df000215 	stw	fp,8(sp)
    4ffc:	df000204 	addi	fp,sp,8
    5000:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    5004:	d1600604 	addi	r5,gp,-32744
    5008:	e13fff17 	ldw	r4,-4(fp)
    500c:	00064b00 	call	64b0 <alt_find_dev>
    5010:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    5014:	e0bffe17 	ldw	r2,-8(fp)
}
    5018:	e037883a 	mov	sp,fp
    501c:	dfc00117 	ldw	ra,4(sp)
    5020:	df000017 	ldw	fp,0(sp)
    5024:	dec00204 	addi	sp,sp,8
    5028:	f800283a 	ret

0000502c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    502c:	defffb04 	addi	sp,sp,-20
    5030:	df000415 	stw	fp,16(sp)
    5034:	df000404 	addi	fp,sp,16
    5038:	e13ffd15 	stw	r4,-12(fp)
    503c:	e17ffe15 	stw	r5,-8(fp)
    5040:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    5044:	e03ffc15 	stw	zero,-16(fp)
    5048:	00000f06 	br	5088 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    504c:	e0bffd17 	ldw	r2,-12(fp)
    5050:	10800a17 	ldw	r2,40(r2)
    5054:	10800044 	addi	r2,r2,1
    5058:	1009883a 	mov	r4,r2
    505c:	e0fffe17 	ldw	r3,-8(fp)
    5060:	e0bffc17 	ldw	r2,-16(fp)
    5064:	1885883a 	add	r2,r3,r2
    5068:	10800003 	ldbu	r2,0(r2)
    506c:	10803fcc 	andi	r2,r2,255
    5070:	1080201c 	xori	r2,r2,128
    5074:	10bfe004 	addi	r2,r2,-128
    5078:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    507c:	e0bffc17 	ldw	r2,-16(fp)
    5080:	10800044 	addi	r2,r2,1
    5084:	e0bffc15 	stw	r2,-16(fp)
    5088:	e0fffc17 	ldw	r3,-16(fp)
    508c:	e0bfff17 	ldw	r2,-4(fp)
    5090:	18bfee36 	bltu	r3,r2,504c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700504c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    5094:	0001883a 	nop
    5098:	e037883a 	mov	sp,fp
    509c:	df000017 	ldw	fp,0(sp)
    50a0:	dec00104 	addi	sp,sp,4
    50a4:	f800283a 	ret

000050a8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    50a8:	defffd04 	addi	sp,sp,-12
    50ac:	df000215 	stw	fp,8(sp)
    50b0:	df000204 	addi	fp,sp,8
    50b4:	e13ffe15 	stw	r4,-8(fp)
    50b8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    50bc:	00000d06 	br	50f4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    50c0:	e0bffe17 	ldw	r2,-8(fp)
    50c4:	10800a17 	ldw	r2,40(r2)
    50c8:	10800044 	addi	r2,r2,1
    50cc:	1007883a 	mov	r3,r2
    50d0:	e0bfff17 	ldw	r2,-4(fp)
    50d4:	10800003 	ldbu	r2,0(r2)
    50d8:	10803fcc 	andi	r2,r2,255
    50dc:	1080201c 	xori	r2,r2,128
    50e0:	10bfe004 	addi	r2,r2,-128
    50e4:	18800025 	stbio	r2,0(r3)
		++ptr;
    50e8:	e0bfff17 	ldw	r2,-4(fp)
    50ec:	10800044 	addi	r2,r2,1
    50f0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    50f4:	e0bfff17 	ldw	r2,-4(fp)
    50f8:	10800003 	ldbu	r2,0(r2)
    50fc:	10803fcc 	andi	r2,r2,255
    5100:	1080201c 	xori	r2,r2,128
    5104:	10bfe004 	addi	r2,r2,-128
    5108:	103fed1e 	bne	r2,zero,50c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050c0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    510c:	0001883a 	nop
    5110:	e037883a 	mov	sp,fp
    5114:	df000017 	ldw	fp,0(sp)
    5118:	dec00104 	addi	sp,sp,4
    511c:	f800283a 	ret

00005120 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    5120:	defffb04 	addi	sp,sp,-20
    5124:	dfc00415 	stw	ra,16(sp)
    5128:	df000315 	stw	fp,12(sp)
    512c:	df000304 	addi	fp,sp,12
    5130:	e13ffd15 	stw	r4,-12(fp)
    5134:	e17ffe15 	stw	r5,-8(fp)
    5138:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    513c:	e0bffd17 	ldw	r2,-12(fp)
    5140:	10800017 	ldw	r2,0(r2)
    5144:	e0ffff17 	ldw	r3,-4(fp)
    5148:	180d883a 	mov	r6,r3
    514c:	e17ffe17 	ldw	r5,-8(fp)
    5150:	1009883a 	mov	r4,r2
    5154:	000502c0 	call	502c <alt_up_character_lcd_write>
	return 0;
    5158:	0005883a 	mov	r2,zero
}
    515c:	e037883a 	mov	sp,fp
    5160:	dfc00117 	ldw	ra,4(sp)
    5164:	df000017 	ldw	fp,0(sp)
    5168:	dec00204 	addi	sp,sp,8
    516c:	f800283a 	ret

00005170 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    5170:	defffa04 	addi	sp,sp,-24
    5174:	dfc00515 	stw	ra,20(sp)
    5178:	df000415 	stw	fp,16(sp)
    517c:	df000404 	addi	fp,sp,16
    5180:	e13ffd15 	stw	r4,-12(fp)
    5184:	e17ffe15 	stw	r5,-8(fp)
    5188:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    518c:	e0bffe17 	ldw	r2,-8(fp)
    5190:	10800a28 	cmpgeui	r2,r2,40
    5194:	1000031e 	bne	r2,zero,51a4 <alt_up_character_lcd_set_cursor_pos+0x34>
    5198:	e0bfff17 	ldw	r2,-4(fp)
    519c:	108000b0 	cmpltui	r2,r2,2
    51a0:	1000021e 	bne	r2,zero,51ac <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    51a4:	00bfffc4 	movi	r2,-1
    51a8:	00000906 	br	51d0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    51ac:	e17fff17 	ldw	r5,-4(fp)
    51b0:	e13ffe17 	ldw	r4,-8(fp)
    51b4:	0004f040 	call	4f04 <get_DDRAM_addr>
    51b8:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    51bc:	e0bffc03 	ldbu	r2,-16(fp)
    51c0:	100b883a 	mov	r5,r2
    51c4:	e13ffd17 	ldw	r4,-12(fp)
    51c8:	0004f780 	call	4f78 <alt_up_character_lcd_send_cmd>
	return 0;
    51cc:	0005883a 	mov	r2,zero
}
    51d0:	e037883a 	mov	sp,fp
    51d4:	dfc00117 	ldw	ra,4(sp)
    51d8:	df000017 	ldw	fp,0(sp)
    51dc:	dec00204 	addi	sp,sp,8
    51e0:	f800283a 	ret

000051e4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    51e4:	defffb04 	addi	sp,sp,-20
    51e8:	dfc00415 	stw	ra,16(sp)
    51ec:	df000315 	stw	fp,12(sp)
    51f0:	df000304 	addi	fp,sp,12
    51f4:	e13ffe15 	stw	r4,-8(fp)
    51f8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    51fc:	e0bfff17 	ldw	r2,-4(fp)
    5200:	10001526 	beq	r2,zero,5258 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    5204:	e0bfff17 	ldw	r2,-4(fp)
    5208:	0080020e 	bge	zero,r2,5214 <alt_up_character_lcd_shift_cursor+0x30>
    520c:	00800504 	movi	r2,20
    5210:	00000106 	br	5218 <alt_up_character_lcd_shift_cursor+0x34>
    5214:	00800404 	movi	r2,16
    5218:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    521c:	e0bfff17 	ldw	r2,-4(fp)
    5220:	1000010e 	bge	r2,zero,5228 <alt_up_character_lcd_shift_cursor+0x44>
    5224:	0085c83a 	sub	r2,zero,r2
    5228:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    522c:	00000406 	br	5240 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    5230:	e0bffd43 	ldbu	r2,-11(fp)
    5234:	100b883a 	mov	r5,r2
    5238:	e13ffe17 	ldw	r4,-8(fp)
    523c:	0004f780 	call	4f78 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    5240:	e0bffd03 	ldbu	r2,-12(fp)
    5244:	10ffffc4 	addi	r3,r2,-1
    5248:	e0fffd05 	stb	r3,-12(fp)
    524c:	10803fcc 	andi	r2,r2,255
    5250:	103ff71e 	bne	r2,zero,5230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005230>
    5254:	00000106 	br	525c <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    5258:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    525c:	e037883a 	mov	sp,fp
    5260:	dfc00117 	ldw	ra,4(sp)
    5264:	df000017 	ldw	fp,0(sp)
    5268:	dec00204 	addi	sp,sp,8
    526c:	f800283a 	ret

00005270 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    5270:	defffb04 	addi	sp,sp,-20
    5274:	dfc00415 	stw	ra,16(sp)
    5278:	df000315 	stw	fp,12(sp)
    527c:	df000304 	addi	fp,sp,12
    5280:	e13ffe15 	stw	r4,-8(fp)
    5284:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    5288:	e0bfff17 	ldw	r2,-4(fp)
    528c:	10001526 	beq	r2,zero,52e4 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    5290:	e0bfff17 	ldw	r2,-4(fp)
    5294:	0080020e 	bge	zero,r2,52a0 <alt_up_character_lcd_shift_display+0x30>
    5298:	00800704 	movi	r2,28
    529c:	00000106 	br	52a4 <alt_up_character_lcd_shift_display+0x34>
    52a0:	00800604 	movi	r2,24
    52a4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    52a8:	e0bfff17 	ldw	r2,-4(fp)
    52ac:	1000010e 	bge	r2,zero,52b4 <alt_up_character_lcd_shift_display+0x44>
    52b0:	0085c83a 	sub	r2,zero,r2
    52b4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    52b8:	00000406 	br	52cc <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    52bc:	e0bffd43 	ldbu	r2,-11(fp)
    52c0:	100b883a 	mov	r5,r2
    52c4:	e13ffe17 	ldw	r4,-8(fp)
    52c8:	0004f780 	call	4f78 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    52cc:	e0bffd03 	ldbu	r2,-12(fp)
    52d0:	10ffffc4 	addi	r3,r2,-1
    52d4:	e0fffd05 	stb	r3,-12(fp)
    52d8:	10803fcc 	andi	r2,r2,255
    52dc:	103ff71e 	bne	r2,zero,52bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052bc>
    52e0:	00000106 	br	52e8 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    52e4:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    52e8:	e037883a 	mov	sp,fp
    52ec:	dfc00117 	ldw	ra,4(sp)
    52f0:	df000017 	ldw	fp,0(sp)
    52f4:	dec00204 	addi	sp,sp,8
    52f8:	f800283a 	ret

000052fc <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    52fc:	defffa04 	addi	sp,sp,-24
    5300:	dfc00515 	stw	ra,20(sp)
    5304:	df000415 	stw	fp,16(sp)
    5308:	df000404 	addi	fp,sp,16
    530c:	e13ffd15 	stw	r4,-12(fp)
    5310:	e17ffe15 	stw	r5,-8(fp)
    5314:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    5318:	e0bffe17 	ldw	r2,-8(fp)
    531c:	10800a28 	cmpgeui	r2,r2,40
    5320:	1000031e 	bne	r2,zero,5330 <alt_up_character_lcd_erase_pos+0x34>
    5324:	e0bfff17 	ldw	r2,-4(fp)
    5328:	108000b0 	cmpltui	r2,r2,2
    532c:	1000021e 	bne	r2,zero,5338 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    5330:	00bfffc4 	movi	r2,-1
    5334:	00000f06 	br	5374 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    5338:	e17fff17 	ldw	r5,-4(fp)
    533c:	e13ffe17 	ldw	r4,-8(fp)
    5340:	0004f040 	call	4f04 <get_DDRAM_addr>
    5344:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    5348:	e0bffc03 	ldbu	r2,-16(fp)
    534c:	100b883a 	mov	r5,r2
    5350:	e13ffd17 	ldw	r4,-12(fp)
    5354:	0004f780 	call	4f78 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    5358:	e0bffd17 	ldw	r2,-12(fp)
    535c:	10800a17 	ldw	r2,40(r2)
    5360:	10800044 	addi	r2,r2,1
    5364:	1007883a 	mov	r3,r2
    5368:	00800084 	movi	r2,2
    536c:	18800025 	stbio	r2,0(r3)
	return 0;
    5370:	0005883a 	mov	r2,zero
}
    5374:	e037883a 	mov	sp,fp
    5378:	dfc00117 	ldw	ra,4(sp)
    537c:	df000017 	ldw	fp,0(sp)
    5380:	dec00204 	addi	sp,sp,8
    5384:	f800283a 	ret

00005388 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    5388:	defffd04 	addi	sp,sp,-12
    538c:	dfc00215 	stw	ra,8(sp)
    5390:	df000115 	stw	fp,4(sp)
    5394:	df000104 	addi	fp,sp,4
    5398:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    539c:	01400304 	movi	r5,12
    53a0:	e13fff17 	ldw	r4,-4(fp)
    53a4:	0004f780 	call	4f78 <alt_up_character_lcd_send_cmd>
}
    53a8:	0001883a 	nop
    53ac:	e037883a 	mov	sp,fp
    53b0:	dfc00117 	ldw	ra,4(sp)
    53b4:	df000017 	ldw	fp,0(sp)
    53b8:	dec00204 	addi	sp,sp,8
    53bc:	f800283a 	ret

000053c0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    53c0:	defffd04 	addi	sp,sp,-12
    53c4:	dfc00215 	stw	ra,8(sp)
    53c8:	df000115 	stw	fp,4(sp)
    53cc:	df000104 	addi	fp,sp,4
    53d0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    53d4:	014003c4 	movi	r5,15
    53d8:	e13fff17 	ldw	r4,-4(fp)
    53dc:	0004f780 	call	4f78 <alt_up_character_lcd_send_cmd>
}
    53e0:	0001883a 	nop
    53e4:	e037883a 	mov	sp,fp
    53e8:	dfc00117 	ldw	ra,4(sp)
    53ec:	df000017 	ldw	fp,0(sp)
    53f0:	dec00204 	addi	sp,sp,8
    53f4:	f800283a 	ret

000053f8 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    53f8:	defffd04 	addi	sp,sp,-12
    53fc:	df000215 	stw	fp,8(sp)
    5400:	df000204 	addi	fp,sp,8
    5404:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    5408:	e0bfff17 	ldw	r2,-4(fp)
    540c:	10800a17 	ldw	r2,40(r2)
    5410:	10800104 	addi	r2,r2,4
    5414:	10800037 	ldwio	r2,0(r2)
    5418:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    541c:	e0bffe17 	ldw	r2,-8(fp)
    5420:	10800054 	ori	r2,r2,1
    5424:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    5428:	e0bfff17 	ldw	r2,-4(fp)
    542c:	10800a17 	ldw	r2,40(r2)
    5430:	10800104 	addi	r2,r2,4
    5434:	1007883a 	mov	r3,r2
    5438:	e0bffe17 	ldw	r2,-8(fp)
    543c:	18800035 	stwio	r2,0(r3)
}
    5440:	0001883a 	nop
    5444:	e037883a 	mov	sp,fp
    5448:	df000017 	ldw	fp,0(sp)
    544c:	dec00104 	addi	sp,sp,4
    5450:	f800283a 	ret

00005454 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    5454:	defffd04 	addi	sp,sp,-12
    5458:	df000215 	stw	fp,8(sp)
    545c:	df000204 	addi	fp,sp,8
    5460:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    5464:	e0bfff17 	ldw	r2,-4(fp)
    5468:	10800a17 	ldw	r2,40(r2)
    546c:	10800104 	addi	r2,r2,4
    5470:	10800037 	ldwio	r2,0(r2)
    5474:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    5478:	e0fffe17 	ldw	r3,-8(fp)
    547c:	00bfff84 	movi	r2,-2
    5480:	1884703a 	and	r2,r3,r2
    5484:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    5488:	e0bfff17 	ldw	r2,-4(fp)
    548c:	10800a17 	ldw	r2,40(r2)
    5490:	10800104 	addi	r2,r2,4
    5494:	1007883a 	mov	r3,r2
    5498:	e0bffe17 	ldw	r2,-8(fp)
    549c:	18800035 	stwio	r2,0(r3)
}
    54a0:	0001883a 	nop
    54a4:	e037883a 	mov	sp,fp
    54a8:	df000017 	ldw	fp,0(sp)
    54ac:	dec00104 	addi	sp,sp,4
    54b0:	f800283a 	ret

000054b4 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    54b4:	defffd04 	addi	sp,sp,-12
    54b8:	df000215 	stw	fp,8(sp)
    54bc:	df000204 	addi	fp,sp,8
    54c0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    54c4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    54c8:	e0bfff17 	ldw	r2,-4(fp)
    54cc:	10800a17 	ldw	r2,40(r2)
    54d0:	10800084 	addi	r2,r2,2
    54d4:	1080002b 	ldhuio	r2,0(r2)
    54d8:	10bfffcc 	andi	r2,r2,65535
    54dc:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    54e0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    54e4:	e037883a 	mov	sp,fp
    54e8:	df000017 	ldw	fp,0(sp)
    54ec:	dec00104 	addi	sp,sp,4
    54f0:	f800283a 	ret

000054f4 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    54f4:	defffd04 	addi	sp,sp,-12
    54f8:	df000215 	stw	fp,8(sp)
    54fc:	df000204 	addi	fp,sp,8
    5500:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    5504:	e0bfff17 	ldw	r2,-4(fp)
    5508:	10800a17 	ldw	r2,40(r2)
    550c:	10800104 	addi	r2,r2,4
    5510:	10800037 	ldwio	r2,0(r2)
    5514:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    5518:	e0bffe17 	ldw	r2,-8(fp)
    551c:	1004d43a 	srli	r2,r2,16
}
    5520:	e037883a 	mov	sp,fp
    5524:	df000017 	ldw	fp,0(sp)
    5528:	dec00104 	addi	sp,sp,4
    552c:	f800283a 	ret

00005530 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    5530:	defffd04 	addi	sp,sp,-12
    5534:	df000215 	stw	fp,8(sp)
    5538:	df000204 	addi	fp,sp,8
    553c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    5540:	e0bfff17 	ldw	r2,-4(fp)
    5544:	1080800c 	andi	r2,r2,512
    5548:	1004d27a 	srli	r2,r2,9
    554c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    5550:	e0bffe17 	ldw	r2,-8(fp)
    5554:	10000226 	beq	r2,zero,5560 <alt_up_irda_check_parity+0x30>
    5558:	00bfffc4 	movi	r2,-1
    555c:	00000106 	br	5564 <alt_up_irda_check_parity+0x34>
    5560:	0005883a 	mov	r2,zero
}
    5564:	e037883a 	mov	sp,fp
    5568:	df000017 	ldw	fp,0(sp)
    556c:	dec00104 	addi	sp,sp,4
    5570:	f800283a 	ret

00005574 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    5574:	defffd04 	addi	sp,sp,-12
    5578:	df000215 	stw	fp,8(sp)
    557c:	df000204 	addi	fp,sp,8
    5580:	e13ffe15 	stw	r4,-8(fp)
    5584:	2805883a 	mov	r2,r5
    5588:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    558c:	e0bffe17 	ldw	r2,-8(fp)
    5590:	10800a17 	ldw	r2,40(r2)
    5594:	1007883a 	mov	r3,r2
    5598:	e0bfff03 	ldbu	r2,-4(fp)
    559c:	18800035 	stwio	r2,0(r3)
	return 0;
    55a0:	0005883a 	mov	r2,zero
}
    55a4:	e037883a 	mov	sp,fp
    55a8:	df000017 	ldw	fp,0(sp)
    55ac:	dec00104 	addi	sp,sp,4
    55b0:	f800283a 	ret

000055b4 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    55b4:	defffa04 	addi	sp,sp,-24
    55b8:	dfc00515 	stw	ra,20(sp)
    55bc:	df000415 	stw	fp,16(sp)
    55c0:	df000404 	addi	fp,sp,16
    55c4:	e13ffd15 	stw	r4,-12(fp)
    55c8:	e17ffe15 	stw	r5,-8(fp)
    55cc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    55d0:	e0bffd17 	ldw	r2,-12(fp)
    55d4:	10800a17 	ldw	r2,40(r2)
    55d8:	10800037 	ldwio	r2,0(r2)
    55dc:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    55e0:	e0bffc17 	ldw	r2,-16(fp)
    55e4:	1007883a 	mov	r3,r2
    55e8:	e0bffe17 	ldw	r2,-8(fp)
    55ec:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    55f0:	e13ffc17 	ldw	r4,-16(fp)
    55f4:	00055300 	call	5530 <alt_up_irda_check_parity>
    55f8:	1007883a 	mov	r3,r2
    55fc:	e0bfff17 	ldw	r2,-4(fp)
    5600:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    5604:	e0bffc17 	ldw	r2,-16(fp)
    5608:	10a0000c 	andi	r2,r2,32768
    560c:	1004d3fa 	srli	r2,r2,15
    5610:	10bfffc4 	addi	r2,r2,-1
}
    5614:	e037883a 	mov	sp,fp
    5618:	dfc00117 	ldw	ra,4(sp)
    561c:	df000017 	ldw	fp,0(sp)
    5620:	dec00204 	addi	sp,sp,8
    5624:	f800283a 	ret

00005628 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    5628:	defff804 	addi	sp,sp,-32
    562c:	dfc00715 	stw	ra,28(sp)
    5630:	df000615 	stw	fp,24(sp)
    5634:	df000604 	addi	fp,sp,24
    5638:	e13ffd15 	stw	r4,-12(fp)
    563c:	e17ffe15 	stw	r5,-8(fp)
    5640:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    5644:	e0bffd17 	ldw	r2,-12(fp)
    5648:	10800017 	ldw	r2,0(r2)
    564c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    5650:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    5654:	00000c06 	br	5688 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    5658:	e0bffe17 	ldw	r2,-8(fp)
    565c:	10c00044 	addi	r3,r2,1
    5660:	e0fffe15 	stw	r3,-8(fp)
    5664:	e0fffc04 	addi	r3,fp,-16
    5668:	180d883a 	mov	r6,r3
    566c:	100b883a 	mov	r5,r2
    5670:	e13ffb17 	ldw	r4,-20(fp)
    5674:	00055b40 	call	55b4 <alt_up_irda_read_data>
    5678:	1000081e 	bne	r2,zero,569c <alt_up_irda_read_fd+0x74>
			count++;
    567c:	e0bffa17 	ldw	r2,-24(fp)
    5680:	10800044 	addi	r2,r2,1
    5684:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    5688:	e0bfff17 	ldw	r2,-4(fp)
    568c:	10ffffc4 	addi	r3,r2,-1
    5690:	e0ffff15 	stw	r3,-4(fp)
    5694:	103ff01e 	bne	r2,zero,5658 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005658>
    5698:	00000106 	br	56a0 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    569c:	0001883a 	nop
	}
	return count;
    56a0:	e0bffa17 	ldw	r2,-24(fp)
}
    56a4:	e037883a 	mov	sp,fp
    56a8:	dfc00117 	ldw	ra,4(sp)
    56ac:	df000017 	ldw	fp,0(sp)
    56b0:	dec00204 	addi	sp,sp,8
    56b4:	f800283a 	ret

000056b8 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    56b8:	defff904 	addi	sp,sp,-28
    56bc:	dfc00615 	stw	ra,24(sp)
    56c0:	df000515 	stw	fp,20(sp)
    56c4:	df000504 	addi	fp,sp,20
    56c8:	e13ffd15 	stw	r4,-12(fp)
    56cc:	e17ffe15 	stw	r5,-8(fp)
    56d0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    56d4:	e0bffd17 	ldw	r2,-12(fp)
    56d8:	10800017 	ldw	r2,0(r2)
    56dc:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    56e0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    56e4:	00000c06 	br	5718 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    56e8:	e0bffe17 	ldw	r2,-8(fp)
    56ec:	10c00044 	addi	r3,r2,1
    56f0:	e0fffe15 	stw	r3,-8(fp)
    56f4:	10800003 	ldbu	r2,0(r2)
    56f8:	10803fcc 	andi	r2,r2,255
    56fc:	100b883a 	mov	r5,r2
    5700:	e13ffc17 	ldw	r4,-16(fp)
    5704:	00055740 	call	5574 <alt_up_irda_write_data>
    5708:	1000081e 	bne	r2,zero,572c <alt_up_irda_write_fd+0x74>
			count++;
    570c:	e0bffb17 	ldw	r2,-20(fp)
    5710:	10800044 	addi	r2,r2,1
    5714:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    5718:	e0bfff17 	ldw	r2,-4(fp)
    571c:	10ffffc4 	addi	r3,r2,-1
    5720:	e0ffff15 	stw	r3,-4(fp)
    5724:	103ff01e 	bne	r2,zero,56e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056e8>
    5728:	00000106 	br	5730 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
    572c:	0001883a 	nop
	}
	return count;
    5730:	e0bffb17 	ldw	r2,-20(fp)
}
    5734:	e037883a 	mov	sp,fp
    5738:	dfc00117 	ldw	ra,4(sp)
    573c:	df000017 	ldw	fp,0(sp)
    5740:	dec00204 	addi	sp,sp,8
    5744:	f800283a 	ret

00005748 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    5748:	defffc04 	addi	sp,sp,-16
    574c:	dfc00315 	stw	ra,12(sp)
    5750:	df000215 	stw	fp,8(sp)
    5754:	df000204 	addi	fp,sp,8
    5758:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    575c:	d1600604 	addi	r5,gp,-32744
    5760:	e13fff17 	ldw	r4,-4(fp)
    5764:	00064b00 	call	64b0 <alt_find_dev>
    5768:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    576c:	e0bffe17 	ldw	r2,-8(fp)
}
    5770:	e037883a 	mov	sp,fp
    5774:	dfc00117 	ldw	ra,4(sp)
    5778:	df000017 	ldw	fp,0(sp)
    577c:	dec00204 	addi	sp,sp,8
    5780:	f800283a 	ret

00005784 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    5784:	defffd04 	addi	sp,sp,-12
    5788:	df000215 	stw	fp,8(sp)
    578c:	df000204 	addi	fp,sp,8
    5790:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    5794:	e0bfff17 	ldw	r2,-4(fp)
    5798:	1080400c 	andi	r2,r2,256
    579c:	1004d23a 	srli	r2,r2,8
    57a0:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    57a4:	e0bffe03 	ldbu	r2,-8(fp)
}
    57a8:	e037883a 	mov	sp,fp
    57ac:	df000017 	ldw	fp,0(sp)
    57b0:	dec00104 	addi	sp,sp,4
    57b4:	f800283a 	ret

000057b8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    57b8:	defffd04 	addi	sp,sp,-12
    57bc:	df000215 	stw	fp,8(sp)
    57c0:	df000204 	addi	fp,sp,8
    57c4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    57c8:	e0bfff17 	ldw	r2,-4(fp)
    57cc:	1080004c 	andi	r2,r2,1
    57d0:	e0bffe05 	stb	r2,-8(fp)
	return re;
    57d4:	e0bffe03 	ldbu	r2,-8(fp)
}
    57d8:	e037883a 	mov	sp,fp
    57dc:	df000017 	ldw	fp,0(sp)
    57e0:	dec00104 	addi	sp,sp,4
    57e4:	f800283a 	ret

000057e8 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    57e8:	defffd04 	addi	sp,sp,-12
    57ec:	df000215 	stw	fp,8(sp)
    57f0:	df000204 	addi	fp,sp,8
    57f4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    57f8:	e0bfff17 	ldw	r2,-4(fp)
    57fc:	1081000c 	andi	r2,r2,1024
    5800:	1004d2ba 	srli	r2,r2,10
    5804:	e0bffe05 	stb	r2,-8(fp)
	return re;
    5808:	e0bffe03 	ldbu	r2,-8(fp)
}
    580c:	e037883a 	mov	sp,fp
    5810:	df000017 	ldw	fp,0(sp)
    5814:	dec00104 	addi	sp,sp,4
    5818:	f800283a 	ret

0000581c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    581c:	defffd04 	addi	sp,sp,-12
    5820:	df000215 	stw	fp,8(sp)
    5824:	df000204 	addi	fp,sp,8
    5828:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    582c:	e0bfff17 	ldw	r2,-4(fp)
    5830:	1004d43a 	srli	r2,r2,16
    5834:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    5838:	e0bffe0b 	ldhu	r2,-8(fp)
}
    583c:	e037883a 	mov	sp,fp
    5840:	df000017 	ldw	fp,0(sp)
    5844:	dec00104 	addi	sp,sp,4
    5848:	f800283a 	ret

0000584c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    584c:	defffd04 	addi	sp,sp,-12
    5850:	df000215 	stw	fp,8(sp)
    5854:	df000204 	addi	fp,sp,8
    5858:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    585c:	e0bfff17 	ldw	r2,-4(fp)
    5860:	10a0000c 	andi	r2,r2,32768
    5864:	1004d3fa 	srli	r2,r2,15
    5868:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    586c:	e0bffe03 	ldbu	r2,-8(fp)
}
    5870:	e037883a 	mov	sp,fp
    5874:	df000017 	ldw	fp,0(sp)
    5878:	dec00104 	addi	sp,sp,4
    587c:	f800283a 	ret

00005880 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    5880:	defffd04 	addi	sp,sp,-12
    5884:	df000215 	stw	fp,8(sp)
    5888:	df000204 	addi	fp,sp,8
    588c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    5890:	e0bfff17 	ldw	r2,-4(fp)
    5894:	e0bffe05 	stb	r2,-8(fp)
	return data;
    5898:	e0bffe03 	ldbu	r2,-8(fp)
}
    589c:	e037883a 	mov	sp,fp
    58a0:	df000017 	ldw	fp,0(sp)
    58a4:	dec00104 	addi	sp,sp,4
    58a8:	f800283a 	ret

000058ac <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    58ac:	defffb04 	addi	sp,sp,-20
    58b0:	dfc00415 	stw	ra,16(sp)
    58b4:	df000315 	stw	fp,12(sp)
    58b8:	df000304 	addi	fp,sp,12
    58bc:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    58c0:	01403fc4 	movi	r5,255
    58c4:	e13fff17 	ldw	r4,-4(fp)
    58c8:	0005b0c0 	call	5b0c <alt_up_ps2_write_data_byte_with_ack>
    58cc:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    58d0:	e0bffd17 	ldw	r2,-12(fp)
    58d4:	1000211e 	bne	r2,zero,595c <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    58d8:	e0bffe04 	addi	r2,fp,-8
    58dc:	100b883a 	mov	r5,r2
    58e0:	e13fff17 	ldw	r4,-4(fp)
    58e4:	0005b700 	call	5b70 <alt_up_ps2_read_data_byte_timeout>
    58e8:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    58ec:	e0bffd17 	ldw	r2,-12(fp)
    58f0:	10001a1e 	bne	r2,zero,595c <alt_up_ps2_init+0xb0>
    58f4:	e0bffe03 	ldbu	r2,-8(fp)
    58f8:	10803fcc 	andi	r2,r2,255
    58fc:	10802a98 	cmpnei	r2,r2,170
    5900:	1000161e 	bne	r2,zero,595c <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    5904:	e0bffe04 	addi	r2,fp,-8
    5908:	100b883a 	mov	r5,r2
    590c:	e13fff17 	ldw	r4,-4(fp)
    5910:	0005b700 	call	5b70 <alt_up_ps2_read_data_byte_timeout>
    5914:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    5918:	e0bffd17 	ldw	r2,-12(fp)
    591c:	10bfe318 	cmpnei	r2,r2,-116
    5920:	1000041e 	bne	r2,zero,5934 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    5924:	e0bfff17 	ldw	r2,-4(fp)
    5928:	00c00044 	movi	r3,1
    592c:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    5930:	00000a06 	br	595c <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    5934:	e0bffd17 	ldw	r2,-12(fp)
    5938:	1000081e 	bne	r2,zero,595c <alt_up_ps2_init+0xb0>
    593c:	e0bffe03 	ldbu	r2,-8(fp)
    5940:	10803fcc 	andi	r2,r2,255
    5944:	1000051e 	bne	r2,zero,595c <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    5948:	e0bfff17 	ldw	r2,-4(fp)
    594c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    5950:	01403d04 	movi	r5,244
    5954:	e13fff17 	ldw	r4,-4(fp)
    5958:	0005a300 	call	5a30 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    595c:	0001883a 	nop
    5960:	e037883a 	mov	sp,fp
    5964:	dfc00117 	ldw	ra,4(sp)
    5968:	df000017 	ldw	fp,0(sp)
    596c:	dec00204 	addi	sp,sp,8
    5970:	f800283a 	ret

00005974 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    5974:	defffd04 	addi	sp,sp,-12
    5978:	df000215 	stw	fp,8(sp)
    597c:	df000204 	addi	fp,sp,8
    5980:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    5984:	e0bfff17 	ldw	r2,-4(fp)
    5988:	10800a17 	ldw	r2,40(r2)
    598c:	10800104 	addi	r2,r2,4
    5990:	10800037 	ldwio	r2,0(r2)
    5994:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    5998:	e0bffe17 	ldw	r2,-8(fp)
    599c:	10800054 	ori	r2,r2,1
    59a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    59a4:	e0bfff17 	ldw	r2,-4(fp)
    59a8:	10800a17 	ldw	r2,40(r2)
    59ac:	10800104 	addi	r2,r2,4
    59b0:	1007883a 	mov	r3,r2
    59b4:	e0bffe17 	ldw	r2,-8(fp)
    59b8:	18800035 	stwio	r2,0(r3)
}
    59bc:	0001883a 	nop
    59c0:	e037883a 	mov	sp,fp
    59c4:	df000017 	ldw	fp,0(sp)
    59c8:	dec00104 	addi	sp,sp,4
    59cc:	f800283a 	ret

000059d0 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    59d0:	defffd04 	addi	sp,sp,-12
    59d4:	df000215 	stw	fp,8(sp)
    59d8:	df000204 	addi	fp,sp,8
    59dc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    59e0:	e0bfff17 	ldw	r2,-4(fp)
    59e4:	10800a17 	ldw	r2,40(r2)
    59e8:	10800104 	addi	r2,r2,4
    59ec:	10800037 	ldwio	r2,0(r2)
    59f0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    59f4:	e0fffe17 	ldw	r3,-8(fp)
    59f8:	00bfff84 	movi	r2,-2
    59fc:	1884703a 	and	r2,r3,r2
    5a00:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    5a04:	e0bfff17 	ldw	r2,-4(fp)
    5a08:	10800a17 	ldw	r2,40(r2)
    5a0c:	10800104 	addi	r2,r2,4
    5a10:	1007883a 	mov	r3,r2
    5a14:	e0bffe17 	ldw	r2,-8(fp)
    5a18:	18800035 	stwio	r2,0(r3)
}
    5a1c:	0001883a 	nop
    5a20:	e037883a 	mov	sp,fp
    5a24:	df000017 	ldw	fp,0(sp)
    5a28:	dec00104 	addi	sp,sp,4
    5a2c:	f800283a 	ret

00005a30 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    5a30:	defffb04 	addi	sp,sp,-20
    5a34:	dfc00415 	stw	ra,16(sp)
    5a38:	df000315 	stw	fp,12(sp)
    5a3c:	df000304 	addi	fp,sp,12
    5a40:	e13ffe15 	stw	r4,-8(fp)
    5a44:	2805883a 	mov	r2,r5
    5a48:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    5a4c:	e0bffe17 	ldw	r2,-8(fp)
    5a50:	10800a17 	ldw	r2,40(r2)
    5a54:	1007883a 	mov	r3,r2
    5a58:	e0bfff03 	ldbu	r2,-4(fp)
    5a5c:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    5a60:	e0bffe17 	ldw	r2,-8(fp)
    5a64:	10800a17 	ldw	r2,40(r2)
    5a68:	10800104 	addi	r2,r2,4
    5a6c:	10800037 	ldwio	r2,0(r2)
    5a70:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    5a74:	e13ffd17 	ldw	r4,-12(fp)
    5a78:	00057e80 	call	57e8 <read_CE_bit>
    5a7c:	10803fcc 	andi	r2,r2,255
    5a80:	10000226 	beq	r2,zero,5a8c <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    5a84:	00bffec4 	movi	r2,-5
    5a88:	00000106 	br	5a90 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    5a8c:	0005883a 	mov	r2,zero
}
    5a90:	e037883a 	mov	sp,fp
    5a94:	dfc00117 	ldw	ra,4(sp)
    5a98:	df000017 	ldw	fp,0(sp)
    5a9c:	dec00204 	addi	sp,sp,8
    5aa0:	f800283a 	ret

00005aa4 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    5aa4:	defffc04 	addi	sp,sp,-16
    5aa8:	dfc00315 	stw	ra,12(sp)
    5aac:	df000215 	stw	fp,8(sp)
    5ab0:	df000204 	addi	fp,sp,8
    5ab4:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    5ab8:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    5abc:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    5ac0:	e0bffe44 	addi	r2,fp,-7
    5ac4:	100b883a 	mov	r5,r2
    5ac8:	e13fff17 	ldw	r4,-4(fp)
    5acc:	0005b700 	call	5b70 <alt_up_ps2_read_data_byte_timeout>
    5ad0:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    5ad4:	e0bffe03 	ldbu	r2,-8(fp)
    5ad8:	1000061e 	bne	r2,zero,5af4 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    5adc:	e0bffe43 	ldbu	r2,-7(fp)
    5ae0:	10803fcc 	andi	r2,r2,255
    5ae4:	10803e98 	cmpnei	r2,r2,250
    5ae8:	103ff51e 	bne	r2,zero,5ac0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ac0>
				return 0;
    5aec:	0005883a 	mov	r2,zero
    5af0:	00000106 	br	5af8 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    5af4:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    5af8:	e037883a 	mov	sp,fp
    5afc:	dfc00117 	ldw	ra,4(sp)
    5b00:	df000017 	ldw	fp,0(sp)
    5b04:	dec00204 	addi	sp,sp,8
    5b08:	f800283a 	ret

00005b0c <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    5b0c:	defffa04 	addi	sp,sp,-24
    5b10:	dfc00515 	stw	ra,20(sp)
    5b14:	df000415 	stw	fp,16(sp)
    5b18:	df000404 	addi	fp,sp,16
    5b1c:	e13ffe15 	stw	r4,-8(fp)
    5b20:	2805883a 	mov	r2,r5
    5b24:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    5b28:	e0bfff03 	ldbu	r2,-4(fp)
    5b2c:	100b883a 	mov	r5,r2
    5b30:	e13ffe17 	ldw	r4,-8(fp)
    5b34:	0005a300 	call	5a30 <alt_up_ps2_write_data_byte>
    5b38:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    5b3c:	e0bffc17 	ldw	r2,-16(fp)
    5b40:	10000226 	beq	r2,zero,5b4c <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    5b44:	e0bffc17 	ldw	r2,-16(fp)
    5b48:	00000406 	br	5b5c <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    5b4c:	e13ffe17 	ldw	r4,-8(fp)
    5b50:	0005aa40 	call	5aa4 <alt_up_ps2_wait_for_ack>
    5b54:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    5b58:	e0bffd17 	ldw	r2,-12(fp)
}
    5b5c:	e037883a 	mov	sp,fp
    5b60:	dfc00117 	ldw	ra,4(sp)
    5b64:	df000017 	ldw	fp,0(sp)
    5b68:	dec00204 	addi	sp,sp,8
    5b6c:	f800283a 	ret

00005b70 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    5b70:	defffa04 	addi	sp,sp,-24
    5b74:	dfc00515 	stw	ra,20(sp)
    5b78:	df000415 	stw	fp,16(sp)
    5b7c:	df000404 	addi	fp,sp,16
    5b80:	e13ffe15 	stw	r4,-8(fp)
    5b84:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    5b88:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    5b8c:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    5b90:	e0bffc17 	ldw	r2,-16(fp)
    5b94:	10800044 	addi	r2,r2,1
    5b98:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    5b9c:	e0bffe17 	ldw	r2,-8(fp)
    5ba0:	10800a17 	ldw	r2,40(r2)
    5ba4:	10800037 	ldwio	r2,0(r2)
    5ba8:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    5bac:	e13ffd17 	ldw	r4,-12(fp)
    5bb0:	000584c0 	call	584c <read_data_valid>
    5bb4:	10803fcc 	andi	r2,r2,255
    5bb8:	10000726 	beq	r2,zero,5bd8 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    5bbc:	e13ffd17 	ldw	r4,-12(fp)
    5bc0:	00058800 	call	5880 <read_data_byte>
    5bc4:	1007883a 	mov	r3,r2
    5bc8:	e0bfff17 	ldw	r2,-4(fp)
    5bcc:	10c00005 	stb	r3,0(r2)
			return 0;
    5bd0:	0005883a 	mov	r2,zero
    5bd4:	00000806 	br	5bf8 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    5bd8:	e0bffe17 	ldw	r2,-8(fp)
    5bdc:	10800c17 	ldw	r2,48(r2)
    5be0:	103feb26 	beq	r2,zero,5b90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b90>
    5be4:	e0bffe17 	ldw	r2,-8(fp)
    5be8:	10c00c17 	ldw	r3,48(r2)
    5bec:	e0bffc17 	ldw	r2,-16(fp)
    5bf0:	18bfe72e 	bgeu	r3,r2,5b90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b90>
		{
			return -ETIMEDOUT;
    5bf4:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    5bf8:	e037883a 	mov	sp,fp
    5bfc:	dfc00117 	ldw	ra,4(sp)
    5c00:	df000017 	ldw	fp,0(sp)
    5c04:	dec00204 	addi	sp,sp,8
    5c08:	f800283a 	ret

00005c0c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    5c0c:	defffb04 	addi	sp,sp,-20
    5c10:	dfc00415 	stw	ra,16(sp)
    5c14:	df000315 	stw	fp,12(sp)
    5c18:	df000304 	addi	fp,sp,12
    5c1c:	e13ffe15 	stw	r4,-8(fp)
    5c20:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    5c24:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    5c28:	e0bffe17 	ldw	r2,-8(fp)
    5c2c:	10800a17 	ldw	r2,40(r2)
    5c30:	10800037 	ldwio	r2,0(r2)
    5c34:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    5c38:	e13ffd17 	ldw	r4,-12(fp)
    5c3c:	000584c0 	call	584c <read_data_valid>
    5c40:	10803fcc 	andi	r2,r2,255
    5c44:	10000726 	beq	r2,zero,5c64 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    5c48:	e13ffd17 	ldw	r4,-12(fp)
    5c4c:	00058800 	call	5880 <read_data_byte>
    5c50:	1007883a 	mov	r3,r2
    5c54:	e0bfff17 	ldw	r2,-4(fp)
    5c58:	10c00005 	stb	r3,0(r2)
		return 0;
    5c5c:	0005883a 	mov	r2,zero
    5c60:	00000106 	br	5c68 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    5c64:	00bfffc4 	movi	r2,-1
}
    5c68:	e037883a 	mov	sp,fp
    5c6c:	dfc00117 	ldw	ra,4(sp)
    5c70:	df000017 	ldw	fp,0(sp)
    5c74:	dec00204 	addi	sp,sp,8
    5c78:	f800283a 	ret

00005c7c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    5c7c:	defffb04 	addi	sp,sp,-20
    5c80:	dfc00415 	stw	ra,16(sp)
    5c84:	df000315 	stw	fp,12(sp)
    5c88:	df000304 	addi	fp,sp,12
    5c8c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    5c90:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    5c94:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    5c98:	e0bfff17 	ldw	r2,-4(fp)
    5c9c:	10800a17 	ldw	r2,40(r2)
    5ca0:	10800037 	ldwio	r2,0(r2)
    5ca4:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    5ca8:	e13ffe17 	ldw	r4,-8(fp)
    5cac:	000581c0 	call	581c <read_num_bytes_available>
    5cb0:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    5cb4:	e0bffd0b 	ldhu	r2,-12(fp)
    5cb8:	103ff71e 	bne	r2,zero,5c98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c98>
}
    5cbc:	0001883a 	nop
    5cc0:	e037883a 	mov	sp,fp
    5cc4:	dfc00117 	ldw	ra,4(sp)
    5cc8:	df000017 	ldw	fp,0(sp)
    5ccc:	dec00204 	addi	sp,sp,8
    5cd0:	f800283a 	ret

00005cd4 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    5cd4:	defff804 	addi	sp,sp,-32
    5cd8:	dfc00715 	stw	ra,28(sp)
    5cdc:	df000615 	stw	fp,24(sp)
    5ce0:	df000604 	addi	fp,sp,24
    5ce4:	e13ffd15 	stw	r4,-12(fp)
    5ce8:	e17ffe15 	stw	r5,-8(fp)
    5cec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    5cf0:	e0bffd17 	ldw	r2,-12(fp)
    5cf4:	10800017 	ldw	r2,0(r2)
    5cf8:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    5cfc:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    5d00:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    5d04:	e0fffc17 	ldw	r3,-16(fp)
    5d08:	e0bfff17 	ldw	r2,-4(fp)
    5d0c:	18bffd16 	blt	r3,r2,5d04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d04>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    5d10:	e0bffe17 	ldw	r2,-8(fp)
    5d14:	10c00044 	addi	r3,r2,1
    5d18:	e0fffe15 	stw	r3,-8(fp)
    5d1c:	100b883a 	mov	r5,r2
    5d20:	e13ffa17 	ldw	r4,-24(fp)
    5d24:	0005b700 	call	5b70 <alt_up_ps2_read_data_byte_timeout>
    5d28:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    5d2c:	e0bffb17 	ldw	r2,-20(fp)
    5d30:	10000226 	beq	r2,zero,5d3c <alt_up_ps2_read_fd+0x68>
			return count;
    5d34:	e0bffc17 	ldw	r2,-16(fp)
    5d38:	00000406 	br	5d4c <alt_up_ps2_read_fd+0x78>
		count++;
    5d3c:	e0bffc17 	ldw	r2,-16(fp)
    5d40:	10800044 	addi	r2,r2,1
    5d44:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    5d48:	e0bffc17 	ldw	r2,-16(fp)
}
    5d4c:	e037883a 	mov	sp,fp
    5d50:	dfc00117 	ldw	ra,4(sp)
    5d54:	df000017 	ldw	fp,0(sp)
    5d58:	dec00204 	addi	sp,sp,8
    5d5c:	f800283a 	ret

00005d60 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    5d60:	defff804 	addi	sp,sp,-32
    5d64:	dfc00715 	stw	ra,28(sp)
    5d68:	df000615 	stw	fp,24(sp)
    5d6c:	df000604 	addi	fp,sp,24
    5d70:	e13ffd15 	stw	r4,-12(fp)
    5d74:	e17ffe15 	stw	r5,-8(fp)
    5d78:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    5d7c:	e0bffd17 	ldw	r2,-12(fp)
    5d80:	10800017 	ldw	r2,0(r2)
    5d84:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    5d88:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    5d8c:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    5d90:	00001006 	br	5dd4 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    5d94:	e0bffe17 	ldw	r2,-8(fp)
    5d98:	10c00044 	addi	r3,r2,1
    5d9c:	e0fffe15 	stw	r3,-8(fp)
    5da0:	10800003 	ldbu	r2,0(r2)
    5da4:	10803fcc 	andi	r2,r2,255
    5da8:	100b883a 	mov	r5,r2
    5dac:	e13ffb17 	ldw	r4,-20(fp)
    5db0:	0005a300 	call	5a30 <alt_up_ps2_write_data_byte>
    5db4:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    5db8:	e0bffc17 	ldw	r2,-16(fp)
    5dbc:	10000226 	beq	r2,zero,5dc8 <alt_up_ps2_write_fd+0x68>
			return count;
    5dc0:	e0bffa17 	ldw	r2,-24(fp)
    5dc4:	00000706 	br	5de4 <alt_up_ps2_write_fd+0x84>
		count++;
    5dc8:	e0bffa17 	ldw	r2,-24(fp)
    5dcc:	10800044 	addi	r2,r2,1
    5dd0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    5dd4:	e0fffa17 	ldw	r3,-24(fp)
    5dd8:	e0bfff17 	ldw	r2,-4(fp)
    5ddc:	18bfed16 	blt	r3,r2,5d94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d94>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    5de0:	e0bffa17 	ldw	r2,-24(fp)
}
    5de4:	e037883a 	mov	sp,fp
    5de8:	dfc00117 	ldw	ra,4(sp)
    5dec:	df000017 	ldw	fp,0(sp)
    5df0:	dec00204 	addi	sp,sp,8
    5df4:	f800283a 	ret

00005df8 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    5df8:	defffc04 	addi	sp,sp,-16
    5dfc:	dfc00315 	stw	ra,12(sp)
    5e00:	df000215 	stw	fp,8(sp)
    5e04:	df000204 	addi	fp,sp,8
    5e08:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    5e0c:	d1600604 	addi	r5,gp,-32744
    5e10:	e13fff17 	ldw	r4,-4(fp)
    5e14:	00064b00 	call	64b0 <alt_find_dev>
    5e18:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    5e1c:	e0bffe17 	ldw	r2,-8(fp)
}
    5e20:	e037883a 	mov	sp,fp
    5e24:	dfc00117 	ldw	ra,4(sp)
    5e28:	df000017 	ldw	fp,0(sp)
    5e2c:	dec00204 	addi	sp,sp,8
    5e30:	f800283a 	ret

00005e34 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    5e34:	defffd04 	addi	sp,sp,-12
    5e38:	df000215 	stw	fp,8(sp)
    5e3c:	df000204 	addi	fp,sp,8
    5e40:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    5e44:	e0bfff17 	ldw	r2,-4(fp)
    5e48:	10800a17 	ldw	r2,40(r2)
    5e4c:	10800104 	addi	r2,r2,4
    5e50:	10800037 	ldwio	r2,0(r2)
    5e54:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    5e58:	e0bffe17 	ldw	r2,-8(fp)
    5e5c:	10800054 	ori	r2,r2,1
    5e60:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    5e64:	e0bfff17 	ldw	r2,-4(fp)
    5e68:	10800a17 	ldw	r2,40(r2)
    5e6c:	10800104 	addi	r2,r2,4
    5e70:	1007883a 	mov	r3,r2
    5e74:	e0bffe17 	ldw	r2,-8(fp)
    5e78:	18800035 	stwio	r2,0(r3)
}
    5e7c:	0001883a 	nop
    5e80:	e037883a 	mov	sp,fp
    5e84:	df000017 	ldw	fp,0(sp)
    5e88:	dec00104 	addi	sp,sp,4
    5e8c:	f800283a 	ret

00005e90 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    5e90:	defffd04 	addi	sp,sp,-12
    5e94:	df000215 	stw	fp,8(sp)
    5e98:	df000204 	addi	fp,sp,8
    5e9c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    5ea0:	e0bfff17 	ldw	r2,-4(fp)
    5ea4:	10800a17 	ldw	r2,40(r2)
    5ea8:	10800104 	addi	r2,r2,4
    5eac:	10800037 	ldwio	r2,0(r2)
    5eb0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    5eb4:	e0fffe17 	ldw	r3,-8(fp)
    5eb8:	00bfff84 	movi	r2,-2
    5ebc:	1884703a 	and	r2,r3,r2
    5ec0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    5ec4:	e0bfff17 	ldw	r2,-4(fp)
    5ec8:	10800a17 	ldw	r2,40(r2)
    5ecc:	10800104 	addi	r2,r2,4
    5ed0:	1007883a 	mov	r3,r2
    5ed4:	e0bffe17 	ldw	r2,-8(fp)
    5ed8:	18800035 	stwio	r2,0(r3)
}
    5edc:	0001883a 	nop
    5ee0:	e037883a 	mov	sp,fp
    5ee4:	df000017 	ldw	fp,0(sp)
    5ee8:	dec00104 	addi	sp,sp,4
    5eec:	f800283a 	ret

00005ef0 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    5ef0:	defffd04 	addi	sp,sp,-12
    5ef4:	df000215 	stw	fp,8(sp)
    5ef8:	df000204 	addi	fp,sp,8
    5efc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    5f00:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    5f04:	e0bfff17 	ldw	r2,-4(fp)
    5f08:	10800a17 	ldw	r2,40(r2)
    5f0c:	10800084 	addi	r2,r2,2
    5f10:	1080002b 	ldhuio	r2,0(r2)
    5f14:	10bfffcc 	andi	r2,r2,65535
    5f18:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    5f1c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    5f20:	e037883a 	mov	sp,fp
    5f24:	df000017 	ldw	fp,0(sp)
    5f28:	dec00104 	addi	sp,sp,4
    5f2c:	f800283a 	ret

00005f30 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    5f30:	defffd04 	addi	sp,sp,-12
    5f34:	df000215 	stw	fp,8(sp)
    5f38:	df000204 	addi	fp,sp,8
    5f3c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    5f40:	e0bfff17 	ldw	r2,-4(fp)
    5f44:	10800a17 	ldw	r2,40(r2)
    5f48:	10800104 	addi	r2,r2,4
    5f4c:	10800037 	ldwio	r2,0(r2)
    5f50:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    5f54:	e0bffe17 	ldw	r2,-8(fp)
    5f58:	1004d43a 	srli	r2,r2,16
}
    5f5c:	e037883a 	mov	sp,fp
    5f60:	df000017 	ldw	fp,0(sp)
    5f64:	dec00104 	addi	sp,sp,4
    5f68:	f800283a 	ret

00005f6c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    5f6c:	defffd04 	addi	sp,sp,-12
    5f70:	df000215 	stw	fp,8(sp)
    5f74:	df000204 	addi	fp,sp,8
    5f78:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    5f7c:	e0bfff17 	ldw	r2,-4(fp)
    5f80:	1080800c 	andi	r2,r2,512
    5f84:	1004d27a 	srli	r2,r2,9
    5f88:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    5f8c:	e0bffe17 	ldw	r2,-8(fp)
    5f90:	10000226 	beq	r2,zero,5f9c <alt_up_rs232_check_parity+0x30>
    5f94:	00bfffc4 	movi	r2,-1
    5f98:	00000106 	br	5fa0 <alt_up_rs232_check_parity+0x34>
    5f9c:	0005883a 	mov	r2,zero
}
    5fa0:	e037883a 	mov	sp,fp
    5fa4:	df000017 	ldw	fp,0(sp)
    5fa8:	dec00104 	addi	sp,sp,4
    5fac:	f800283a 	ret

00005fb0 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    5fb0:	defffd04 	addi	sp,sp,-12
    5fb4:	df000215 	stw	fp,8(sp)
    5fb8:	df000204 	addi	fp,sp,8
    5fbc:	e13ffe15 	stw	r4,-8(fp)
    5fc0:	2805883a 	mov	r2,r5
    5fc4:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    5fc8:	e0bffe17 	ldw	r2,-8(fp)
    5fcc:	10800a17 	ldw	r2,40(r2)
    5fd0:	1007883a 	mov	r3,r2
    5fd4:	e0bfff03 	ldbu	r2,-4(fp)
    5fd8:	18800035 	stwio	r2,0(r3)
	return 0;
    5fdc:	0005883a 	mov	r2,zero
}
    5fe0:	e037883a 	mov	sp,fp
    5fe4:	df000017 	ldw	fp,0(sp)
    5fe8:	dec00104 	addi	sp,sp,4
    5fec:	f800283a 	ret

00005ff0 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    5ff0:	defffa04 	addi	sp,sp,-24
    5ff4:	dfc00515 	stw	ra,20(sp)
    5ff8:	df000415 	stw	fp,16(sp)
    5ffc:	df000404 	addi	fp,sp,16
    6000:	e13ffd15 	stw	r4,-12(fp)
    6004:	e17ffe15 	stw	r5,-8(fp)
    6008:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    600c:	e0bffd17 	ldw	r2,-12(fp)
    6010:	10800a17 	ldw	r2,40(r2)
    6014:	10800037 	ldwio	r2,0(r2)
    6018:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    601c:	e0bffc17 	ldw	r2,-16(fp)
    6020:	1007883a 	mov	r3,r2
    6024:	e0bffe17 	ldw	r2,-8(fp)
    6028:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    602c:	e13ffc17 	ldw	r4,-16(fp)
    6030:	0005f6c0 	call	5f6c <alt_up_rs232_check_parity>
    6034:	1007883a 	mov	r3,r2
    6038:	e0bfff17 	ldw	r2,-4(fp)
    603c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    6040:	e0bffc17 	ldw	r2,-16(fp)
    6044:	10a0000c 	andi	r2,r2,32768
    6048:	1004d3fa 	srli	r2,r2,15
    604c:	10bfffc4 	addi	r2,r2,-1
}
    6050:	e037883a 	mov	sp,fp
    6054:	dfc00117 	ldw	ra,4(sp)
    6058:	df000017 	ldw	fp,0(sp)
    605c:	dec00204 	addi	sp,sp,8
    6060:	f800283a 	ret

00006064 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    6064:	defff804 	addi	sp,sp,-32
    6068:	dfc00715 	stw	ra,28(sp)
    606c:	df000615 	stw	fp,24(sp)
    6070:	df000604 	addi	fp,sp,24
    6074:	e13ffd15 	stw	r4,-12(fp)
    6078:	e17ffe15 	stw	r5,-8(fp)
    607c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    6080:	e0bffd17 	ldw	r2,-12(fp)
    6084:	10800017 	ldw	r2,0(r2)
    6088:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    608c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    6090:	00000c06 	br	60c4 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    6094:	e0bffe17 	ldw	r2,-8(fp)
    6098:	10c00044 	addi	r3,r2,1
    609c:	e0fffe15 	stw	r3,-8(fp)
    60a0:	e0fffc04 	addi	r3,fp,-16
    60a4:	180d883a 	mov	r6,r3
    60a8:	100b883a 	mov	r5,r2
    60ac:	e13ffb17 	ldw	r4,-20(fp)
    60b0:	0005ff00 	call	5ff0 <alt_up_rs232_read_data>
    60b4:	1000081e 	bne	r2,zero,60d8 <alt_up_rs232_read_fd+0x74>
			count++;
    60b8:	e0bffa17 	ldw	r2,-24(fp)
    60bc:	10800044 	addi	r2,r2,1
    60c0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    60c4:	e0bfff17 	ldw	r2,-4(fp)
    60c8:	10ffffc4 	addi	r3,r2,-1
    60cc:	e0ffff15 	stw	r3,-4(fp)
    60d0:	103ff01e 	bne	r2,zero,6094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006094>
    60d4:	00000106 	br	60dc <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    60d8:	0001883a 	nop
	}
	return count;
    60dc:	e0bffa17 	ldw	r2,-24(fp)
}
    60e0:	e037883a 	mov	sp,fp
    60e4:	dfc00117 	ldw	ra,4(sp)
    60e8:	df000017 	ldw	fp,0(sp)
    60ec:	dec00204 	addi	sp,sp,8
    60f0:	f800283a 	ret

000060f4 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    60f4:	defff904 	addi	sp,sp,-28
    60f8:	dfc00615 	stw	ra,24(sp)
    60fc:	df000515 	stw	fp,20(sp)
    6100:	df000504 	addi	fp,sp,20
    6104:	e13ffd15 	stw	r4,-12(fp)
    6108:	e17ffe15 	stw	r5,-8(fp)
    610c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    6110:	e0bffd17 	ldw	r2,-12(fp)
    6114:	10800017 	ldw	r2,0(r2)
    6118:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    611c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    6120:	00000d06 	br	6158 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    6124:	e0bffe17 	ldw	r2,-8(fp)
    6128:	10800003 	ldbu	r2,0(r2)
    612c:	10803fcc 	andi	r2,r2,255
    6130:	100b883a 	mov	r5,r2
    6134:	e13ffc17 	ldw	r4,-16(fp)
    6138:	0005fb00 	call	5fb0 <alt_up_rs232_write_data>
    613c:	10000b1e 	bne	r2,zero,616c <alt_up_rs232_write_fd+0x78>
		{
			count++;
    6140:	e0bffb17 	ldw	r2,-20(fp)
    6144:	10800044 	addi	r2,r2,1
    6148:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    614c:	e0bffe17 	ldw	r2,-8(fp)
    6150:	10800044 	addi	r2,r2,1
    6154:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    6158:	e0bfff17 	ldw	r2,-4(fp)
    615c:	10ffffc4 	addi	r3,r2,-1
    6160:	e0ffff15 	stw	r3,-4(fp)
    6164:	103fef1e 	bne	r2,zero,6124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006124>
    6168:	00000106 	br	6170 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
    616c:	0001883a 	nop
	}
	return count;
    6170:	e0bffb17 	ldw	r2,-20(fp)
}
    6174:	e037883a 	mov	sp,fp
    6178:	dfc00117 	ldw	ra,4(sp)
    617c:	df000017 	ldw	fp,0(sp)
    6180:	dec00204 	addi	sp,sp,8
    6184:	f800283a 	ret

00006188 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    6188:	defffc04 	addi	sp,sp,-16
    618c:	dfc00315 	stw	ra,12(sp)
    6190:	df000215 	stw	fp,8(sp)
    6194:	df000204 	addi	fp,sp,8
    6198:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    619c:	d1600604 	addi	r5,gp,-32744
    61a0:	e13fff17 	ldw	r4,-4(fp)
    61a4:	00064b00 	call	64b0 <alt_find_dev>
    61a8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    61ac:	e0bffe17 	ldw	r2,-8(fp)
}
    61b0:	e037883a 	mov	sp,fp
    61b4:	dfc00117 	ldw	ra,4(sp)
    61b8:	df000017 	ldw	fp,0(sp)
    61bc:	dec00204 	addi	sp,sp,8
    61c0:	f800283a 	ret

000061c4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    61c4:	defff504 	addi	sp,sp,-44
    61c8:	df000a15 	stw	fp,40(sp)
    61cc:	df000a04 	addi	fp,sp,40
    61d0:	e13ffc15 	stw	r4,-16(fp)
    61d4:	e17ffd15 	stw	r5,-12(fp)
    61d8:	e1bffe15 	stw	r6,-8(fp)
    61dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    61e0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    61e4:	d0a77617 	ldw	r2,-25128(gp)
  
  if (alt_ticks_per_second ())
    61e8:	10003c26 	beq	r2,zero,62dc <alt_alarm_start+0x118>
  {
    if (alarm)
    61ec:	e0bffc17 	ldw	r2,-16(fp)
    61f0:	10003826 	beq	r2,zero,62d4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    61f4:	e0bffc17 	ldw	r2,-16(fp)
    61f8:	e0fffe17 	ldw	r3,-8(fp)
    61fc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    6200:	e0bffc17 	ldw	r2,-16(fp)
    6204:	e0ffff17 	ldw	r3,-4(fp)
    6208:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    620c:	0005303a 	rdctl	r2,status
    6210:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6214:	e0fff917 	ldw	r3,-28(fp)
    6218:	00bfff84 	movi	r2,-2
    621c:	1884703a 	and	r2,r3,r2
    6220:	1001703a 	wrctl	status,r2
  
  return context;
    6224:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    6228:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    622c:	d0a77717 	ldw	r2,-25124(gp)
      
      current_nticks = alt_nticks();
    6230:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    6234:	e0fffd17 	ldw	r3,-12(fp)
    6238:	e0bff617 	ldw	r2,-40(fp)
    623c:	1885883a 	add	r2,r3,r2
    6240:	10c00044 	addi	r3,r2,1
    6244:	e0bffc17 	ldw	r2,-16(fp)
    6248:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    624c:	e0bffc17 	ldw	r2,-16(fp)
    6250:	10c00217 	ldw	r3,8(r2)
    6254:	e0bff617 	ldw	r2,-40(fp)
    6258:	1880042e 	bgeu	r3,r2,626c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    625c:	e0bffc17 	ldw	r2,-16(fp)
    6260:	00c00044 	movi	r3,1
    6264:	10c00405 	stb	r3,16(r2)
    6268:	00000206 	br	6274 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    626c:	e0bffc17 	ldw	r2,-16(fp)
    6270:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    6274:	e0bffc17 	ldw	r2,-16(fp)
    6278:	d0e00c04 	addi	r3,gp,-32720
    627c:	e0fffa15 	stw	r3,-24(fp)
    6280:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    6284:	e0bffb17 	ldw	r2,-20(fp)
    6288:	e0fffa17 	ldw	r3,-24(fp)
    628c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    6290:	e0bffa17 	ldw	r2,-24(fp)
    6294:	10c00017 	ldw	r3,0(r2)
    6298:	e0bffb17 	ldw	r2,-20(fp)
    629c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    62a0:	e0bffa17 	ldw	r2,-24(fp)
    62a4:	10800017 	ldw	r2,0(r2)
    62a8:	e0fffb17 	ldw	r3,-20(fp)
    62ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    62b0:	e0bffa17 	ldw	r2,-24(fp)
    62b4:	e0fffb17 	ldw	r3,-20(fp)
    62b8:	10c00015 	stw	r3,0(r2)
    62bc:	e0bff817 	ldw	r2,-32(fp)
    62c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    62c4:	e0bff717 	ldw	r2,-36(fp)
    62c8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    62cc:	0005883a 	mov	r2,zero
    62d0:	00000306 	br	62e0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    62d4:	00bffa84 	movi	r2,-22
    62d8:	00000106 	br	62e0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    62dc:	00bfde84 	movi	r2,-134
  }
}
    62e0:	e037883a 	mov	sp,fp
    62e4:	df000017 	ldw	fp,0(sp)
    62e8:	dec00104 	addi	sp,sp,4
    62ec:	f800283a 	ret

000062f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    62f0:	deffff04 	addi	sp,sp,-4
    62f4:	df000015 	stw	fp,0(sp)
    62f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    62fc:	0001883a 	nop
    6300:	e037883a 	mov	sp,fp
    6304:	df000017 	ldw	fp,0(sp)
    6308:	dec00104 	addi	sp,sp,4
    630c:	f800283a 	ret

00006310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6310:	defffe04 	addi	sp,sp,-8
    6314:	dfc00115 	stw	ra,4(sp)
    6318:	df000015 	stw	fp,0(sp)
    631c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6320:	d0a00917 	ldw	r2,-32732(gp)
    6324:	10000326 	beq	r2,zero,6334 <alt_get_errno+0x24>
    6328:	d0a00917 	ldw	r2,-32732(gp)
    632c:	103ee83a 	callr	r2
    6330:	00000106 	br	6338 <alt_get_errno+0x28>
    6334:	d0a76f04 	addi	r2,gp,-25156
}
    6338:	e037883a 	mov	sp,fp
    633c:	dfc00117 	ldw	ra,4(sp)
    6340:	df000017 	ldw	fp,0(sp)
    6344:	dec00204 	addi	sp,sp,8
    6348:	f800283a 	ret

0000634c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    634c:	defffa04 	addi	sp,sp,-24
    6350:	dfc00515 	stw	ra,20(sp)
    6354:	df000415 	stw	fp,16(sp)
    6358:	df000404 	addi	fp,sp,16
    635c:	e13ffe15 	stw	r4,-8(fp)
    6360:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    6364:	e0bffe17 	ldw	r2,-8(fp)
    6368:	10000326 	beq	r2,zero,6378 <alt_dev_llist_insert+0x2c>
    636c:	e0bffe17 	ldw	r2,-8(fp)
    6370:	10800217 	ldw	r2,8(r2)
    6374:	1000061e 	bne	r2,zero,6390 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    6378:	00063100 	call	6310 <alt_get_errno>
    637c:	1007883a 	mov	r3,r2
    6380:	00800584 	movi	r2,22
    6384:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    6388:	00bffa84 	movi	r2,-22
    638c:	00001306 	br	63dc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    6390:	e0bffe17 	ldw	r2,-8(fp)
    6394:	e0ffff17 	ldw	r3,-4(fp)
    6398:	e0fffc15 	stw	r3,-16(fp)
    639c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    63a0:	e0bffd17 	ldw	r2,-12(fp)
    63a4:	e0fffc17 	ldw	r3,-16(fp)
    63a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    63ac:	e0bffc17 	ldw	r2,-16(fp)
    63b0:	10c00017 	ldw	r3,0(r2)
    63b4:	e0bffd17 	ldw	r2,-12(fp)
    63b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    63bc:	e0bffc17 	ldw	r2,-16(fp)
    63c0:	10800017 	ldw	r2,0(r2)
    63c4:	e0fffd17 	ldw	r3,-12(fp)
    63c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    63cc:	e0bffc17 	ldw	r2,-16(fp)
    63d0:	e0fffd17 	ldw	r3,-12(fp)
    63d4:	10c00015 	stw	r3,0(r2)

  return 0;  
    63d8:	0005883a 	mov	r2,zero
}
    63dc:	e037883a 	mov	sp,fp
    63e0:	dfc00117 	ldw	ra,4(sp)
    63e4:	df000017 	ldw	fp,0(sp)
    63e8:	dec00204 	addi	sp,sp,8
    63ec:	f800283a 	ret

000063f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    63f0:	defffd04 	addi	sp,sp,-12
    63f4:	dfc00215 	stw	ra,8(sp)
    63f8:	df000115 	stw	fp,4(sp)
    63fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    6400:	00800034 	movhi	r2,0
    6404:	109cae04 	addi	r2,r2,29368
    6408:	e0bfff15 	stw	r2,-4(fp)
    640c:	00000606 	br	6428 <_do_ctors+0x38>
        (*ctor) (); 
    6410:	e0bfff17 	ldw	r2,-4(fp)
    6414:	10800017 	ldw	r2,0(r2)
    6418:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    641c:	e0bfff17 	ldw	r2,-4(fp)
    6420:	10bfff04 	addi	r2,r2,-4
    6424:	e0bfff15 	stw	r2,-4(fp)
    6428:	e0ffff17 	ldw	r3,-4(fp)
    642c:	00800034 	movhi	r2,0
    6430:	109caf04 	addi	r2,r2,29372
    6434:	18bff62e 	bgeu	r3,r2,6410 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006410>
        (*ctor) (); 
}
    6438:	0001883a 	nop
    643c:	e037883a 	mov	sp,fp
    6440:	dfc00117 	ldw	ra,4(sp)
    6444:	df000017 	ldw	fp,0(sp)
    6448:	dec00204 	addi	sp,sp,8
    644c:	f800283a 	ret

00006450 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    6450:	defffd04 	addi	sp,sp,-12
    6454:	dfc00215 	stw	ra,8(sp)
    6458:	df000115 	stw	fp,4(sp)
    645c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6460:	00800034 	movhi	r2,0
    6464:	109cae04 	addi	r2,r2,29368
    6468:	e0bfff15 	stw	r2,-4(fp)
    646c:	00000606 	br	6488 <_do_dtors+0x38>
        (*dtor) (); 
    6470:	e0bfff17 	ldw	r2,-4(fp)
    6474:	10800017 	ldw	r2,0(r2)
    6478:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    647c:	e0bfff17 	ldw	r2,-4(fp)
    6480:	10bfff04 	addi	r2,r2,-4
    6484:	e0bfff15 	stw	r2,-4(fp)
    6488:	e0ffff17 	ldw	r3,-4(fp)
    648c:	00800034 	movhi	r2,0
    6490:	109caf04 	addi	r2,r2,29372
    6494:	18bff62e 	bgeu	r3,r2,6470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006470>
        (*dtor) (); 
}
    6498:	0001883a 	nop
    649c:	e037883a 	mov	sp,fp
    64a0:	dfc00117 	ldw	ra,4(sp)
    64a4:	df000017 	ldw	fp,0(sp)
    64a8:	dec00204 	addi	sp,sp,8
    64ac:	f800283a 	ret

000064b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    64b0:	defffa04 	addi	sp,sp,-24
    64b4:	dfc00515 	stw	ra,20(sp)
    64b8:	df000415 	stw	fp,16(sp)
    64bc:	df000404 	addi	fp,sp,16
    64c0:	e13ffe15 	stw	r4,-8(fp)
    64c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    64c8:	e0bfff17 	ldw	r2,-4(fp)
    64cc:	10800017 	ldw	r2,0(r2)
    64d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    64d4:	e13ffe17 	ldw	r4,-8(fp)
    64d8:	000038c0 	call	38c <strlen>
    64dc:	10800044 	addi	r2,r2,1
    64e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    64e4:	00000d06 	br	651c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    64e8:	e0bffc17 	ldw	r2,-16(fp)
    64ec:	10800217 	ldw	r2,8(r2)
    64f0:	e0fffd17 	ldw	r3,-12(fp)
    64f4:	180d883a 	mov	r6,r3
    64f8:	e17ffe17 	ldw	r5,-8(fp)
    64fc:	1009883a 	mov	r4,r2
    6500:	0006f740 	call	6f74 <memcmp>
    6504:	1000021e 	bne	r2,zero,6510 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    6508:	e0bffc17 	ldw	r2,-16(fp)
    650c:	00000706 	br	652c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    6510:	e0bffc17 	ldw	r2,-16(fp)
    6514:	10800017 	ldw	r2,0(r2)
    6518:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    651c:	e0fffc17 	ldw	r3,-16(fp)
    6520:	e0bfff17 	ldw	r2,-4(fp)
    6524:	18bff01e 	bne	r3,r2,64e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    6528:	0005883a 	mov	r2,zero
}
    652c:	e037883a 	mov	sp,fp
    6530:	dfc00117 	ldw	ra,4(sp)
    6534:	df000017 	ldw	fp,0(sp)
    6538:	dec00204 	addi	sp,sp,8
    653c:	f800283a 	ret

00006540 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    6540:	defffe04 	addi	sp,sp,-8
    6544:	dfc00115 	stw	ra,4(sp)
    6548:	df000015 	stw	fp,0(sp)
    654c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    6550:	01440004 	movi	r5,4096
    6554:	0009883a 	mov	r4,zero
    6558:	0006dfc0 	call	6dfc <alt_icache_flush>
#endif
}
    655c:	0001883a 	nop
    6560:	e037883a 	mov	sp,fp
    6564:	dfc00117 	ldw	ra,4(sp)
    6568:	df000017 	ldw	fp,0(sp)
    656c:	dec00204 	addi	sp,sp,8
    6570:	f800283a 	ret

00006574 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    6574:	defff904 	addi	sp,sp,-28
    6578:	dfc00615 	stw	ra,24(sp)
    657c:	df000515 	stw	fp,20(sp)
    6580:	df000504 	addi	fp,sp,20
    6584:	e13ffc15 	stw	r4,-16(fp)
    6588:	e17ffd15 	stw	r5,-12(fp)
    658c:	e1bffe15 	stw	r6,-8(fp)
    6590:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    6594:	e1bfff17 	ldw	r6,-4(fp)
    6598:	e17ffe17 	ldw	r5,-8(fp)
    659c:	e13ffd17 	ldw	r4,-12(fp)
    65a0:	00069340 	call	6934 <open>
    65a4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    65a8:	e0bffb17 	ldw	r2,-20(fp)
    65ac:	10001c16 	blt	r2,zero,6620 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    65b0:	00800034 	movhi	r2,0
    65b4:	109f2904 	addi	r2,r2,31908
    65b8:	e0fffb17 	ldw	r3,-20(fp)
    65bc:	18c00324 	muli	r3,r3,12
    65c0:	10c5883a 	add	r2,r2,r3
    65c4:	10c00017 	ldw	r3,0(r2)
    65c8:	e0bffc17 	ldw	r2,-16(fp)
    65cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    65d0:	00800034 	movhi	r2,0
    65d4:	109f2904 	addi	r2,r2,31908
    65d8:	e0fffb17 	ldw	r3,-20(fp)
    65dc:	18c00324 	muli	r3,r3,12
    65e0:	10c5883a 	add	r2,r2,r3
    65e4:	10800104 	addi	r2,r2,4
    65e8:	10c00017 	ldw	r3,0(r2)
    65ec:	e0bffc17 	ldw	r2,-16(fp)
    65f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    65f4:	00800034 	movhi	r2,0
    65f8:	109f2904 	addi	r2,r2,31908
    65fc:	e0fffb17 	ldw	r3,-20(fp)
    6600:	18c00324 	muli	r3,r3,12
    6604:	10c5883a 	add	r2,r2,r3
    6608:	10800204 	addi	r2,r2,8
    660c:	10c00017 	ldw	r3,0(r2)
    6610:	e0bffc17 	ldw	r2,-16(fp)
    6614:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    6618:	e13ffb17 	ldw	r4,-20(fp)
    661c:	000377c0 	call	377c <alt_release_fd>
  }
} 
    6620:	0001883a 	nop
    6624:	e037883a 	mov	sp,fp
    6628:	dfc00117 	ldw	ra,4(sp)
    662c:	df000017 	ldw	fp,0(sp)
    6630:	dec00204 	addi	sp,sp,8
    6634:	f800283a 	ret

00006638 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    6638:	defffb04 	addi	sp,sp,-20
    663c:	dfc00415 	stw	ra,16(sp)
    6640:	df000315 	stw	fp,12(sp)
    6644:	df000304 	addi	fp,sp,12
    6648:	e13ffd15 	stw	r4,-12(fp)
    664c:	e17ffe15 	stw	r5,-8(fp)
    6650:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    6654:	01c07fc4 	movi	r7,511
    6658:	01800044 	movi	r6,1
    665c:	e17ffd17 	ldw	r5,-12(fp)
    6660:	01000034 	movhi	r4,0
    6664:	211f2c04 	addi	r4,r4,31920
    6668:	00065740 	call	6574 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    666c:	01c07fc4 	movi	r7,511
    6670:	000d883a 	mov	r6,zero
    6674:	e17ffe17 	ldw	r5,-8(fp)
    6678:	01000034 	movhi	r4,0
    667c:	211f2904 	addi	r4,r4,31908
    6680:	00065740 	call	6574 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    6684:	01c07fc4 	movi	r7,511
    6688:	01800044 	movi	r6,1
    668c:	e17fff17 	ldw	r5,-4(fp)
    6690:	01000034 	movhi	r4,0
    6694:	211f2f04 	addi	r4,r4,31932
    6698:	00065740 	call	6574 <alt_open_fd>
}  
    669c:	0001883a 	nop
    66a0:	e037883a 	mov	sp,fp
    66a4:	dfc00117 	ldw	ra,4(sp)
    66a8:	df000017 	ldw	fp,0(sp)
    66ac:	dec00204 	addi	sp,sp,8
    66b0:	f800283a 	ret

000066b4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    66b4:	defff004 	addi	sp,sp,-64
    66b8:	df000f15 	stw	fp,60(sp)
    66bc:	df000f04 	addi	fp,sp,60
    66c0:	e13ffd15 	stw	r4,-12(fp)
    66c4:	e17ffe15 	stw	r5,-8(fp)
    66c8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    66cc:	00bffa84 	movi	r2,-22
    66d0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    66d4:	e0bffd17 	ldw	r2,-12(fp)
    66d8:	10800828 	cmpgeui	r2,r2,32
    66dc:	1000501e 	bne	r2,zero,6820 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    66e0:	0005303a 	rdctl	r2,status
    66e4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    66e8:	e0fff617 	ldw	r3,-40(fp)
    66ec:	00bfff84 	movi	r2,-2
    66f0:	1884703a 	and	r2,r3,r2
    66f4:	1001703a 	wrctl	status,r2
  
  return context;
    66f8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    66fc:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    6700:	00800074 	movhi	r2,1
    6704:	10abe704 	addi	r2,r2,-20580
    6708:	e0fffd17 	ldw	r3,-12(fp)
    670c:	180690fa 	slli	r3,r3,3
    6710:	10c5883a 	add	r2,r2,r3
    6714:	e0ffff17 	ldw	r3,-4(fp)
    6718:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    671c:	00800074 	movhi	r2,1
    6720:	10abe704 	addi	r2,r2,-20580
    6724:	e0fffd17 	ldw	r3,-12(fp)
    6728:	180690fa 	slli	r3,r3,3
    672c:	10c5883a 	add	r2,r2,r3
    6730:	10800104 	addi	r2,r2,4
    6734:	e0fffe17 	ldw	r3,-8(fp)
    6738:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    673c:	e0bfff17 	ldw	r2,-4(fp)
    6740:	10001926 	beq	r2,zero,67a8 <alt_irq_register+0xf4>
    6744:	e0bffd17 	ldw	r2,-12(fp)
    6748:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    674c:	0005303a 	rdctl	r2,status
    6750:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6754:	e0fff717 	ldw	r3,-36(fp)
    6758:	00bfff84 	movi	r2,-2
    675c:	1884703a 	and	r2,r3,r2
    6760:	1001703a 	wrctl	status,r2
  
  return context;
    6764:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    6768:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    676c:	00c00044 	movi	r3,1
    6770:	e0bff217 	ldw	r2,-56(fp)
    6774:	1884983a 	sll	r2,r3,r2
    6778:	1007883a 	mov	r3,r2
    677c:	d0a77517 	ldw	r2,-25132(gp)
    6780:	1884b03a 	or	r2,r3,r2
    6784:	d0a77515 	stw	r2,-25132(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    6788:	d0a77517 	ldw	r2,-25132(gp)
    678c:	100170fa 	wrctl	ienable,r2
    6790:	e0bff817 	ldw	r2,-32(fp)
    6794:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6798:	e0bff917 	ldw	r2,-28(fp)
    679c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    67a0:	0005883a 	mov	r2,zero
    67a4:	00001906 	br	680c <alt_irq_register+0x158>
    67a8:	e0bffd17 	ldw	r2,-12(fp)
    67ac:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    67b0:	0005303a 	rdctl	r2,status
    67b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    67b8:	e0fffa17 	ldw	r3,-24(fp)
    67bc:	00bfff84 	movi	r2,-2
    67c0:	1884703a 	and	r2,r3,r2
    67c4:	1001703a 	wrctl	status,r2
  
  return context;
    67c8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    67cc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    67d0:	00c00044 	movi	r3,1
    67d4:	e0bff417 	ldw	r2,-48(fp)
    67d8:	1884983a 	sll	r2,r3,r2
    67dc:	0084303a 	nor	r2,zero,r2
    67e0:	1007883a 	mov	r3,r2
    67e4:	d0a77517 	ldw	r2,-25132(gp)
    67e8:	1884703a 	and	r2,r3,r2
    67ec:	d0a77515 	stw	r2,-25132(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    67f0:	d0a77517 	ldw	r2,-25132(gp)
    67f4:	100170fa 	wrctl	ienable,r2
    67f8:	e0bffb17 	ldw	r2,-20(fp)
    67fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6800:	e0bffc17 	ldw	r2,-16(fp)
    6804:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    6808:	0005883a 	mov	r2,zero
    680c:	e0bff115 	stw	r2,-60(fp)
    6810:	e0bff317 	ldw	r2,-52(fp)
    6814:	e0bff515 	stw	r2,-44(fp)
    6818:	e0bff517 	ldw	r2,-44(fp)
    681c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    6820:	e0bff117 	ldw	r2,-60(fp)
}
    6824:	e037883a 	mov	sp,fp
    6828:	df000017 	ldw	fp,0(sp)
    682c:	dec00104 	addi	sp,sp,4
    6830:	f800283a 	ret

00006834 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6834:	defffe04 	addi	sp,sp,-8
    6838:	dfc00115 	stw	ra,4(sp)
    683c:	df000015 	stw	fp,0(sp)
    6840:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6844:	d0a00917 	ldw	r2,-32732(gp)
    6848:	10000326 	beq	r2,zero,6858 <alt_get_errno+0x24>
    684c:	d0a00917 	ldw	r2,-32732(gp)
    6850:	103ee83a 	callr	r2
    6854:	00000106 	br	685c <alt_get_errno+0x28>
    6858:	d0a76f04 	addi	r2,gp,-25156
}
    685c:	e037883a 	mov	sp,fp
    6860:	dfc00117 	ldw	ra,4(sp)
    6864:	df000017 	ldw	fp,0(sp)
    6868:	dec00204 	addi	sp,sp,8
    686c:	f800283a 	ret

00006870 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    6870:	defffd04 	addi	sp,sp,-12
    6874:	df000215 	stw	fp,8(sp)
    6878:	df000204 	addi	fp,sp,8
    687c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    6880:	e0bfff17 	ldw	r2,-4(fp)
    6884:	10800217 	ldw	r2,8(r2)
    6888:	10d00034 	orhi	r3,r2,16384
    688c:	e0bfff17 	ldw	r2,-4(fp)
    6890:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6894:	e03ffe15 	stw	zero,-8(fp)
    6898:	00001d06 	br	6910 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    689c:	00800034 	movhi	r2,0
    68a0:	109f2904 	addi	r2,r2,31908
    68a4:	e0fffe17 	ldw	r3,-8(fp)
    68a8:	18c00324 	muli	r3,r3,12
    68ac:	10c5883a 	add	r2,r2,r3
    68b0:	10c00017 	ldw	r3,0(r2)
    68b4:	e0bfff17 	ldw	r2,-4(fp)
    68b8:	10800017 	ldw	r2,0(r2)
    68bc:	1880111e 	bne	r3,r2,6904 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    68c0:	00800034 	movhi	r2,0
    68c4:	109f2904 	addi	r2,r2,31908
    68c8:	e0fffe17 	ldw	r3,-8(fp)
    68cc:	18c00324 	muli	r3,r3,12
    68d0:	10c5883a 	add	r2,r2,r3
    68d4:	10800204 	addi	r2,r2,8
    68d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    68dc:	1000090e 	bge	r2,zero,6904 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    68e0:	e0bffe17 	ldw	r2,-8(fp)
    68e4:	10c00324 	muli	r3,r2,12
    68e8:	00800034 	movhi	r2,0
    68ec:	109f2904 	addi	r2,r2,31908
    68f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    68f4:	e0bfff17 	ldw	r2,-4(fp)
    68f8:	18800226 	beq	r3,r2,6904 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    68fc:	00bffcc4 	movi	r2,-13
    6900:	00000806 	br	6924 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6904:	e0bffe17 	ldw	r2,-8(fp)
    6908:	10800044 	addi	r2,r2,1
    690c:	e0bffe15 	stw	r2,-8(fp)
    6910:	d0a00817 	ldw	r2,-32736(gp)
    6914:	1007883a 	mov	r3,r2
    6918:	e0bffe17 	ldw	r2,-8(fp)
    691c:	18bfdf2e 	bgeu	r3,r2,689c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700689c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    6920:	0005883a 	mov	r2,zero
}
    6924:	e037883a 	mov	sp,fp
    6928:	df000017 	ldw	fp,0(sp)
    692c:	dec00104 	addi	sp,sp,4
    6930:	f800283a 	ret

00006934 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    6934:	defff604 	addi	sp,sp,-40
    6938:	dfc00915 	stw	ra,36(sp)
    693c:	df000815 	stw	fp,32(sp)
    6940:	df000804 	addi	fp,sp,32
    6944:	e13ffd15 	stw	r4,-12(fp)
    6948:	e17ffe15 	stw	r5,-8(fp)
    694c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6950:	00bfffc4 	movi	r2,-1
    6954:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    6958:	00bffb44 	movi	r2,-19
    695c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    6960:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6964:	d1600604 	addi	r5,gp,-32744
    6968:	e13ffd17 	ldw	r4,-12(fp)
    696c:	00064b00 	call	64b0 <alt_find_dev>
    6970:	e0bff815 	stw	r2,-32(fp)
    6974:	e0bff817 	ldw	r2,-32(fp)
    6978:	1000051e 	bne	r2,zero,6990 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    697c:	e13ffd17 	ldw	r4,-12(fp)
    6980:	0006c500 	call	6c50 <alt_find_file>
    6984:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    6988:	00800044 	movi	r2,1
    698c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    6990:	e0bff817 	ldw	r2,-32(fp)
    6994:	10002926 	beq	r2,zero,6a3c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    6998:	e13ff817 	ldw	r4,-32(fp)
    699c:	0006d580 	call	6d58 <alt_get_fd>
    69a0:	e0bff915 	stw	r2,-28(fp)
    69a4:	e0bff917 	ldw	r2,-28(fp)
    69a8:	1000030e 	bge	r2,zero,69b8 <open+0x84>
    {
      status = index;
    69ac:	e0bff917 	ldw	r2,-28(fp)
    69b0:	e0bffa15 	stw	r2,-24(fp)
    69b4:	00002306 	br	6a44 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    69b8:	e0bff917 	ldw	r2,-28(fp)
    69bc:	10c00324 	muli	r3,r2,12
    69c0:	00800034 	movhi	r2,0
    69c4:	109f2904 	addi	r2,r2,31908
    69c8:	1885883a 	add	r2,r3,r2
    69cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    69d0:	e0fffe17 	ldw	r3,-8(fp)
    69d4:	00900034 	movhi	r2,16384
    69d8:	10bfffc4 	addi	r2,r2,-1
    69dc:	1886703a 	and	r3,r3,r2
    69e0:	e0bffc17 	ldw	r2,-16(fp)
    69e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    69e8:	e0bffb17 	ldw	r2,-20(fp)
    69ec:	1000051e 	bne	r2,zero,6a04 <open+0xd0>
    69f0:	e13ffc17 	ldw	r4,-16(fp)
    69f4:	00068700 	call	6870 <alt_file_locked>
    69f8:	e0bffa15 	stw	r2,-24(fp)
    69fc:	e0bffa17 	ldw	r2,-24(fp)
    6a00:	10001016 	blt	r2,zero,6a44 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    6a04:	e0bff817 	ldw	r2,-32(fp)
    6a08:	10800317 	ldw	r2,12(r2)
    6a0c:	10000826 	beq	r2,zero,6a30 <open+0xfc>
    6a10:	e0bff817 	ldw	r2,-32(fp)
    6a14:	10800317 	ldw	r2,12(r2)
    6a18:	e1ffff17 	ldw	r7,-4(fp)
    6a1c:	e1bffe17 	ldw	r6,-8(fp)
    6a20:	e17ffd17 	ldw	r5,-12(fp)
    6a24:	e13ffc17 	ldw	r4,-16(fp)
    6a28:	103ee83a 	callr	r2
    6a2c:	00000106 	br	6a34 <open+0x100>
    6a30:	0005883a 	mov	r2,zero
    6a34:	e0bffa15 	stw	r2,-24(fp)
    6a38:	00000206 	br	6a44 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    6a3c:	00bffb44 	movi	r2,-19
    6a40:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6a44:	e0bffa17 	ldw	r2,-24(fp)
    6a48:	1000090e 	bge	r2,zero,6a70 <open+0x13c>
  {
    alt_release_fd (index);  
    6a4c:	e13ff917 	ldw	r4,-28(fp)
    6a50:	000377c0 	call	377c <alt_release_fd>
    ALT_ERRNO = -status;
    6a54:	00068340 	call	6834 <alt_get_errno>
    6a58:	1007883a 	mov	r3,r2
    6a5c:	e0bffa17 	ldw	r2,-24(fp)
    6a60:	0085c83a 	sub	r2,zero,r2
    6a64:	18800015 	stw	r2,0(r3)
    return -1;
    6a68:	00bfffc4 	movi	r2,-1
    6a6c:	00000106 	br	6a74 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    6a70:	e0bff917 	ldw	r2,-28(fp)
}
    6a74:	e037883a 	mov	sp,fp
    6a78:	dfc00117 	ldw	ra,4(sp)
    6a7c:	df000017 	ldw	fp,0(sp)
    6a80:	dec00204 	addi	sp,sp,8
    6a84:	f800283a 	ret

00006a88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    6a88:	defffa04 	addi	sp,sp,-24
    6a8c:	df000515 	stw	fp,20(sp)
    6a90:	df000504 	addi	fp,sp,20
    6a94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6a98:	0005303a 	rdctl	r2,status
    6a9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6aa0:	e0fffc17 	ldw	r3,-16(fp)
    6aa4:	00bfff84 	movi	r2,-2
    6aa8:	1884703a 	and	r2,r3,r2
    6aac:	1001703a 	wrctl	status,r2
  
  return context;
    6ab0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    6ab4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    6ab8:	e0bfff17 	ldw	r2,-4(fp)
    6abc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    6ac0:	e0bffd17 	ldw	r2,-12(fp)
    6ac4:	10800017 	ldw	r2,0(r2)
    6ac8:	e0fffd17 	ldw	r3,-12(fp)
    6acc:	18c00117 	ldw	r3,4(r3)
    6ad0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    6ad4:	e0bffd17 	ldw	r2,-12(fp)
    6ad8:	10800117 	ldw	r2,4(r2)
    6adc:	e0fffd17 	ldw	r3,-12(fp)
    6ae0:	18c00017 	ldw	r3,0(r3)
    6ae4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    6ae8:	e0bffd17 	ldw	r2,-12(fp)
    6aec:	e0fffd17 	ldw	r3,-12(fp)
    6af0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    6af4:	e0bffd17 	ldw	r2,-12(fp)
    6af8:	e0fffd17 	ldw	r3,-12(fp)
    6afc:	10c00015 	stw	r3,0(r2)
    6b00:	e0bffb17 	ldw	r2,-20(fp)
    6b04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6b08:	e0bffe17 	ldw	r2,-8(fp)
    6b0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    6b10:	0001883a 	nop
    6b14:	e037883a 	mov	sp,fp
    6b18:	df000017 	ldw	fp,0(sp)
    6b1c:	dec00104 	addi	sp,sp,4
    6b20:	f800283a 	ret

00006b24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    6b24:	defffb04 	addi	sp,sp,-20
    6b28:	dfc00415 	stw	ra,16(sp)
    6b2c:	df000315 	stw	fp,12(sp)
    6b30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    6b34:	d0a00c17 	ldw	r2,-32720(gp)
    6b38:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    6b3c:	d0a77717 	ldw	r2,-25124(gp)
    6b40:	10800044 	addi	r2,r2,1
    6b44:	d0a77715 	stw	r2,-25124(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6b48:	00002e06 	br	6c04 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    6b4c:	e0bffd17 	ldw	r2,-12(fp)
    6b50:	10800017 	ldw	r2,0(r2)
    6b54:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    6b58:	e0bffd17 	ldw	r2,-12(fp)
    6b5c:	10800403 	ldbu	r2,16(r2)
    6b60:	10803fcc 	andi	r2,r2,255
    6b64:	10000426 	beq	r2,zero,6b78 <alt_tick+0x54>
    6b68:	d0a77717 	ldw	r2,-25124(gp)
    6b6c:	1000021e 	bne	r2,zero,6b78 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    6b70:	e0bffd17 	ldw	r2,-12(fp)
    6b74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    6b78:	e0bffd17 	ldw	r2,-12(fp)
    6b7c:	10800217 	ldw	r2,8(r2)
    6b80:	d0e77717 	ldw	r3,-25124(gp)
    6b84:	18801d36 	bltu	r3,r2,6bfc <alt_tick+0xd8>
    6b88:	e0bffd17 	ldw	r2,-12(fp)
    6b8c:	10800403 	ldbu	r2,16(r2)
    6b90:	10803fcc 	andi	r2,r2,255
    6b94:	1000191e 	bne	r2,zero,6bfc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    6b98:	e0bffd17 	ldw	r2,-12(fp)
    6b9c:	10800317 	ldw	r2,12(r2)
    6ba0:	e0fffd17 	ldw	r3,-12(fp)
    6ba4:	18c00517 	ldw	r3,20(r3)
    6ba8:	1809883a 	mov	r4,r3
    6bac:	103ee83a 	callr	r2
    6bb0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    6bb4:	e0bfff17 	ldw	r2,-4(fp)
    6bb8:	1000031e 	bne	r2,zero,6bc8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    6bbc:	e13ffd17 	ldw	r4,-12(fp)
    6bc0:	0006a880 	call	6a88 <alt_alarm_stop>
    6bc4:	00000d06 	br	6bfc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    6bc8:	e0bffd17 	ldw	r2,-12(fp)
    6bcc:	10c00217 	ldw	r3,8(r2)
    6bd0:	e0bfff17 	ldw	r2,-4(fp)
    6bd4:	1887883a 	add	r3,r3,r2
    6bd8:	e0bffd17 	ldw	r2,-12(fp)
    6bdc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    6be0:	e0bffd17 	ldw	r2,-12(fp)
    6be4:	10c00217 	ldw	r3,8(r2)
    6be8:	d0a77717 	ldw	r2,-25124(gp)
    6bec:	1880032e 	bgeu	r3,r2,6bfc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    6bf0:	e0bffd17 	ldw	r2,-12(fp)
    6bf4:	00c00044 	movi	r3,1
    6bf8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    6bfc:	e0bffe17 	ldw	r2,-8(fp)
    6c00:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6c04:	e0fffd17 	ldw	r3,-12(fp)
    6c08:	d0a00c04 	addi	r2,gp,-32720
    6c0c:	18bfcf1e 	bne	r3,r2,6b4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b4c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    6c10:	0001883a 	nop
}
    6c14:	0001883a 	nop
    6c18:	e037883a 	mov	sp,fp
    6c1c:	dfc00117 	ldw	ra,4(sp)
    6c20:	df000017 	ldw	fp,0(sp)
    6c24:	dec00204 	addi	sp,sp,8
    6c28:	f800283a 	ret

00006c2c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    6c2c:	deffff04 	addi	sp,sp,-4
    6c30:	df000015 	stw	fp,0(sp)
    6c34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    6c38:	000170fa 	wrctl	ienable,zero
}
    6c3c:	0001883a 	nop
    6c40:	e037883a 	mov	sp,fp
    6c44:	df000017 	ldw	fp,0(sp)
    6c48:	dec00104 	addi	sp,sp,4
    6c4c:	f800283a 	ret

00006c50 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    6c50:	defffb04 	addi	sp,sp,-20
    6c54:	dfc00415 	stw	ra,16(sp)
    6c58:	df000315 	stw	fp,12(sp)
    6c5c:	df000304 	addi	fp,sp,12
    6c60:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6c64:	d0a00417 	ldw	r2,-32752(gp)
    6c68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6c6c:	00003106 	br	6d34 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    6c70:	e0bffd17 	ldw	r2,-12(fp)
    6c74:	10800217 	ldw	r2,8(r2)
    6c78:	1009883a 	mov	r4,r2
    6c7c:	000038c0 	call	38c <strlen>
    6c80:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    6c84:	e0bffd17 	ldw	r2,-12(fp)
    6c88:	10c00217 	ldw	r3,8(r2)
    6c8c:	e0bffe17 	ldw	r2,-8(fp)
    6c90:	10bfffc4 	addi	r2,r2,-1
    6c94:	1885883a 	add	r2,r3,r2
    6c98:	10800003 	ldbu	r2,0(r2)
    6c9c:	10803fcc 	andi	r2,r2,255
    6ca0:	1080201c 	xori	r2,r2,128
    6ca4:	10bfe004 	addi	r2,r2,-128
    6ca8:	10800bd8 	cmpnei	r2,r2,47
    6cac:	1000031e 	bne	r2,zero,6cbc <alt_find_file+0x6c>
    {
      len -= 1;
    6cb0:	e0bffe17 	ldw	r2,-8(fp)
    6cb4:	10bfffc4 	addi	r2,r2,-1
    6cb8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6cbc:	e0bffe17 	ldw	r2,-8(fp)
    6cc0:	e0ffff17 	ldw	r3,-4(fp)
    6cc4:	1885883a 	add	r2,r3,r2
    6cc8:	10800003 	ldbu	r2,0(r2)
    6ccc:	10803fcc 	andi	r2,r2,255
    6cd0:	1080201c 	xori	r2,r2,128
    6cd4:	10bfe004 	addi	r2,r2,-128
    6cd8:	10800be0 	cmpeqi	r2,r2,47
    6cdc:	1000081e 	bne	r2,zero,6d00 <alt_find_file+0xb0>
    6ce0:	e0bffe17 	ldw	r2,-8(fp)
    6ce4:	e0ffff17 	ldw	r3,-4(fp)
    6ce8:	1885883a 	add	r2,r3,r2
    6cec:	10800003 	ldbu	r2,0(r2)
    6cf0:	10803fcc 	andi	r2,r2,255
    6cf4:	1080201c 	xori	r2,r2,128
    6cf8:	10bfe004 	addi	r2,r2,-128
    6cfc:	10000a1e 	bne	r2,zero,6d28 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    6d00:	e0bffd17 	ldw	r2,-12(fp)
    6d04:	10800217 	ldw	r2,8(r2)
    6d08:	e0fffe17 	ldw	r3,-8(fp)
    6d0c:	180d883a 	mov	r6,r3
    6d10:	e17fff17 	ldw	r5,-4(fp)
    6d14:	1009883a 	mov	r4,r2
    6d18:	0006f740 	call	6f74 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6d1c:	1000021e 	bne	r2,zero,6d28 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    6d20:	e0bffd17 	ldw	r2,-12(fp)
    6d24:	00000706 	br	6d44 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    6d28:	e0bffd17 	ldw	r2,-12(fp)
    6d2c:	10800017 	ldw	r2,0(r2)
    6d30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6d34:	e0fffd17 	ldw	r3,-12(fp)
    6d38:	d0a00404 	addi	r2,gp,-32752
    6d3c:	18bfcc1e 	bne	r3,r2,6c70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    6d40:	0005883a 	mov	r2,zero
}
    6d44:	e037883a 	mov	sp,fp
    6d48:	dfc00117 	ldw	ra,4(sp)
    6d4c:	df000017 	ldw	fp,0(sp)
    6d50:	dec00204 	addi	sp,sp,8
    6d54:	f800283a 	ret

00006d58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6d58:	defffc04 	addi	sp,sp,-16
    6d5c:	df000315 	stw	fp,12(sp)
    6d60:	df000304 	addi	fp,sp,12
    6d64:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    6d68:	00bffa04 	movi	r2,-24
    6d6c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6d70:	e03ffd15 	stw	zero,-12(fp)
    6d74:	00001906 	br	6ddc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    6d78:	00800034 	movhi	r2,0
    6d7c:	109f2904 	addi	r2,r2,31908
    6d80:	e0fffd17 	ldw	r3,-12(fp)
    6d84:	18c00324 	muli	r3,r3,12
    6d88:	10c5883a 	add	r2,r2,r3
    6d8c:	10800017 	ldw	r2,0(r2)
    6d90:	10000f1e 	bne	r2,zero,6dd0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    6d94:	00800034 	movhi	r2,0
    6d98:	109f2904 	addi	r2,r2,31908
    6d9c:	e0fffd17 	ldw	r3,-12(fp)
    6da0:	18c00324 	muli	r3,r3,12
    6da4:	10c5883a 	add	r2,r2,r3
    6da8:	e0ffff17 	ldw	r3,-4(fp)
    6dac:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    6db0:	d0e00817 	ldw	r3,-32736(gp)
    6db4:	e0bffd17 	ldw	r2,-12(fp)
    6db8:	1880020e 	bge	r3,r2,6dc4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    6dbc:	e0bffd17 	ldw	r2,-12(fp)
    6dc0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    6dc4:	e0bffd17 	ldw	r2,-12(fp)
    6dc8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    6dcc:	00000606 	br	6de8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6dd0:	e0bffd17 	ldw	r2,-12(fp)
    6dd4:	10800044 	addi	r2,r2,1
    6dd8:	e0bffd15 	stw	r2,-12(fp)
    6ddc:	e0bffd17 	ldw	r2,-12(fp)
    6de0:	10800810 	cmplti	r2,r2,32
    6de4:	103fe41e 	bne	r2,zero,6d78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d78>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6de8:	e0bffe17 	ldw	r2,-8(fp)
}
    6dec:	e037883a 	mov	sp,fp
    6df0:	df000017 	ldw	fp,0(sp)
    6df4:	dec00104 	addi	sp,sp,4
    6df8:	f800283a 	ret

00006dfc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    6dfc:	defffb04 	addi	sp,sp,-20
    6e00:	df000415 	stw	fp,16(sp)
    6e04:	df000404 	addi	fp,sp,16
    6e08:	e13ffe15 	stw	r4,-8(fp)
    6e0c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    6e10:	e0bfff17 	ldw	r2,-4(fp)
    6e14:	10840070 	cmpltui	r2,r2,4097
    6e18:	1000021e 	bne	r2,zero,6e24 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    6e1c:	00840004 	movi	r2,4096
    6e20:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    6e24:	e0fffe17 	ldw	r3,-8(fp)
    6e28:	e0bfff17 	ldw	r2,-4(fp)
    6e2c:	1885883a 	add	r2,r3,r2
    6e30:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6e34:	e0bffe17 	ldw	r2,-8(fp)
    6e38:	e0bffc15 	stw	r2,-16(fp)
    6e3c:	00000506 	br	6e54 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    6e40:	e0bffc17 	ldw	r2,-16(fp)
    6e44:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6e48:	e0bffc17 	ldw	r2,-16(fp)
    6e4c:	10800804 	addi	r2,r2,32
    6e50:	e0bffc15 	stw	r2,-16(fp)
    6e54:	e0fffc17 	ldw	r3,-16(fp)
    6e58:	e0bffd17 	ldw	r2,-12(fp)
    6e5c:	18bff836 	bltu	r3,r2,6e40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e40>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    6e60:	e0bffe17 	ldw	r2,-8(fp)
    6e64:	108007cc 	andi	r2,r2,31
    6e68:	10000226 	beq	r2,zero,6e74 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    6e6c:	e0bffc17 	ldw	r2,-16(fp)
    6e70:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    6e74:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    6e78:	0001883a 	nop
    6e7c:	e037883a 	mov	sp,fp
    6e80:	df000017 	ldw	fp,0(sp)
    6e84:	dec00104 	addi	sp,sp,4
    6e88:	f800283a 	ret

00006e8c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    6e8c:	defffe04 	addi	sp,sp,-8
    6e90:	df000115 	stw	fp,4(sp)
    6e94:	df000104 	addi	fp,sp,4
    6e98:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    6e9c:	e0bfff17 	ldw	r2,-4(fp)
    6ea0:	10bffe84 	addi	r2,r2,-6
    6ea4:	10c00428 	cmpgeui	r3,r2,16
    6ea8:	18001a1e 	bne	r3,zero,6f14 <alt_exception_cause_generated_bad_addr+0x88>
    6eac:	100690ba 	slli	r3,r2,2
    6eb0:	00800034 	movhi	r2,0
    6eb4:	109bb104 	addi	r2,r2,28356
    6eb8:	1885883a 	add	r2,r3,r2
    6ebc:	10800017 	ldw	r2,0(r2)
    6ec0:	1000683a 	jmp	r2
    6ec4:	00006f04 	movi	zero,444
    6ec8:	00006f04 	movi	zero,444
    6ecc:	00006f14 	movui	zero,444
    6ed0:	00006f14 	movui	zero,444
    6ed4:	00006f14 	movui	zero,444
    6ed8:	00006f04 	movi	zero,444
    6edc:	00006f0c 	andi	zero,zero,444
    6ee0:	00006f14 	movui	zero,444
    6ee4:	00006f04 	movi	zero,444
    6ee8:	00006f04 	movi	zero,444
    6eec:	00006f14 	movui	zero,444
    6ef0:	00006f04 	movi	zero,444
    6ef4:	00006f0c 	andi	zero,zero,444
    6ef8:	00006f14 	movui	zero,444
    6efc:	00006f14 	movui	zero,444
    6f00:	00006f04 	movi	zero,444
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    6f04:	00800044 	movi	r2,1
    6f08:	00000306 	br	6f18 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    6f0c:	0005883a 	mov	r2,zero
    6f10:	00000106 	br	6f18 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    6f14:	0005883a 	mov	r2,zero
  }
}
    6f18:	e037883a 	mov	sp,fp
    6f1c:	df000017 	ldw	fp,0(sp)
    6f20:	dec00104 	addi	sp,sp,4
    6f24:	f800283a 	ret

00006f28 <atexit>:
    6f28:	200b883a 	mov	r5,r4
    6f2c:	000f883a 	mov	r7,zero
    6f30:	000d883a 	mov	r6,zero
    6f34:	0009883a 	mov	r4,zero
    6f38:	0006ff01 	jmpi	6ff0 <__register_exitproc>

00006f3c <exit>:
    6f3c:	defffe04 	addi	sp,sp,-8
    6f40:	000b883a 	mov	r5,zero
    6f44:	dc000015 	stw	r16,0(sp)
    6f48:	dfc00115 	stw	ra,4(sp)
    6f4c:	2021883a 	mov	r16,r4
    6f50:	00071080 	call	7108 <__call_exitprocs>
    6f54:	00800074 	movhi	r2,1
    6f58:	10a46404 	addi	r2,r2,-28272
    6f5c:	11000017 	ldw	r4,0(r2)
    6f60:	20800f17 	ldw	r2,60(r4)
    6f64:	10000126 	beq	r2,zero,6f6c <exit+0x30>
    6f68:	103ee83a 	callr	r2
    6f6c:	8009883a 	mov	r4,r16
    6f70:	00072880 	call	7288 <_exit>

00006f74 <memcmp>:
    6f74:	01c000c4 	movi	r7,3
    6f78:	3980192e 	bgeu	r7,r6,6fe0 <memcmp+0x6c>
    6f7c:	2144b03a 	or	r2,r4,r5
    6f80:	11c4703a 	and	r2,r2,r7
    6f84:	10000f26 	beq	r2,zero,6fc4 <memcmp+0x50>
    6f88:	20800003 	ldbu	r2,0(r4)
    6f8c:	28c00003 	ldbu	r3,0(r5)
    6f90:	10c0151e 	bne	r2,r3,6fe8 <memcmp+0x74>
    6f94:	31bfff84 	addi	r6,r6,-2
    6f98:	01ffffc4 	movi	r7,-1
    6f9c:	00000406 	br	6fb0 <memcmp+0x3c>
    6fa0:	20800003 	ldbu	r2,0(r4)
    6fa4:	28c00003 	ldbu	r3,0(r5)
    6fa8:	31bfffc4 	addi	r6,r6,-1
    6fac:	10c00e1e 	bne	r2,r3,6fe8 <memcmp+0x74>
    6fb0:	21000044 	addi	r4,r4,1
    6fb4:	29400044 	addi	r5,r5,1
    6fb8:	31fff91e 	bne	r6,r7,6fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fa0>
    6fbc:	0005883a 	mov	r2,zero
    6fc0:	f800283a 	ret
    6fc4:	20c00017 	ldw	r3,0(r4)
    6fc8:	28800017 	ldw	r2,0(r5)
    6fcc:	18bfee1e 	bne	r3,r2,6f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f88>
    6fd0:	31bfff04 	addi	r6,r6,-4
    6fd4:	21000104 	addi	r4,r4,4
    6fd8:	29400104 	addi	r5,r5,4
    6fdc:	39bff936 	bltu	r7,r6,6fc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fc4>
    6fe0:	303fe91e 	bne	r6,zero,6f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f88>
    6fe4:	003ff506 	br	6fbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fbc>
    6fe8:	10c5c83a 	sub	r2,r2,r3
    6fec:	f800283a 	ret

00006ff0 <__register_exitproc>:
    6ff0:	defffa04 	addi	sp,sp,-24
    6ff4:	dc000315 	stw	r16,12(sp)
    6ff8:	04000074 	movhi	r16,1
    6ffc:	84246404 	addi	r16,r16,-28272
    7000:	80c00017 	ldw	r3,0(r16)
    7004:	dc400415 	stw	r17,16(sp)
    7008:	dfc00515 	stw	ra,20(sp)
    700c:	18805217 	ldw	r2,328(r3)
    7010:	2023883a 	mov	r17,r4
    7014:	10003726 	beq	r2,zero,70f4 <__register_exitproc+0x104>
    7018:	10c00117 	ldw	r3,4(r2)
    701c:	010007c4 	movi	r4,31
    7020:	20c00e16 	blt	r4,r3,705c <__register_exitproc+0x6c>
    7024:	1a000044 	addi	r8,r3,1
    7028:	8800221e 	bne	r17,zero,70b4 <__register_exitproc+0xc4>
    702c:	18c00084 	addi	r3,r3,2
    7030:	18c7883a 	add	r3,r3,r3
    7034:	18c7883a 	add	r3,r3,r3
    7038:	12000115 	stw	r8,4(r2)
    703c:	10c7883a 	add	r3,r2,r3
    7040:	19400015 	stw	r5,0(r3)
    7044:	0005883a 	mov	r2,zero
    7048:	dfc00517 	ldw	ra,20(sp)
    704c:	dc400417 	ldw	r17,16(sp)
    7050:	dc000317 	ldw	r16,12(sp)
    7054:	dec00604 	addi	sp,sp,24
    7058:	f800283a 	ret
    705c:	00800034 	movhi	r2,0
    7060:	10800004 	addi	r2,r2,0
    7064:	10002626 	beq	r2,zero,7100 <__register_exitproc+0x110>
    7068:	01006404 	movi	r4,400
    706c:	d9400015 	stw	r5,0(sp)
    7070:	d9800115 	stw	r6,4(sp)
    7074:	d9c00215 	stw	r7,8(sp)
    7078:	00000000 	call	0 <__alt_mem_SDRAM>
    707c:	d9400017 	ldw	r5,0(sp)
    7080:	d9800117 	ldw	r6,4(sp)
    7084:	d9c00217 	ldw	r7,8(sp)
    7088:	10001d26 	beq	r2,zero,7100 <__register_exitproc+0x110>
    708c:	81000017 	ldw	r4,0(r16)
    7090:	10000115 	stw	zero,4(r2)
    7094:	02000044 	movi	r8,1
    7098:	22405217 	ldw	r9,328(r4)
    709c:	0007883a 	mov	r3,zero
    70a0:	12400015 	stw	r9,0(r2)
    70a4:	20805215 	stw	r2,328(r4)
    70a8:	10006215 	stw	zero,392(r2)
    70ac:	10006315 	stw	zero,396(r2)
    70b0:	883fde26 	beq	r17,zero,702c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700702c>
    70b4:	18c9883a 	add	r4,r3,r3
    70b8:	2109883a 	add	r4,r4,r4
    70bc:	1109883a 	add	r4,r2,r4
    70c0:	21802215 	stw	r6,136(r4)
    70c4:	01800044 	movi	r6,1
    70c8:	12406217 	ldw	r9,392(r2)
    70cc:	30cc983a 	sll	r6,r6,r3
    70d0:	4992b03a 	or	r9,r9,r6
    70d4:	12406215 	stw	r9,392(r2)
    70d8:	21c04215 	stw	r7,264(r4)
    70dc:	01000084 	movi	r4,2
    70e0:	893fd21e 	bne	r17,r4,702c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700702c>
    70e4:	11006317 	ldw	r4,396(r2)
    70e8:	218cb03a 	or	r6,r4,r6
    70ec:	11806315 	stw	r6,396(r2)
    70f0:	003fce06 	br	702c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700702c>
    70f4:	18805304 	addi	r2,r3,332
    70f8:	18805215 	stw	r2,328(r3)
    70fc:	003fc606 	br	7018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007018>
    7100:	00bfffc4 	movi	r2,-1
    7104:	003fd006 	br	7048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007048>

00007108 <__call_exitprocs>:
    7108:	defff504 	addi	sp,sp,-44
    710c:	df000915 	stw	fp,36(sp)
    7110:	dd400615 	stw	r21,24(sp)
    7114:	dc800315 	stw	r18,12(sp)
    7118:	dfc00a15 	stw	ra,40(sp)
    711c:	ddc00815 	stw	r23,32(sp)
    7120:	dd800715 	stw	r22,28(sp)
    7124:	dd000515 	stw	r20,20(sp)
    7128:	dcc00415 	stw	r19,16(sp)
    712c:	dc400215 	stw	r17,8(sp)
    7130:	dc000115 	stw	r16,4(sp)
    7134:	d9000015 	stw	r4,0(sp)
    7138:	2839883a 	mov	fp,r5
    713c:	04800044 	movi	r18,1
    7140:	057fffc4 	movi	r21,-1
    7144:	00800074 	movhi	r2,1
    7148:	10a46404 	addi	r2,r2,-28272
    714c:	12000017 	ldw	r8,0(r2)
    7150:	45005217 	ldw	r20,328(r8)
    7154:	44c05204 	addi	r19,r8,328
    7158:	a0001c26 	beq	r20,zero,71cc <__call_exitprocs+0xc4>
    715c:	a0800117 	ldw	r2,4(r20)
    7160:	15ffffc4 	addi	r23,r2,-1
    7164:	b8000d16 	blt	r23,zero,719c <__call_exitprocs+0x94>
    7168:	14000044 	addi	r16,r2,1
    716c:	8421883a 	add	r16,r16,r16
    7170:	8421883a 	add	r16,r16,r16
    7174:	84402004 	addi	r17,r16,128
    7178:	a463883a 	add	r17,r20,r17
    717c:	a421883a 	add	r16,r20,r16
    7180:	e0001e26 	beq	fp,zero,71fc <__call_exitprocs+0xf4>
    7184:	80804017 	ldw	r2,256(r16)
    7188:	e0801c26 	beq	fp,r2,71fc <__call_exitprocs+0xf4>
    718c:	bdffffc4 	addi	r23,r23,-1
    7190:	843fff04 	addi	r16,r16,-4
    7194:	8c7fff04 	addi	r17,r17,-4
    7198:	bd7ff91e 	bne	r23,r21,7180 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007180>
    719c:	00800034 	movhi	r2,0
    71a0:	10800004 	addi	r2,r2,0
    71a4:	10000926 	beq	r2,zero,71cc <__call_exitprocs+0xc4>
    71a8:	a0800117 	ldw	r2,4(r20)
    71ac:	1000301e 	bne	r2,zero,7270 <__call_exitprocs+0x168>
    71b0:	a0800017 	ldw	r2,0(r20)
    71b4:	10003226 	beq	r2,zero,7280 <__call_exitprocs+0x178>
    71b8:	a009883a 	mov	r4,r20
    71bc:	98800015 	stw	r2,0(r19)
    71c0:	00000000 	call	0 <__alt_mem_SDRAM>
    71c4:	9d000017 	ldw	r20,0(r19)
    71c8:	a03fe41e 	bne	r20,zero,715c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700715c>
    71cc:	dfc00a17 	ldw	ra,40(sp)
    71d0:	df000917 	ldw	fp,36(sp)
    71d4:	ddc00817 	ldw	r23,32(sp)
    71d8:	dd800717 	ldw	r22,28(sp)
    71dc:	dd400617 	ldw	r21,24(sp)
    71e0:	dd000517 	ldw	r20,20(sp)
    71e4:	dcc00417 	ldw	r19,16(sp)
    71e8:	dc800317 	ldw	r18,12(sp)
    71ec:	dc400217 	ldw	r17,8(sp)
    71f0:	dc000117 	ldw	r16,4(sp)
    71f4:	dec00b04 	addi	sp,sp,44
    71f8:	f800283a 	ret
    71fc:	a0800117 	ldw	r2,4(r20)
    7200:	80c00017 	ldw	r3,0(r16)
    7204:	10bfffc4 	addi	r2,r2,-1
    7208:	15c01426 	beq	r2,r23,725c <__call_exitprocs+0x154>
    720c:	80000015 	stw	zero,0(r16)
    7210:	183fde26 	beq	r3,zero,718c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700718c>
    7214:	95c8983a 	sll	r4,r18,r23
    7218:	a0806217 	ldw	r2,392(r20)
    721c:	a5800117 	ldw	r22,4(r20)
    7220:	2084703a 	and	r2,r4,r2
    7224:	10000b26 	beq	r2,zero,7254 <__call_exitprocs+0x14c>
    7228:	a0806317 	ldw	r2,396(r20)
    722c:	2088703a 	and	r4,r4,r2
    7230:	20000c1e 	bne	r4,zero,7264 <__call_exitprocs+0x15c>
    7234:	89400017 	ldw	r5,0(r17)
    7238:	d9000017 	ldw	r4,0(sp)
    723c:	183ee83a 	callr	r3
    7240:	a0800117 	ldw	r2,4(r20)
    7244:	15bfbf1e 	bne	r2,r22,7144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007144>
    7248:	98800017 	ldw	r2,0(r19)
    724c:	153fcf26 	beq	r2,r20,718c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700718c>
    7250:	003fbc06 	br	7144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007144>
    7254:	183ee83a 	callr	r3
    7258:	003ff906 	br	7240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007240>
    725c:	a5c00115 	stw	r23,4(r20)
    7260:	003feb06 	br	7210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007210>
    7264:	89000017 	ldw	r4,0(r17)
    7268:	183ee83a 	callr	r3
    726c:	003ff406 	br	7240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007240>
    7270:	a0800017 	ldw	r2,0(r20)
    7274:	a027883a 	mov	r19,r20
    7278:	1029883a 	mov	r20,r2
    727c:	003fb606 	br	7158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007158>
    7280:	0005883a 	mov	r2,zero
    7284:	003ffb06 	br	7274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007274>

00007288 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    7288:	defffd04 	addi	sp,sp,-12
    728c:	df000215 	stw	fp,8(sp)
    7290:	df000204 	addi	fp,sp,8
    7294:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    7298:	0001883a 	nop
    729c:	e0bfff17 	ldw	r2,-4(fp)
    72a0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    72a4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    72a8:	10000226 	beq	r2,zero,72b4 <_exit+0x2c>
    ALT_SIM_FAIL();
    72ac:	002af070 	cmpltui	zero,zero,43969
    72b0:	00000106 	br	72b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    72b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    72b8:	003fff06 	br	72b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70072b8>
